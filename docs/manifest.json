{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.0", "generated_at": "2021-03-12T21:38:19.423739Z", "invocation_id": "00b05554-c95f-4bb4-aa9c-b2599a15e256", "env": {}, "project_id": "fb1a7b9ce88ce39cb54ba2ec5c0aaab3", "user_id": "57178664-37b2-4047-9572-68ec8b488cd7", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.quickbooks_integration_tests.bill_payment_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bill_payment_data"], "unique_id": "seed.quickbooks_integration_tests.bill_payment_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bill_payment_data.csv", "original_file_path": "data/bill_payment_data.csv", "name": "bill_payment_data", "resource_type": "seed", "alias": "bill_payment_data", "checksum": {"name": "sha256", "checksum": "654e27fe99f7891483ba67ae67202f00a166df46c6463965f831bd47d3bc53cf"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bill_payment_data`"}, "seed.quickbooks_integration_tests.bundle_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bundle_data"], "unique_id": "seed.quickbooks_integration_tests.bundle_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bundle_data.csv", "original_file_path": "data/bundle_data.csv", "name": "bundle_data", "resource_type": "seed", "alias": "bundle_data", "checksum": {"name": "sha256", "checksum": "090d802f05c558f45f05a760b5fb1fa879dfeb26c737e6356dcf6bfcb9fbbefb"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bundle_data`"}, "seed.quickbooks_integration_tests.bill_payment_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bill_payment_line_data"], "unique_id": "seed.quickbooks_integration_tests.bill_payment_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bill_payment_line_data.csv", "original_file_path": "data/bill_payment_line_data.csv", "name": "bill_payment_line_data", "resource_type": "seed", "alias": "bill_payment_line_data", "checksum": {"name": "sha256", "checksum": "ae8e7b58ddb78ecbcb7facd257a29f27db08cb69e4014ee40e3a07d02e7ea51a"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bill_payment_line_data`"}, "seed.quickbooks_integration_tests.payment_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "payment_line_data"], "unique_id": "seed.quickbooks_integration_tests.payment_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "payment_line_data.csv", "original_file_path": "data/payment_line_data.csv", "name": "payment_line_data", "resource_type": "seed", "alias": "payment_line_data", "checksum": {"name": "sha256", "checksum": "6e54b93beaddd05e86b071eb43833845bfc76a841b2780e3e1059f6d661cd238"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`payment_line_data`"}, "seed.quickbooks_integration_tests.vendor_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "vendor_data"], "unique_id": "seed.quickbooks_integration_tests.vendor_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "vendor_data.csv", "original_file_path": "data/vendor_data.csv", "name": "vendor_data", "resource_type": "seed", "alias": "vendor_data", "checksum": {"name": "sha256", "checksum": "98ce313c6a3acf1262de91d25905b85fe760227a534703d9c6bc0e4149b055b5"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`vendor_data`"}, "seed.quickbooks_integration_tests.address_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "address_data"], "unique_id": "seed.quickbooks_integration_tests.address_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "address_data.csv", "original_file_path": "data/address_data.csv", "name": "address_data", "resource_type": "seed", "alias": "address_data", "checksum": {"name": "sha256", "checksum": "2b7bfb3f76e41e3fee0443c10a939053b0edb31b9f4be1bcd0af8d4b686da7b0"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`address_data`"}, "seed.quickbooks_integration_tests.invoice_line_bundle_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "invoice_line_bundle_data"], "unique_id": "seed.quickbooks_integration_tests.invoice_line_bundle_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "invoice_line_bundle_data.csv", "original_file_path": "data/invoice_line_bundle_data.csv", "name": "invoice_line_bundle_data", "resource_type": "seed", "alias": "invoice_line_bundle_data", "checksum": {"name": "sha256", "checksum": "f1cdc81c2fb1ec4f76c5226e2f5e4ed6f17f7b446cb53cfa539d8caafb252a5c"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`invoice_line_bundle_data`"}, "seed.quickbooks_integration_tests.invoice_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "invoice_data"], "unique_id": "seed.quickbooks_integration_tests.invoice_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "invoice_data.csv", "original_file_path": "data/invoice_data.csv", "name": "invoice_data", "resource_type": "seed", "alias": "invoice_data", "checksum": {"name": "sha256", "checksum": "05a4273632f65bdeaff5845d43bb3fc5a68efa8985f86e054af045d810ecb652"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`invoice_data`"}, "seed.quickbooks_integration_tests.payment_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "payment_data"], "unique_id": "seed.quickbooks_integration_tests.payment_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "payment_data.csv", "original_file_path": "data/payment_data.csv", "name": "payment_data", "resource_type": "seed", "alias": "payment_data", "checksum": {"name": "sha256", "checksum": "8c2df9d7db2b4668ddbd1e1e3635cbaf40c798e19be2a83f65e09988771ebb38"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`payment_data`"}, "seed.quickbooks_integration_tests.invoice_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "invoice_line_data"], "unique_id": "seed.quickbooks_integration_tests.invoice_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "invoice_line_data.csv", "original_file_path": "data/invoice_line_data.csv", "name": "invoice_line_data", "resource_type": "seed", "alias": "invoice_line_data", "checksum": {"name": "sha256", "checksum": "267f7835012af57f5d0b6dd927fb6e0ea7094d780ab551d7147e2bff48bcf063"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`invoice_line_data`"}, "seed.quickbooks_integration_tests.deposit_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "deposit_line_data"], "unique_id": "seed.quickbooks_integration_tests.deposit_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "deposit_line_data.csv", "original_file_path": "data/deposit_line_data.csv", "name": "deposit_line_data", "resource_type": "seed", "alias": "deposit_line_data", "checksum": {"name": "sha256", "checksum": "43cf2e49d2ccc28c38ba7db60582b36e46c0ec96827b475e145975fdf8bf9d4e"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"deposit_account_id": "int64", "deposit_class_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"deposit_account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "deposit_class_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`deposit_line_data`"}, "seed.quickbooks_integration_tests.estimate_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "estimate_line_data"], "unique_id": "seed.quickbooks_integration_tests.estimate_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "estimate_line_data.csv", "original_file_path": "data/estimate_line_data.csv", "name": "estimate_line_data", "resource_type": "seed", "alias": "estimate_line_data", "checksum": {"name": "sha256", "checksum": "cff0f0d902a16e9ab0b877d174dd67536537fc669c16505c2efadb0721ce6c26"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`estimate_line_data`"}, "seed.quickbooks_integration_tests.purchase_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "purchase_data"], "unique_id": "seed.quickbooks_integration_tests.purchase_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "purchase_data.csv", "original_file_path": "data/purchase_data.csv", "name": "purchase_data", "resource_type": "seed", "alias": "purchase_data", "checksum": {"name": "sha256", "checksum": "4f3426746d9b8739cf9538e94b0a79fe7894be76decdf43e920716dfa200d131"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"credit": "bool", "transaction_date": "date"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"credit": "{{ 'boolean' if target.name == 'snowflake' else 'bool' }}", "transaction_date": "date"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`purchase_data`"}, "seed.quickbooks_integration_tests.refund_receipt_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "refund_receipt_line_data"], "unique_id": "seed.quickbooks_integration_tests.refund_receipt_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "refund_receipt_line_data.csv", "original_file_path": "data/refund_receipt_line_data.csv", "name": "refund_receipt_line_data", "resource_type": "seed", "alias": "refund_receipt_line_data", "checksum": {"name": "sha256", "checksum": "8a67266f87e49dda0de57a6d66b4c1a053af545a6c8d394f8df6470b98cd31c7"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`refund_receipt_line_data`"}, "seed.quickbooks_integration_tests.credit_memo_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "credit_memo_line_data"], "unique_id": "seed.quickbooks_integration_tests.credit_memo_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "credit_memo_line_data.csv", "original_file_path": "data/credit_memo_line_data.csv", "name": "credit_memo_line_data", "resource_type": "seed", "alias": "credit_memo_line_data", "checksum": {"name": "sha256", "checksum": "01898bc6786c3c48ebf5aa4170ea54257dd66e6fc38931067c9012bc639f6994"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`credit_memo_line_data`"}, "seed.quickbooks_integration_tests.bill_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bill_data"], "unique_id": "seed.quickbooks_integration_tests.bill_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bill_data.csv", "original_file_path": "data/bill_data.csv", "name": "bill_data", "resource_type": "seed", "alias": "bill_data", "checksum": {"name": "sha256", "checksum": "af6dcdb238e4819003cc182dc5f39a82a61ab19d1299752afc90d49578cfc79b"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bill_data`"}, "seed.quickbooks_integration_tests.bill_linked_txn_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bill_linked_txn_data"], "unique_id": "seed.quickbooks_integration_tests.bill_linked_txn_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bill_linked_txn_data.csv", "original_file_path": "data/bill_linked_txn_data.csv", "name": "bill_linked_txn_data", "resource_type": "seed", "alias": "bill_linked_txn_data", "checksum": {"name": "sha256", "checksum": "14f88fc0716d3c253043a68af9b026ab54a93a33784c682b6ec700671f1e03c7"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bill_linked_txn_data`"}, "seed.quickbooks_integration_tests.vendor_credit_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "vendor_credit_data"], "unique_id": "seed.quickbooks_integration_tests.vendor_credit_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "vendor_credit_data.csv", "original_file_path": "data/vendor_credit_data.csv", "name": "vendor_credit_data", "resource_type": "seed", "alias": "vendor_credit_data", "checksum": {"name": "sha256", "checksum": "ccc4a1ca3967e3eb7f61d2831242f07b1e5a77006dd4312a17fd36e7ea008bea"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`vendor_credit_data`"}, "seed.quickbooks_integration_tests.customer_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "customer_data"], "unique_id": "seed.quickbooks_integration_tests.customer_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "customer_data.csv", "original_file_path": "data/customer_data.csv", "name": "customer_data", "resource_type": "seed", "alias": "customer_data", "checksum": {"name": "sha256", "checksum": "2b72eabf58923823033e461d1960295c156b31bf5ace046fc388c336fd96a29d"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`customer_data`"}, "seed.quickbooks_integration_tests.estimate_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "estimate_data"], "unique_id": "seed.quickbooks_integration_tests.estimate_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "estimate_data.csv", "original_file_path": "data/estimate_data.csv", "name": "estimate_data", "resource_type": "seed", "alias": "estimate_data", "checksum": {"name": "sha256", "checksum": "06ca472200a91b5758a0e9530e6c810a09e466cbf1aa7fbac215fee8a9f4d737"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`estimate_data`"}, "seed.quickbooks_integration_tests.purchase_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "purchase_line_data"], "unique_id": "seed.quickbooks_integration_tests.purchase_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "purchase_line_data.csv", "original_file_path": "data/purchase_line_data.csv", "name": "purchase_line_data", "resource_type": "seed", "alias": "purchase_line_data", "checksum": {"name": "sha256", "checksum": "33355dd453e68ac5a5afa2f71e3c515dc414cdd55a489c65d2c2c4fa06fd18e7"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"item_expense_billable_status": "string", "account_expense_account_id": "int64"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"item_expense_billable_status": "{{ 'varchar(100)' if target.name == 'redshift' else 'string' }}", "account_expense_account_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`purchase_line_data`"}, "seed.quickbooks_integration_tests.journal_entry_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "journal_entry_line_data"], "unique_id": "seed.quickbooks_integration_tests.journal_entry_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "journal_entry_line_data.csv", "original_file_path": "data/journal_entry_line_data.csv", "name": "journal_entry_line_data", "resource_type": "seed", "alias": "journal_entry_line_data", "checksum": {"name": "sha256", "checksum": "59b0d0bb8c94848adeb20f00a359895ff4db8e86281e4b43648a52c0c2b36dce"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`journal_entry_line_data`"}, "seed.quickbooks_integration_tests.journal_entry_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "journal_entry_data"], "unique_id": "seed.quickbooks_integration_tests.journal_entry_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "journal_entry_data.csv", "original_file_path": "data/journal_entry_data.csv", "name": "journal_entry_data", "resource_type": "seed", "alias": "journal_entry_data", "checksum": {"name": "sha256", "checksum": "6f717632a6fe0901786fbdfed63db69af1c928331ed9cb83f9fd389fe2b9ab83"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`journal_entry_data`"}, "seed.quickbooks_integration_tests.bill_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bill_line_data"], "unique_id": "seed.quickbooks_integration_tests.bill_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bill_line_data.csv", "original_file_path": "data/bill_line_data.csv", "name": "bill_line_data", "resource_type": "seed", "alias": "bill_line_data", "checksum": {"name": "sha256", "checksum": "df882ab43a0bd79aed13e13dee1934269989ae1bea9d3672ed7cc9840c14d073"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"item_expense_billable_status": "string", "account_expense_billable_status": "string"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"item_expense_billable_status": "{{ 'varchar(100)' if target.name == 'redshift' else 'string' }}", "account_expense_billable_status": "{{ 'varchar(100)' if target.name == 'redshift' else 'string' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bill_line_data`"}, "seed.quickbooks_integration_tests.bundle_item_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "bundle_item_data"], "unique_id": "seed.quickbooks_integration_tests.bundle_item_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "bundle_item_data.csv", "original_file_path": "data/bundle_item_data.csv", "name": "bundle_item_data", "resource_type": "seed", "alias": "bundle_item_data", "checksum": {"name": "sha256", "checksum": "69218d4dc89cf8da55d1a5aab12bbe45129b48377fa7615f0030616d8c34fe9d"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`bundle_item_data`"}, "seed.quickbooks_integration_tests.invoice_linked_txn_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "invoice_linked_txn_data"], "unique_id": "seed.quickbooks_integration_tests.invoice_linked_txn_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "invoice_linked_txn_data.csv", "original_file_path": "data/invoice_linked_txn_data.csv", "name": "invoice_linked_txn_data", "resource_type": "seed", "alias": "invoice_linked_txn_data", "checksum": {"name": "sha256", "checksum": "88dda316adf9a5921231dbe5bd5d0c425391ccf9b72a7d6c937155d67b3b45ba"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`invoice_linked_txn_data`"}, "seed.quickbooks_integration_tests.account_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "account_data"], "unique_id": "seed.quickbooks_integration_tests.account_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "account_data.csv", "original_file_path": "data/account_data.csv", "name": "account_data", "resource_type": "seed", "alias": "account_data", "checksum": {"name": "sha256", "checksum": "82ea90640018b00ad075d5bc1f78bdf38e05b0359fda1b40f4dd249efe1d85d9"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`account_data`"}, "seed.quickbooks_integration_tests.purchase_order_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "purchase_order_line_data"], "unique_id": "seed.quickbooks_integration_tests.purchase_order_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "purchase_order_line_data.csv", "original_file_path": "data/purchase_order_line_data.csv", "name": "purchase_order_line_data", "resource_type": "seed", "alias": "purchase_order_line_data", "checksum": {"name": "sha256", "checksum": "39d5f88917f7d5d8ec70465d8569a38bd19d72bfb26bc495f3231b3e6599c945"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`purchase_order_line_data`"}, "seed.quickbooks_integration_tests.transfer_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "transfer_data"], "unique_id": "seed.quickbooks_integration_tests.transfer_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "transfer_data.csv", "original_file_path": "data/transfer_data.csv", "name": "transfer_data", "resource_type": "seed", "alias": "transfer_data", "checksum": {"name": "sha256", "checksum": "8301e8b1cbaa430f338d9b589570efb442969ab67a24a92e615b08e3440431ce"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`transfer_data`"}, "seed.quickbooks_integration_tests.purchase_order_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "purchase_order_data"], "unique_id": "seed.quickbooks_integration_tests.purchase_order_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "purchase_order_data.csv", "original_file_path": "data/purchase_order_data.csv", "name": "purchase_order_data", "resource_type": "seed", "alias": "purchase_order_data", "checksum": {"name": "sha256", "checksum": "41146f57f7697001a690027ea7182ef76dd5d591bb5dce7438edefb3e5fd0101"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`purchase_order_data`"}, "seed.quickbooks_integration_tests.sales_receipt_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "sales_receipt_line_data"], "unique_id": "seed.quickbooks_integration_tests.sales_receipt_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "sales_receipt_line_data.csv", "original_file_path": "data/sales_receipt_line_data.csv", "name": "sales_receipt_line_data", "resource_type": "seed", "alias": "sales_receipt_line_data", "checksum": {"name": "sha256", "checksum": "19895ca1cfb2ebe0a4e8ef0e5c5ef9c0dbb505053cc4b98bb06de8bd3ead523f"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`sales_receipt_line_data`"}, "seed.quickbooks_integration_tests.vendor_credit_line_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "vendor_credit_line_data"], "unique_id": "seed.quickbooks_integration_tests.vendor_credit_line_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "vendor_credit_line_data.csv", "original_file_path": "data/vendor_credit_line_data.csv", "name": "vendor_credit_line_data", "resource_type": "seed", "alias": "vendor_credit_line_data", "checksum": {"name": "sha256", "checksum": "8c60276eb72f29fcd60b6aff2615648b71ce47e0b738331b54f86c988a979737"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"item_expense_billable_status": "string", "account_expense_billable_status": "string"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"item_expense_billable_status": "{{ 'varchar(100)' if target.name == 'redshift' else 'string' }}", "account_expense_billable_status": "{{ 'varchar(100)' if target.name == 'redshift' else 'string' }}"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`vendor_credit_line_data`"}, "seed.quickbooks_integration_tests.credit_memo_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "credit_memo_data"], "unique_id": "seed.quickbooks_integration_tests.credit_memo_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "credit_memo_data.csv", "original_file_path": "data/credit_memo_data.csv", "name": "credit_memo_data", "resource_type": "seed", "alias": "credit_memo_data", "checksum": {"name": "sha256", "checksum": "3cef678ada5ab1119a096e5f6bea67c6680466ff2a21807512f1a4dba83b6139"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`credit_memo_data`"}, "seed.quickbooks_integration_tests.department_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "department_data"], "unique_id": "seed.quickbooks_integration_tests.department_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "department_data.csv", "original_file_path": "data/department_data.csv", "name": "department_data", "resource_type": "seed", "alias": "department_data", "checksum": {"name": "sha256", "checksum": "079a79543e6cfcdac83eeeeb9672451756cc6c48e7d4c572d9f761b9314b18d4"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`department_data`"}, "seed.quickbooks_integration_tests.item_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "item_data"], "unique_id": "seed.quickbooks_integration_tests.item_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "item_data.csv", "original_file_path": "data/item_data.csv", "name": "item_data", "resource_type": "seed", "alias": "item_data", "checksum": {"name": "sha256", "checksum": "8057771cc5c837c6193ad423e6a52f7058f6001550eaa0c15098857415aee7d4"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`item_data`"}, "seed.quickbooks_integration_tests.sales_receipt_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "sales_receipt_data"], "unique_id": "seed.quickbooks_integration_tests.sales_receipt_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "sales_receipt_data.csv", "original_file_path": "data/sales_receipt_data.csv", "name": "sales_receipt_data", "resource_type": "seed", "alias": "sales_receipt_data", "checksum": {"name": "sha256", "checksum": "2ac15faf0cdff7d71155fc20bb86e69d0a67d25f2172f220dbe850d45738230b"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"transaction_date": "date"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"transaction_date": "date"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`sales_receipt_data`"}, "seed.quickbooks_integration_tests.deposit_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "deposit_data"], "unique_id": "seed.quickbooks_integration_tests.deposit_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "deposit_data.csv", "original_file_path": "data/deposit_data.csv", "name": "deposit_data", "resource_type": "seed", "alias": "deposit_data", "checksum": {"name": "sha256", "checksum": "e0e4299672423dbdf3d63d050ecd34c29580b5a368b64307053a635e7dd9286e"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`deposit_data`"}, "seed.quickbooks_integration_tests.refund_receipt_data": {"raw_sql": "", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks_integration_tests", "refund_receipt_data"], "unique_id": "seed.quickbooks_integration_tests.refund_receipt_data", "package_name": "quickbooks_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests", "path": "refund_receipt_data.csv", "original_file_path": "data/refund_receipt_data.csv", "name": "refund_receipt_data", "resource_type": "seed", "alias": "refund_receipt_data", "checksum": {"name": "sha256", "checksum": "0bfb44ee366239221dfee9e985b0c66d5a7cbc6d0bb8c18cf02acba7616c135d"}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {"transaction_date": "date"}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": false, "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "account_data": null, "address_data": null, "bill_linked_txn_data": null, "bill_payment_line_data": null, "bill_payment_data": null, "bill_data": null, "bundle_item_data": null, "bundle_data": null, "credit_memo_data": null, "credit_memo_line_data": null, "customer_data": null, "department_data": null, "deposit_data": null, "estimate_data": null, "estimate_line_data": null, "incoice_data": null, "invoice_line_data": null, "invoice_line_bundle_data": null, "invoice_linked_txn_data": null, "item_data": null, "journal_entry_line_data": null, "journal_entry_data": null, "payment_data": null, "payment_line_data": null, "refund_receipt_line_data": null, "sales_receipt_line_data": null, "transfer_data": null, "vendor_credit_data": null, "column_types": {"transaction_date": "date"}}, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`refund_receipt_data`"}, "model.quickbooks.quickbooks__balance_sheet": {"raw_sql": "with general_ledger_by_period as (\n    select *\n    from {{ref('quickbooks__general_ledger_by_period')}}\n    where financial_statement_helper = 'balance_sheet'\n\n), final as (\n    select\n        {% if target.type in ('bigquery') %}\n            cast(format_date(\"%Y\", date_year) as {{ dbt_utils.type_string() }}) as calendar_year,\n            cast(format_date(\"%b\", period_last_day) as calendar_month,\n\n        {% else %}\n            cast(date_part(y, date_year) as {{ dbt_utils.type_string() }}) as calendar_year,\n            cast(date_part(mon, period_last_day) as {{ dbt_utils.type_string() }}) as calendar_month,\n\n        {% endif %} \n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_name,\n        period_ending_balance as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__balance_sheet"], "unique_id": "model.quickbooks.quickbooks__balance_sheet", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__balance_sheet.sql", "original_file_path": "models/quickbooks__balance_sheet.sql", "name": "quickbooks__balance_sheet", "resource_type": "model", "alias": "quickbooks__balance_sheet", "checksum": {"name": "sha256", "checksum": "902666d339d1e408923af0a0f1b2350ca7f21ede7546df8366d185226eba073e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger_by_period"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.quickbooks.quickbooks__general_ledger_by_period"]}, "description": "Table containing all asset, liability, and equity account classes by calendar year and month enriched with account type, class, and parent information.\n", "columns": {"calendar_year": {"name": "calendar_year", "description": "The calendar year in the YYYY format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_month": {"name": "calendar_month", "description": "The calendar month in the MMM format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_class": {"name": "account_class", "description": "The account classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Boolean indicating whether the account is a sub account (true) or a parent account (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_number": {"name": "parent_account_number", "description": "The parent account number. If the account is the parent account then the account number is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_name": {"name": "parent_account_name", "description": "The parent account name. If the account is the parent account then the account name is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "The type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "Sub type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User defined number of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total ending period balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__balance_sheet.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_by_period as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger_by_period`\n    where financial_statement_helper = 'balance_sheet'\n\n), final as (\n    select\n        \n            cast(format_date(\"%Y\", date_year) as \n    string\n) as calendar_year,\n            cast(format_date(\"%b\", period_last_day) as calendar_month,\n\n         \n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_name,\n        period_ending_balance as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__balance_sheet`"}, "model.quickbooks.quickbooks__general_ledger_by_period": {"raw_sql": "with general_ledger_balances as (\n    select *\n    from {{ref('int_quickbooks__general_ledger_balances')}}\n),\n\nretained_earnings as (\n    select *\n    from {{ref('int_quickbooks__retained_earnings')}}\n),\n\nfinal as (\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__general_ledger_by_period"], "unique_id": "model.quickbooks.quickbooks__general_ledger_by_period", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__general_ledger_by_period.sql", "original_file_path": "models/quickbooks__general_ledger_by_period.sql", "name": "quickbooks__general_ledger_by_period", "resource_type": "model", "alias": "quickbooks__general_ledger_by_period", "checksum": {"name": "sha256", "checksum": "b26762ec110b5fe215c80939a156f6d9c08e2487d76a827f335aaba6b36f66c0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__general_ledger_balances"], ["int_quickbooks__retained_earnings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks.int_quickbooks__general_ledger_balances", "model.quickbooks.int_quickbooks__retained_earnings"]}, "description": "Table that pulls general ledger account level balances per period from int_quickbooks__general_ledger_balances while also creating an offsetting Retained Earnings entry for Revenue - Expenses per year to be added as single Equity line balance per year.\n", "columns": {"account_id": {"name": "account_id", "description": "Reference to the account that the period balances are associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The user defined account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account associated with the period balances.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Boolean indicating whether the account is a sub account (true) or a parent account (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_number": {"name": "parent_account_number", "description": "The parent account number. If the account is the parent account then the account number is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_name": {"name": "parent_account_name", "description": "The parent account name. If the account is the parent account then the account name is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "Type of account associated with the period balances.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "Sub type of the account associated with the period balances.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_class": {"name": "account_class", "description": "Class of the account associated with the period balances.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_statement_helper": {"name": "financial_statement_helper", "description": "Helper field identifying whether the account impacts the balances sheet or income statement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_year": {"name": "date_year", "description": "Timestamp of the year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_first_day": {"name": "period_first_day", "description": "Timestamp of the first date of the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_last_day": {"name": "period_last_day", "description": "Timestamp of the last date of the month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_net_change": {"name": "period_net_change", "description": "Account balance difference from the beginning and ending of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_beginning_balance": {"name": "period_beginning_balance", "description": "Balance of the account as of the first date of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_ending_balance": {"name": "period_ending_balance", "description": "Sum of all transaction line adjusted_balances of the account for the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__general_ledger_by_period.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_balances as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__general_ledger_balances`\n),\n\nretained_earnings as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__retained_earnings`\n),\n\nfinal as (\n    select *\n    from general_ledger_balances\n\n    union all \n\n    select *\n    from retained_earnings\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger_by_period`"}, "model.quickbooks.quickbooks__general_ledger": {"raw_sql": "with gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source\n    from {{ref('int_quickbooks__purchase_double_entry')}}\n\n    {% if var('using_sales_receipt', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__sales_receipt_double_entry')}}\n    {% endif %}\n\n    {% if var('using_bill', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_payment_double_entry')}}\n\n    union all\n\n    select *\n    from {{ref('int_quickbooks__bill_double_entry')}}\n    {% endif %}\n\n    {% if var('using_credit_memo', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__credit_memo_double_entry')}}\n    {% endif %}\n\n    {% if var('using_deposit', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__deposit_double_entry')}}\n    {% endif %}\n\n    {% if var('using_invoice', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__invoice_double_entry')}}\n    {% endif %}\n\n    {% if var('using_transfer', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__transfer_double_entry')}}\n    {% endif %}\n\n    {% if var('using_journal_entry', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__journal_entry_double_entry')}}\n    {% endif %}\n\n    {% if var('using_payment', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__payment_double_entry')}}\n    {% endif %}\n\n    {% if var('using_refund_receipt', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__refund_receipt_double_entry')}}\n    {% endif %}\n\n    {% if var('using_vendor_credit', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__vendor_credit_double_entry')}}\n    {% endif %}\n),\n\naccounts as (\n    select *\n    from {{ref('int_quickbooks__account_classifications')}}\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        cast(gl_union.amount as decimal) as amount,\n        gl_union.account_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then cast(gl_union.amount as decimal)\n            else cast(gl_union.amount as decimal) * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n),\n\nfinal as (\n    select\n        *,\n        round(cast(sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as decimal),2) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__general_ledger"], "unique_id": "model.quickbooks.quickbooks__general_ledger", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__general_ledger.sql", "original_file_path": "models/quickbooks__general_ledger.sql", "name": "quickbooks__general_ledger", "resource_type": "model", "alias": "quickbooks__general_ledger", "checksum": {"name": "sha256", "checksum": "eddb30ce0cd01c6314cb7938d973fdbd3fa5ff23da3a1fd485f5b3d5b6f31e47"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__purchase_double_entry"], ["int_quickbooks__sales_receipt_double_entry"], ["int_quickbooks__bill_payment_double_entry"], ["int_quickbooks__bill_double_entry"], ["int_quickbooks__credit_memo_double_entry"], ["int_quickbooks__deposit_double_entry"], ["int_quickbooks__invoice_double_entry"], ["int_quickbooks__transfer_double_entry"], ["int_quickbooks__journal_entry_double_entry"], ["int_quickbooks__payment_double_entry"], ["int_quickbooks__refund_receipt_double_entry"], ["int_quickbooks__vendor_credit_double_entry"], ["int_quickbooks__account_classifications"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__bill_payment_double_entry", "model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__deposit_double_entry", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__transfer_double_entry", "model.quickbooks.int_quickbooks__journal_entry_double_entry", "model.quickbooks.int_quickbooks__payment_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "model.quickbooks.int_quickbooks__account_classifications"]}, "description": "Table that unions all records from each model within the double_entry_transactions directory. The table end result is a comprehensive general ledger with an offsetting debit and credit entry for each transaction.\n", "columns": {"transaction_id": {"name": "transaction_id", "description": "Unique identifier of transaction. Each transaction will have an offsetting debit and credit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_index": {"name": "transaction_index", "description": "Unique identifier of the individual debit and credit records of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date that the transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "The user defined account number associated with the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Boolean indicating whether the account is a sub account (true) or a parent account (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_number": {"name": "parent_account_number", "description": "The parent account number. If the account is the parent account then the account number is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_name": {"name": "parent_account_name", "description": "The parent account name. If the account is the parent account then the account name is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "Type of the account associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "Account sub type of the account associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "financial_statement_helper": {"name": "financial_statement_helper", "description": "Either 'balance sheet' or 'income statement' and is used to determine that financial statement the account impacts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_current_balance": {"name": "account_current_balance", "description": "Total current balance of the account associated with the transaction line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_class": {"name": "account_class", "description": "Class of the account associated with the transaction line. Will be one of 'Expense', 'Revenue', 'Asset', 'Liability', and 'Equity'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Identifier of whether the transaction is a debit or credit entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_source": {"name": "transaction_source", "description": "Field signifying the source of transaction (eg. Bill, Invoice, Deposit, Journal Entry, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_transaction_type": {"name": "account_transaction_type", "description": "Identifier of whether the account is increased by either a debit or credit entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjusted_amount": {"name": "adjusted_amount", "description": "The amount that impacts the account. If the transaction_type = account_transaction_type then the impact will increase, otherwise it will decrease the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "running_balance": {"name": "running_balance", "description": "The running balance of the account by each individual day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__general_ledger.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with gl_union as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        transaction_type,\n        transaction_source\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__purchase_double_entry`\n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_receipt_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_payment_double_entry`\n\n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__credit_memo_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__deposit_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__transfer_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__journal_entry_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__payment_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__refund_receipt_double_entry`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__vendor_credit_double_entry`\n    \n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__account_classifications`\n),\n\n\nadjusted_gl as (\n    select\n        gl_union.transaction_id,\n        row_number() over(partition by gl_union.transaction_id order by gl_union.transaction_date) as transaction_index,\n        gl_union.transaction_date,\n        cast(gl_union.amount as decimal) as amount,\n        gl_union.account_id,\n        accounts.account_number,\n        accounts.name as account_name,\n        accounts.is_sub_account,\n        accounts.parent_account_number,\n        accounts.parent_account_name,\n        accounts.account_type,\n        accounts.account_sub_type,\n        accounts.financial_statement_helper,\n        accounts.balance as account_current_balance,\n        accounts.classification as account_class, \n        gl_union.transaction_type,\n        gl_union.transaction_source,\n        accounts.transaction_type as account_transaction_type,\n        case when accounts.transaction_type = gl_union.transaction_type\n            then cast(gl_union.amount as decimal)\n            else cast(gl_union.amount as decimal) * -1\n                end as adjusted_amount\n    from gl_union\n\n    left join accounts\n        on gl_union.account_id = accounts.account_id\n),\n\nfinal as (\n    select\n        *,\n        round(cast(sum(adjusted_amount) over (partition by account_id order by transaction_date, account_id rows unbounded preceding) as decimal),2) as running_balance\n    from adjusted_gl\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger`"}, "model.quickbooks.quickbooks__profit_and_loss": {"raw_sql": "with general_ledger_by_period as (\n    select *\n    from {{ref('quickbooks__general_ledger_by_period')}}\n    where financial_statement_helper = 'income_statement'\n\n), final as (\n    select\n        {% if target.type in ('bigquery') %}\n            cast(format_date(\"%Y\", date_year) as {{ dbt_utils.type_string() }}) as calendar_year,\n            cast(format_date(\"%b\", period_last_day) as calendar_month,\n\n        {% else %}\n            cast(date_part(y, date_year) as {{ dbt_utils.type_string() }}) as calendar_year,\n            cast(date_part(mon, period_last_day) as {{ dbt_utils.type_string() }}) as calendar_month,\n\n        {% endif %} \n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_name,\n        period_net_change as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__profit_and_loss"], "unique_id": "model.quickbooks.quickbooks__profit_and_loss", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__profit_and_loss.sql", "original_file_path": "models/quickbooks__profit_and_loss.sql", "name": "quickbooks__profit_and_loss", "resource_type": "model", "alias": "quickbooks__profit_and_loss", "checksum": {"name": "sha256", "checksum": "13457f0d92a37cdb6eff4f2672129525237aa4043c18fc8f6b8db0e5a8bc48a5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger_by_period"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.quickbooks.quickbooks__general_ledger_by_period"]}, "description": "Table containing all revenue and expense account classes by calendar year and month enriched with account type, class, and parent information.\n", "columns": {"calendar_year": {"name": "calendar_year", "description": "The calendar year in the YYYY format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "calendar_month": {"name": "calendar_month", "description": "The calendar month in the MMM format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_class": {"name": "account_class", "description": "The account classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Boolean indicating whether the account is a sub account (true) or a parent account (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_number": {"name": "parent_account_number", "description": "The parent account number. If the account is the parent account then the account number is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_name": {"name": "parent_account_name", "description": "The parent account name. If the account is the parent account then the account name is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "The type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "Sub type of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User defined number of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The total period net change for the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__profit_and_loss.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_by_period as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger_by_period`\n    where financial_statement_helper = 'income_statement'\n\n), final as (\n    select\n        \n            cast(format_date(\"%Y\", date_year) as \n    string\n) as calendar_year,\n            cast(format_date(\"%b\", period_last_day) as calendar_month,\n\n         \n        account_class,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_number,\n        account_name,\n        period_net_change as amount\n    from general_ledger_by_period\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__profit_and_loss`"}, "model.quickbooks.quickbooks__expenses_sales_enhanced": {"raw_sql": "with expenses as (\n    select *\n    from {{ ref('int_quickbooks__expenses_union') }}\n),\n\n{% if fivetran_utils.enabled_vars_one_true(['using_sales_receipt','using_invoice']) %}\nsales as (\n    select *\n    from {{ ref('int_quickbooks__sales_union') }}\n),\n{% endif %}\n\nfinal as (\n    select *\n    from expenses\n\n    {% if fivetran_utils.enabled_vars_one_true(['using_sales_receipt','using_invoice']) %}\n    union all\n\n    select *\n    from sales\n    {% endif %}\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__expenses_sales_enhanced"], "unique_id": "model.quickbooks.quickbooks__expenses_sales_enhanced", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__expenses_sales_enhanced.sql", "original_file_path": "models/quickbooks__expenses_sales_enhanced.sql", "name": "quickbooks__expenses_sales_enhanced", "resource_type": "model", "alias": "quickbooks__expenses_sales_enhanced", "checksum": {"name": "sha256", "checksum": "ec295e430096f5021926988b3170e35b58c3aaf9215828adb90747793157ba0d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__expenses_union"], ["int_quickbooks__sales_union"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars_one_true"], "nodes": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union"]}, "description": "Table that unions all expense records from int_quickbooks__expenses_union and all sales records from the int_quickbooks__sales_union while also adding  customer, vendor, and department level detail to the expense and sales records.\n", "columns": {"transaction_source": {"name": "transaction_source", "description": "Set to 'expense' if the transaction type is an expense and 'sale' if the transaction type is a sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Unique identifier of either the expense or sale transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_line_id": {"name": "transaction_line_id", "description": "Unique identifier of either the expense or sale line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "The QuickBooks document number reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "Specifies the expense or sale transaction type (ie. invoice, sales_receipt, deposit, journal entry, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Unique identifier of the item included in a sale transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_quantity": {"name": "item_quantity", "description": "Quantity of items included in the sale transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_unit_price": {"name": "item_unit_price", "description": "Unit price of the item included in the sale transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Name of the account associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "Account sub type of the account associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_name": {"name": "department_name", "description": "Name of the department associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Name of the customer associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_website": {"name": "customer_website", "description": "The website url of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_name": {"name": "vendor_name", "description": "Name of the vendor associated with either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_status": {"name": "billable_status", "description": "Status indicating whether the expense or sale is billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description given to either the expense or sale transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of either the expense or sale line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of either the expense or sale.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__expenses_sales_enhanced.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with expenses as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__expenses_union`\n),\n\n\nsales as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_union`\n),\n\n\nfinal as (\n    select *\n    from expenses\n\n    \n    union all\n\n    select *\n    from sales\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__expenses_sales_enhanced`"}, "model.quickbooks.quickbooks__ap_ar_enhanced": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith bill_join as (\n    select *\n    from {{ref('int_quickbooks__bill_join')}}\n),\n\n{% if var('using_invoice', True) %}\ninvoice_join as (\n    select *\n    from {{ref('int_quickbooks__invoice_join')}}\n),\n{% endif %}\n\n{% if var('using_department', True) %}\ndepartments as ( \n    select *\n    from {{ ref('stg_quickbooks__department') }}\n),\n{% endif %}\n\naddresses as (\n    select *\n    from {{ref('stg_quickbooks__address')}}\n),\n\ncustomers as (\n    select *\n    from {{ref('stg_quickbooks__customer')}}\n),\n\nvendors as (\n    select *\n    from {{ref('stg_quickbooks__vendor')}}\n),\n\nfinal as (\n    select\n        transaction_type,\n        transaction_id,\n        doc_number,\n        cast(null as {{ dbt_utils.type_string() }}) as estimate_id, \n        {% if var('using_department', True) %}\n        departments.fully_qualified_name as department_name,\n        {% endif %}\n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        vendors.web_url as customer_vendor_website,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        cast(null as {{ dbt_utils.type_string() }}) as delivery_type,\n        cast(null as {{ dbt_utils.type_string() }}) as estimate_status,\n        total_amount,\n        cast(null as decimal) as estimate_amount,\n        current_balance,\n        total_current_payment,\n        due_date,\n        case when bill_join.current_balance != 0 and {{ dbt_utils.datediff(\"bill_join.recent_payment_date\", \"bill_join.due_date\", 'day') }} < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and {{ dbt_utils.datediff(\"bill_join.recent_payment_date\", \"bill_join.due_date\", 'day') }} < 0\n            then {{ dbt_utils.datediff(\"bill_join.recent_payment_date\", \"bill_join.due_date\", 'day') }} * -1\n            else 0\n                end as days_overdue,\n        initial_payment_date,\n        recent_payment_date\n    from bill_join\n\n    {% if var('using_department', True) %}\n    left join departments  \n        on bill_join.department_id = departments.department_id\n    {% endif %}\n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n\n    {% if var('using_invoice', True) %}\n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        doc_number,\n        invoice_join.estimate_id,\n        {% if var('using_department', True) %}\n        departments.fully_qualified_name as department_name,\n        {% endif %}\n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        customers.website as customer_vendor_webiste,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        round(invoice_join.total_amount,2) as total_amount,\n        round(invoice_join.estimate_total_amount,2) as estimate_total_amount,\n        round(invoice_join.current_balance,2) as current_balance,\n        round(invoice_join.total_current_payment,2) as total_current_payment,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and {{ dbt_utils.datediff(\"invoice_join.recent_payment_date\", \"invoice_join.due_date\", 'day') }} < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and {{ dbt_utils.datediff(\"invoice_join.recent_payment_date\", \"invoice_join.due_date\", 'day') }} < 0\n            then {{ dbt_utils.datediff(\"invoice_join.recent_payment_date\", \"invoice_join.due_date\", 'day') }} * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date\n    from invoice_join\n\n    {% if var('using_department', True) %}\n    left join departments  \n        on invoice_join.department_id = departments.department_id\n    {% endif %}\n\n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n\n    {% endif %}\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "quickbooks__ap_ar_enhanced"], "unique_id": "model.quickbooks.quickbooks__ap_ar_enhanced", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "quickbooks__ap_ar_enhanced.sql", "original_file_path": "models/quickbooks__ap_ar_enhanced.sql", "name": "quickbooks__ap_ar_enhanced", "resource_type": "model", "alias": "quickbooks__ap_ar_enhanced", "checksum": {"name": "sha256", "checksum": "07c22c4cff963182b5714123431b7387fceea98b9ba39e215a3729d7272e4889"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__bill_join"], ["int_quickbooks__invoice_join"], ["stg_quickbooks__department"], ["stg_quickbooks__address"], ["stg_quickbooks__customer"], ["stg_quickbooks__vendor"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.datediff"], "nodes": ["model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__invoice_join", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__address", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__vendor"]}, "description": "Table that unions all accounts payable records from int_quickbooks__bill_join and all accounts receivable records from int_quickbooks__invoice_join while also adding customer, vendor, address, and department level detail to the accounts payable and receivable records. Further, date and amount calculations are included to show if the payable/receivable has been fully paid and/or paid on time.\n", "columns": {"transaction_type": {"name": "transaction_type", "description": "Set to 'bill' of the transaction is a bill and 'invoice' if the transaction is an invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_id": {"name": "transaction_id", "description": "Unique identifier of the bill or invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "The QuickBooks document number reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimate_id": {"name": "estimate_id", "description": "Unique identifier of the estimate associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_name": {"name": "department_name", "description": "Name of the department associated with either the invoice or bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_with": {"name": "transaction_with", "description": "Set to 'vendor' if the transaction type is a bill and 'customer' if the transaction type is an invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_name": {"name": "customer_vendor_name", "description": "Full name of the vendor (if a bill) or the customer (if an invoice).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_balance": {"name": "customer_vendor_balance", "description": "Total current account balance of the vendor (if a bill) or the customer (if an invoice).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_address_city": {"name": "customer_vendor_address_city", "description": "City of the vendor (if a bill) or the customer (if an invoice).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_address_country": {"name": "customer_vendor_address_country", "description": "Country of the vendor (if a bill) or the customer (if an invoice).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_address_line": {"name": "customer_vendor_address_line", "description": "Address line of the vendor (if a bill) or the customer (if an invoice).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_vendor_website": {"name": "customer_vendor_website", "description": "The website url of the customer or vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_type": {"name": "delivery_type", "description": "How the invoice was delivered to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimate_status": {"name": "estimate_status", "description": "The status of the invoice estimate (if applicable).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "The total monetary amount of the invoice or bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimate_amount": {"name": "estimate_amount", "description": "The total amount estimated of the bill or invoice (if applicable).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_balance": {"name": "current_balance", "description": "The bill or invoice defined remaining balance of the bill or invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_current_payment": {"name": "total_current_payment", "description": "Sum of all total payments made towards the bill or invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the due date for the bill or invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_overdue": {"name": "is_overdue", "description": "Boolean indicating whether the bill or invoice full payment is overdue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_overdue": {"name": "days_overdue", "description": "The recent payment minus the due date to show the total days the total payment is overdue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_payment_date": {"name": "initial_payment_date", "description": "The first date a payment was provided for the bill or invoice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recent_payment_date": {"name": "recent_payment_date", "description": "The last date a payment was provided for the bill or invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/quickbooks__ap_ar_enhanced.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith bill_join as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_join`\n),\n\n\ninvoice_join as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_join`\n),\n\n\n\ndepartments as ( \n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\naddresses as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address`\n),\n\ncustomers as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\nvendors as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nfinal as (\n    select\n        transaction_type,\n        transaction_id,\n        doc_number,\n        cast(null as \n    int64\n) as estimate_id, \n        \n        departments.fully_qualified_name as department_name,\n        \n        'vendor' as transaction_with,\n        vendors.display_name as customer_vendor_name,\n        vendors.balance as customer_vendor_balance,\n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        vendors.web_url as customer_vendor_website,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        cast(null as \n    string\n) as delivery_type,\n        cast(null as \n    string\n) as estimate_status,\n        total_amount,\n        cast(null as decimal) as estimate_amount,\n        current_balance,\n        total_current_payment,\n        due_date,\n        case when bill_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n < 0\n            then true\n            else false\n                end as is_overdue,\n        case when bill_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n < 0\n            then \n\n    datetime_diff(\n        cast(bill_join.due_date as datetime),\n        cast(bill_join.recent_payment_date as datetime),\n        day\n    )\n\n * -1\n            else 0\n                end as days_overdue,\n        initial_payment_date,\n        recent_payment_date\n    from bill_join\n\n    \n    left join departments  \n        on bill_join.department_id = departments.department_id\n    \n\n    left join vendors\n        on bill_join.vendor_id = vendors.vendor_id\n    \n    left join addresses as billing_address\n        on vendors.billing_address_id = billing_address.address_id\n\n    \n    union all\n\n    select \n        invoice_join.transaction_type,\n        invoice_join.transaction_id,\n        doc_number,\n        invoice_join.estimate_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        'customer' as transaction_with,\n        customers.fully_qualified_name as customer_vendor_name,\n        customers.balance as customer_vendor_current_balance,\n        billing_address.city as customer_vendor_address_city,\n        billing_address.country as customer_vendor_address_country,\n        customers.website as customer_vendor_webiste,\n        concat(billing_address.address_1, billing_address.address_2) as customer_vendor_address_line,\n        invoice_join.delivery_type,\n        invoice_join.estimate_status,\n        round(invoice_join.total_amount,2) as total_amount,\n        round(invoice_join.estimate_total_amount,2) as estimate_total_amount,\n        round(invoice_join.current_balance,2) as current_balance,\n        round(invoice_join.total_current_payment,2) as total_current_payment,\n        invoice_join.due_date,\n        case when invoice_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n < 0\n            then true\n            else false\n                end as is_overdue,\n        case when invoice_join.current_balance != 0 and \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n < 0\n            then \n\n    datetime_diff(\n        cast(invoice_join.due_date as datetime),\n        cast(invoice_join.recent_payment_date as datetime),\n        day\n    )\n\n * -1\n            else 0\n                end as days_overdue,\n        invoice_join.initial_payment_date,\n        invoice_join.recent_payment_date\n    from invoice_join\n\n    \n    left join departments  \n        on invoice_join.department_id = departments.department_id\n    \n\n    left join addresses as billing_address\n        on invoice_join.billing_address_id = billing_address.address_id\n\n    left join customers\n        on invoice_join.customer_id = customers.customer_id\n\n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__ap_ar_enhanced`"}, "model.quickbooks.int_quickbooks__transfer_double_entry": {"raw_sql": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_transfer', True)) }}\n\nwith transfers as (\n    select *\n    from {{ref('stg_quickbooks__transfer')}}\n),\n\ntransfer_body as (\n    select\n        transfer_id as transaction_id,\n        transaction_date,\n        amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__transfer_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__transfer_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__transfer_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__transfer_double_entry.sql", "name": "int_quickbooks__transfer_double_entry", "resource_type": "model", "alias": "int_quickbooks__transfer_double_entry", "checksum": {"name": "sha256", "checksum": "2452eb00de8ed6faecb32a28e2237ca85a3080017c41049ab7f609050f1a6309"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__transfer"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer"]}, "description": "Table that creates a debit record to the receiving account and a credit record to the sending account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__transfer_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to the receiveing account and a credit record to the sending account.\n*/\n\n--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith transfers as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer`\n),\n\ntransfer_body as (\n    select\n        transfer_id as transaction_id,\n        transaction_date,\n        amount,\n        from_account_id as credit_to_account_id,\n        to_account_id as debit_to_account_id\n    from transfers\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'transfer' as transaction_source\n    from transfer_body\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__transfer_double_entry`"}, "model.quickbooks.int_quickbooks__credit_memo_double_entry": {"raw_sql": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith credit_memos as (\n    select *\n    from {{ref('stg_quickbooks__credit_memo')}}\n),\n\ncredit_memo_lines as (\n    select *\n    from {{ref('stg_quickbooks__credit_memo_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\ndf_accounts as (\n    select\n        max(account_id) as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id\n                \n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__credit_memo_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__credit_memo_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__credit_memo_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__credit_memo_double_entry.sql", "name": "int_quickbooks__credit_memo_double_entry", "resource_type": "model", "alias": "int_quickbooks__credit_memo_double_entry", "checksum": {"name": "sha256", "checksum": "ee10deeb2103ab8adef4a6eb93a745da2f77354d85ab4766cc5057900f410bcc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__credit_memo"], ["stg_quickbooks__credit_memo_line"], ["stg_quickbooks__item"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo", "model.quickbooks_source.stg_quickbooks__credit_memo_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__credit_memo_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to Discounts Refunds Given and a credit record to the specified income account.\n*/\n\n--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo`\n),\n\ncredit_memo_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\ndf_accounts as (\n    select\n        max(account_id) as account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\ncredit_memo_join as (\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memos.transaction_date,\n        credit_memo_lines.amount,\n        coalesce(credit_memo_lines.sales_item_account_id, items.income_account_id, items.expense_account_id) as account_id\n                \n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n\n    left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n\n    where coalesce(credit_memo_lines.discount_account_id, credit_memo_lines.sales_item_account_id, credit_memo_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        account_id,\n        'credit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount * -1 as amount,\n        df_accounts.account_id,\n        'debit' as transaction_type,\n        'credit_memo' as transaction_source\n    from credit_memo_join\n\n    cross join df_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__credit_memo_double_entry`"}, "model.quickbooks.int_quickbooks__refund_receipt_double_entry": {"raw_sql": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith refund_receipts as (\n    select *\n    from {{ref('stg_quickbooks__refund_receipt')}}\n),\n\nrefund_receipt_lines as (\n    select *\n    from {{ref('stg_quickbooks__refund_receipt_line')}}\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nrefund_receipt_join as (\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_account_id as account_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__refund_receipt_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__refund_receipt_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__refund_receipt_double_entry.sql", "name": "int_quickbooks__refund_receipt_double_entry", "resource_type": "model", "alias": "int_quickbooks__refund_receipt_double_entry", "checksum": {"name": "sha256", "checksum": "417e45de39f0b91710e19fa27d86ceccdb71b36a7b73b44ec2ab2f0cbf028cce"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__refund_receipt"], ["stg_quickbooks__refund_receipt_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt", "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to the specified asset account and a credit record the specified cash account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__refund_receipt_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to the specified asset account and a credit record the specified cash account.\n*/\n\n--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n),\n\nrefund_receipt_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nrefund_receipt_join as (\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.amount,\n        refund_receipts.deposit_to_account_id as credit_to_account_id,\n        coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as debit_account_id\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n\n    where coalesce(refund_receipt_lines.discount_account_id, refund_receipt_lines.sales_item_account_id, refund_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_account_id as account_id,\n        'debit' as transaction_type,\n        'refund_receipt' as transaction_source\n    from refund_receipt_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__refund_receipt_double_entry`"}, "model.quickbooks.int_quickbooks__journal_entry_double_entry": {"raw_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith journal_entries as (\n    select *\n    from {{ref('stg_quickbooks__journal_entry')}}\n),\n\njournal_entry_lines as (\n    select *\n    from {{ref('stg_quickbooks__journal_entry_line')}}\n),\n\nfinal as (\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.transaction_date,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__journal_entry_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__journal_entry_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__journal_entry_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__journal_entry_double_entry.sql", "name": "int_quickbooks__journal_entry_double_entry", "resource_type": "model", "alias": "int_quickbooks__journal_entry_double_entry", "checksum": {"name": "sha256", "checksum": "8f55b5a20f45ff74f089de349a9e443883df26b04c9b3c0f5be1e166248d09f7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__journal_entry"], ["stg_quickbooks__journal_entry_line"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry", "model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "description": "Table that provides the debit and credit records of a journal entry transaction.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__journal_entry_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that provides the debit and credit records of a journal entry transaction.\n*/\n\n--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry`\n),\n\njournal_entry_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n),\n\nfinal as (\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entries.transaction_date,\n        journal_entry_lines.amount,\n        journal_entry_lines.account_id,\n        lower(journal_entry_lines.posting_type) as transaction_type,\n        'journal_entry' as transaction_source\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n\n    where journal_entry_lines.amount is not null\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__journal_entry_double_entry`"}, "model.quickbooks.int_quickbooks__bill_payment_double_entry": {"raw_sql": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith bill_payments as (\n    select *\n    from {{ ref('stg_quickbooks__bill_payment') }}\n),\n\nbill_payment_lines as (\n    select *\n    from {{ ref('stg_quickbooks__bill_payment_line') }}\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nap_accounts as (\n    select\n        account_id\n    from accounts\n    \n    where account_type = 'Accounts Payable'\n),\n\nbill_payment_join as (\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n    from bill_payments\n\n    cross join ap_accounts\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__bill_payment_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__bill_payment_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__bill_payment_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__bill_payment_double_entry.sql", "name": "int_quickbooks__bill_payment_double_entry", "resource_type": "model", "alias": "int_quickbooks__bill_payment_double_entry", "checksum": {"name": "sha256", "checksum": "83f47594f7d2ef7340f0fe91a45e7ba4257df1c36c2fd2548715935883b39096"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_payment"], ["stg_quickbooks__bill_payment_line"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment", "model.quickbooks_source.stg_quickbooks__bill_payment_line", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to accounts payable and a credit record to the specified cash account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__bill_payment_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to accounts payable and a credit record to the specified cash account.\n*/\n\n--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith bill_payments as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment`\n),\n\nbill_payment_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nap_accounts as (\n    select\n        account_id\n    from accounts\n    \n    where account_type = 'Accounts Payable'\n),\n\nbill_payment_join as (\n    select\n        bill_payments.bill_payment_id as transaction_id,\n        bill_payments.transaction_date,\n        bill_payments.total_amount as amount,\n        coalesce(bill_payments.credit_card_account_id,bill_payments.check_bank_account_id) as payment_account_id,\n        ap_accounts.account_id\n    from bill_payments\n\n    cross join ap_accounts\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payment_account_id as account_id,\n        'credit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        'debit' as transaction_type,\n        'bill payment' as transaction_source\n    from bill_payment_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_payment_double_entry`"}, "model.quickbooks.int_quickbooks__deposit_double_entry": {"raw_sql": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a \nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith deposits as (\n    select *\n    from {{ref('stg_quickbooks__deposit')}}\n), \n\ndeposit_lines as (\n    select *\n    from {{ref('stg_quickbooks__deposit_line')}}\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nuf_accounts as (\n    select\n        account_id\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n),\n\ndeposit_join as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n    \n    cross join uf_accounts\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__deposit_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__deposit_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__deposit_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__deposit_double_entry.sql", "name": "int_quickbooks__deposit_double_entry", "resource_type": "model", "alias": "int_quickbooks__deposit_double_entry", "checksum": {"name": "sha256", "checksum": "049ff2862f742f8800f4f27cc37c44d7e3fb0998ad2069491a838d45ecf9145c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__deposit"], ["stg_quickbooks__deposit_line"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit", "model.quickbooks_source.stg_quickbooks__deposit_line", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to the specified cash account and a credit record to either undeposited funds or a specific other account indicated in the deposit line.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__deposit_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to the specified cash account and a credit record to either undeposited funds or a \nspecific other account indicated in the deposit line.\n*/\n\n--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit`\n), \n\ndeposit_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line`\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nuf_accounts as (\n    select\n        account_id\n    from accounts\n\n    where account_sub_type = 'UndepositedFunds'\n),\n\ndeposit_join as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposits.transaction_date,\n        deposit_lines.amount,\n        deposits.account_id as deposit_to_acct_id,\n        coalesce(deposit_lines.deposit_account_id, uf_accounts.account_id) as deposit_from_acct_id\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n    \n    cross join uf_accounts\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_to_acct_id as account_id,\n        'debit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_from_acct_id as account_id,\n        'credit' as transaction_type,\n        'deposit' as transaction_source\n    from deposit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__deposit_double_entry`"}, "model.quickbooks.int_quickbooks__purchase_double_entry": {"raw_sql": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n    select *\n    from {{ref('stg_quickbooks__purchase')}}\n),\n\npurchase_lines as (\n    select *\n    from {{ref('stg_quickbooks__purchase_line')}}\n),\n\nitems as (\n    select \n        item.*, \n        parent.expense_account_id as parent_expense_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\npurchase_join as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type\n    from purchases\n    \n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__purchase_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__purchase_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__purchase_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__purchase_double_entry.sql", "name": "int_quickbooks__purchase_double_entry", "resource_type": "model", "alias": "int_quickbooks__purchase_double_entry", "checksum": {"name": "sha256", "checksum": "3a3f69bf8b56d0f62e0bc558e1ad844024508ee57c3a5e3e42bb6565bbeaabc6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase"], ["stg_quickbooks__purchase_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase", "model.quickbooks_source.stg_quickbooks__purchase_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that creates a debit record to a specified expense account and a credit record to the payment account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__purchase_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "/*\nTable that creates a debit record to a specified expense account and a credit record to the payment account.\n*/\nwith purchases as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`\n),\n\npurchase_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.expense_account_id as parent_expense_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\npurchase_join as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchases.transaction_date,\n        purchase_lines.amount,\n        coalesce(purchase_lines.account_expense_account_id, items.parent_expense_account_id, items.expense_account_id) as payed_to_account_id,\n        purchases.account_id as payed_from_account_id,\n        case when coalesce(purchases.credit, false) = true then 'debit' else 'credit' end as payed_from_transaction_type,\n        case when coalesce(purchases.credit, false) = true then 'credit' else 'debit' end as payed_to_transaction_type\n    from purchases\n    \n    inner join purchase_lines\n        on purchases.purchase_id = purchase_lines.purchase_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_from_account_id as account_id,\n        payed_from_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        payed_to_transaction_type as transaction_type,\n        'purchase' as transaction_source\n    from purchase_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__purchase_double_entry`"}, "model.quickbooks.int_quickbooks__sales_receipt_double_entry": {"raw_sql": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith sales_receipts as (\n    select *\n    from {{ref('stg_quickbooks__sales_receipt')}}\n),\n\nsales_receipt_lines as (\n    select *\n    from {{ref('stg_quickbooks__sales_receipt_line')}}\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__sales_receipt_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__sales_receipt_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__sales_receipt_double_entry.sql", "name": "int_quickbooks__sales_receipt_double_entry", "resource_type": "model", "alias": "int_quickbooks__sales_receipt_double_entry", "checksum": {"name": "sha256", "checksum": "3403afcb9da00b0a923b79ddcc1b1caa9d65997dc77ccae45b2b272e77c44ce7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__sales_receipt"], ["stg_quickbooks__sales_receipt_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt", "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to the specified cash account and a credit record to the specified asset account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__sales_receipt_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to the specified cash account and a credit record to the specified asset account.\n*/\n\n--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n),\n\nsales_receipt_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nsales_receipt_join as (\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.amount,\n        sales_receipts.deposit_to_account_id as debit_to_account_id,\n        coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, items.parent_income_account_id, items.income_account_id) as credit_to_account_id\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n\n    where coalesce(sales_receipt_lines.discount_account_id, sales_receipt_lines.sales_item_account_id, sales_receipt_lines.sales_item_item_id) is not null\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        credit_to_account_id as account_id,\n        'credit' as transaction_type,\n        'sales_receipt' as transaction_source\n    from sales_receipt_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_receipt_double_entry`"}, "model.quickbooks.int_quickbooks__vendor_credit_double_entry": {"raw_sql": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith vendor_credits as (\n    select *\n    from {{ref('stg_quickbooks__vendor_credit')}}\n),\n\nvendor_credit_lines as (\n    select *\n    from {{ref('stg_quickbooks__vendor_credit_line')}}\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__vendor_credit_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__vendor_credit_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__vendor_credit_double_entry.sql", "name": "int_quickbooks__vendor_credit_double_entry", "resource_type": "model", "alias": "int_quickbooks__vendor_credit_double_entry", "checksum": {"name": "sha256", "checksum": "2c7291a0b6458140fd531bc1f47eb103975781562bc2aa0a04f9c2ffec995dcf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__vendor_credit"], ["stg_quickbooks__vendor_credit_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit", "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that creates a debit record to payable account and a credit record to the expense account.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__vendor_credit_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to payable account and a credit record to the expense account.\n*/\n\n--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit`\n),\n\nvendor_credit_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\nvendor_credit_join as (\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credits.transaction_date,\n        vendor_credit_lines.amount,\n        vendor_credits.payable_account_id as debit_to_account_id,\n        coalesce(vendor_credit_lines.account_expense_account_id, items.parent_income_account_id, items.income_account_id, items.expense_account_id) as credit_account_id\n    from vendor_credits\n    \n    inner join vendor_credit_lines \n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        credit_account_id as account_id,\n        'credit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n\n    union all\n\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        debit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'vendor_credit' as transaction_source\n    from vendor_credit_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__vendor_credit_double_entry`"}, "model.quickbooks.int_quickbooks__bill_double_entry": {"raw_sql": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith bills as (\n    select *\n    from {{ ref('stg_quickbooks__bill') }}\n),\n\nbill_lines as (\n    select *\n    from {{ ref('stg_quickbooks__bill_line') }}\n),\n\nitems as (\n    select \n        item.*, \n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__bill_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__bill_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__bill_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__bill_double_entry.sql", "name": "int_quickbooks__bill_double_entry", "resource_type": "model", "alias": "int_quickbooks__bill_double_entry", "checksum": {"name": "sha256", "checksum": "6568889c6831a16b95cc297d8c08542b497e1629c5f9c4a70bf51cd353a3ed55"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill"], ["stg_quickbooks__bill_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__bill_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to the specified expense account and credit record to accounts payable for each bill transaction.\n*/\n\n--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill`\n),\n\nbill_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.expense_account_id as parent_expense_account_id,\n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\nbill_join as (\n    select\n        bills.bill_id as transaction_id, \n        bills.transaction_date,\n        bill_lines.amount,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id, items.parent_expense_account_id, items.expense_account_id, items.parent_income_account_id, items.income_account_id) as payed_to_account_id,\n        bills.payable_account_id\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n),\n\nfinal as (\n    select \n        transaction_id,\n        transaction_date,\n        amount,\n        payed_to_account_id as account_id,\n        'debit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        payable_account_id as account_id,\n        'credit' as transaction_type,\n        'bill' as transaction_source\n    from bill_join\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_double_entry`"}, "model.quickbooks.int_quickbooks__payment_double_entry": {"raw_sql": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_payment', True)) }}\n\nwith payments as (\n    select *\n    from {{ref('stg_quickbooks__payment')}}\n),\n\npayment_lines as (\n    select *\n    from {{ref('stg_quickbooks__payment_line')}}\n),\n\naccounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nar_accounts as (\n    select\n        account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\npayment_join as (\n    select\n        payments.payment_id as transaction_id,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id\n    from payments\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__payment_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__payment_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__payment_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__payment_double_entry.sql", "name": "int_quickbooks__payment_double_entry", "resource_type": "model", "alias": "int_quickbooks__payment_double_entry", "checksum": {"name": "sha256", "checksum": "88a5116afe33536ca2919e8d6147440bbfa7eb19421a93bcbff7dcf483cead1f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__payment"], ["stg_quickbooks__payment_line"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__payment", "model.quickbooks_source.stg_quickbooks__payment_line", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__payment_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to either undeposited funds or a specified cash account and a credit record to accounts receivable.\n*/\n\n--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith payments as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment`\n),\n\npayment_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line`\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nar_accounts as (\n    select\n        account_id\n    from accounts\n\n    where account_type = 'Accounts Receivable'\n),\n\npayment_join as (\n    select\n        payments.payment_id as transaction_id,\n        payments.transaction_date,\n        payments.total_amount as amount,\n        payments.deposit_to_account_id,\n        payments.receivable_account_id\n    from payments\n\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        deposit_to_account_id as account_id,\n        'debit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        coalesce(receivable_account_id, ar_accounts.account_id) as account_id,\n        'credit' as transaction_type,\n        'payment' as transaction_source\n    from payment_join\n    \n    cross join ar_accounts\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__payment_double_entry`"}, "model.quickbooks.int_quickbooks__invoice_double_entry": {"raw_sql": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith invoices as (\n    select *\n    from {{ref('stg_quickbooks__invoice')}}\n),\n\ninvoice_lines as (\n    select *\n    from {{ref('stg_quickbooks__invoice_line')}}\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from {{ref('stg_quickbooks__item')}} item\n\n    left join {{ref('stg_quickbooks__item')}} parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from {{ref('stg_quickbooks__account')}}\n),\n\n\n{% if var('using_invoice_bundle', True) %}\ninvoice_bundles as (\n    select *\n    from {{ref('stg_quickbooks__invoice_line_bundle')}}\n),\n\nbundles as (\n    select *\n    from {{ref('stg_quickbooks__bundle')}}\n),\n\nbundle_items as (\n    select \n        *\n    from {{ref('stg_quickbooks__bundle_item')}}\n),\n\nincome_accounts as (\n    select * \n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n    select distinct\n        income_accounts.account_id,\n        parent.income_account_id as parent_income_account_id,\n        bundle_items.bundle_id\n    from items \n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n\n    inner join income_accounts \n        on income_accounts.account_id = items.income_account_id\n\n    inner join bundle_items \n        on bundle_items.item_id = items.item_id\n),\n{% endif %}\n\nar_accounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n\n    where account_type = 'Accounts Receivable'\n),\n\ninvoice_join as (\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        {% if var('using_invoice_bundle', True) %}\n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.parent_income_account_id, bundle_income_accounts.account_id) as account_id\n\n        {% else %}\n        coalesce(invoice_lines.account_id, items.income_account_id) as account_id\n\n        {% endif %}\n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n\n    {% if var('using_invoice_bundle', True) %}\n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n\n    where coalesce(invoice_lines.account_id, invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id, invoice_lines.item_id, bundle_income_accounts.account_id) is not null         \n\n    {% else %}\n    where coalesce(invoice_lines.account_id, invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id, invoice_lines.item_id) is not null \n\n    {% endif %}\n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        ar_accounts.account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "double_entry_transactions", "int_quickbooks__invoice_double_entry"], "unique_id": "model.quickbooks.int_quickbooks__invoice_double_entry", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "double_entry_transactions/int_quickbooks__invoice_double_entry.sql", "original_file_path": "models/double_entry_transactions/int_quickbooks__invoice_double_entry.sql", "name": "int_quickbooks__invoice_double_entry", "resource_type": "model", "alias": "int_quickbooks__invoice_double_entry", "checksum": {"name": "sha256", "checksum": "22c94483e8c7d4403bf0938deaae0365d2dd6f27c3d4c01bf5f548590bfb4057"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice"], ["stg_quickbooks__invoice_line"], ["stg_quickbooks__item"], ["stg_quickbooks__item"], ["stg_quickbooks__account"], ["stg_quickbooks__invoice_line_bundle"], ["stg_quickbooks__bundle"], ["stg_quickbooks__bundle_item"], ["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "model.quickbooks_source.stg_quickbooks__bundle", "model.quickbooks_source.stg_quickbooks__bundle_item", "model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/double_entry_transactions/int_quickbooks__invoice_double_entry.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "/*\nTable that creates a debit record to accounts receivable and a credit record to a specified revenue account indicated on the invoice line.\n*/\n\n--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line`\n),\n\nitems as (\n    select \n        item.*, \n        parent.income_account_id as parent_income_account_id\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` item\n\n    left join `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item` parent\n        on item.parent_item_id = parent.item_id\n),\n\naccounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\n\n\ninvoice_bundles as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`\n),\n\nbundles as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle`\n),\n\nbundle_items as (\n    select \n        *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_item`\n),\n\nincome_accounts as (\n    select * \n    from accounts\n\n    where account_sub_type = 'SalesOfProductIncome'\n),\n\nbundle_income_accounts as (\n    select distinct\n        income_accounts.account_id,\n        parent.income_account_id as parent_income_account_id,\n        bundle_items.bundle_id\n    from items \n\n    left join items as parent\n        on items.parent_item_id = parent.item_id\n\n    inner join income_accounts \n        on income_accounts.account_id = items.income_account_id\n\n    inner join bundle_items \n        on bundle_items.item_id = items.item_id\n),\n\n\nar_accounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n\n    where account_type = 'Accounts Receivable'\n),\n\ninvoice_join as (\n    select\n        invoices.invoice_id as transaction_id,\n        invoices.transaction_date as transaction_date,\n        case when invoices.total_amount != 0\n            then invoice_lines.amount\n            else invoices.total_amount\n                end as amount,\n\n        \n        coalesce(invoice_lines.account_id, items.parent_income_account_id, items.income_account_id, bundle_income_accounts.parent_income_account_id, bundle_income_accounts.account_id) as account_id\n\n        \n\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n\n    \n    left join bundle_income_accounts\n        on bundle_income_accounts.bundle_id = invoice_lines.bundle_id\n\n    where coalesce(invoice_lines.account_id, invoice_lines.sales_item_account_id, invoice_lines.sales_item_item_id, invoice_lines.item_id, bundle_income_accounts.account_id) is not null         \n\n    \n),\n\nfinal as (\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        account_id,\n        'credit' as transaction_type,\n        'invoice' as transaction_source\n    from invoice_join\n\n    union all\n\n    select\n        transaction_id,\n        transaction_date,\n        amount,\n        ar_accounts.account_id,\n        'debit' as transaction_type,\n        'invoice' as transaction_source\n    from invoice_join\n\n    cross join ar_accounts\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_double_entry`"}, "model.quickbooks.int_quickbooks__invoice_transactions": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith invoices as (\n    select *\n    from {{ref('stg_quickbooks__invoice')}}\n),\n\ninvoice_lines as (\n    select *\n    from {{ref('stg_quickbooks__invoice_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        invoices.invoice_id as transaction_id,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as {{ dbt_utils.type_string() }}) as vendor_id,\n        cast(null as {{ dbt_utils.type_string() }}) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoices.total_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__invoice_transactions"], "unique_id": "model.quickbooks.int_quickbooks__invoice_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__invoice_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__invoice_transactions.sql", "name": "int_quickbooks__invoice_transactions", "resource_type": "model", "alias": "int_quickbooks__invoice_transactions", "checksum": {"name": "sha256", "checksum": "dadea1599d1a57be030d28ccc8c39c60c5bc883a8830f5787699d19f3775a137"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice"], ["stg_quickbooks__invoice_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__invoice_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        invoices.invoice_id as transaction_id,\n        invoice_lines.index as transaction_line_id,\n        invoices.doc_number,\n        'invoice' as transaction_type,\n        invoices.transaction_date,\n        coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) as item_id,\n        coalesce(invoice_lines.quantity, invoice_lines.sales_item_quantity) as item_quantity,\n        invoice_lines.sales_item_unit_price as item_unit_price,\n        case when invoice_lines.account_id is null\n            then coalesce(items.income_account_id, items.expense_account_id, items.asset_account_id)\n            else invoice_lines.account_id\n                end as account_id,\n        coalesce(invoice_lines.discount_class_id, invoice_lines.sales_item_class_id) as class_id,\n        invoices.department_id,\n        invoices.customer_id,\n        cast(null as \n    int64\n) as vendor_id,\n        cast(null as \n    string\n) as billable_status,\n        invoice_lines.description,\n        invoice_lines.amount,\n        invoices.total_amount\n    from invoices\n\n    inner join invoice_lines\n        on invoices.invoice_id = invoice_lines.invoice_id\n\n    left join items\n        on coalesce(invoice_lines.sales_item_item_id, invoice_lines.item_id) = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_transactions`"}, "model.quickbooks.int_quickbooks__bill_transactions": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith bills as (\n    select *\n    from {{ ref('stg_quickbooks__bill') }} \n),\n\nbill_lines as (\n    select *\n    from {{ ref('stg_quickbooks__bill_line') }}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        bills.bill_id as transaction_id,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bills.total_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__bill_transactions"], "unique_id": "model.quickbooks.int_quickbooks__bill_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__bill_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__bill_transactions.sql", "name": "int_quickbooks__bill_transactions", "resource_type": "model", "alias": "int_quickbooks__bill_transactions", "checksum": {"name": "sha256", "checksum": "ab24f6028c492c7356d5594643d513ed7801ab04b90ae1635094d028adc6b69c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill"], ["stg_quickbooks__bill_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that joins the bill and corresponding bill lines into a single bill transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__bill_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill` \n),\n\nbill_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        bills.bill_id as transaction_id,\n        bill_lines.index as transaction_line_id,\n        bills.doc_number,\n        'bill' as transaction_type,\n        bills.transaction_date,\n        coalesce(bill_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        bill_lines.account_expense_class_id as class_id,\n        bills.department_id,\n        coalesce(bill_lines.account_expense_customer_id, bill_lines.item_expense_customer_id) as customer_id,\n        bills.vendor_id,\n        coalesce(bill_lines.account_expense_billable_status, bill_lines.item_expense_billable_status) as billable_status,\n        coalesce(bill_lines.description, items.name) as description,\n        bill_lines.amount,\n        bills.total_amount\n    from bills\n\n    inner join bill_lines \n        on bills.bill_id = bill_lines.bill_id\n\n    left join items\n        on bill_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_transactions`"}, "model.quickbooks.int_quickbooks__journal_entry_transactions": {"raw_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith journal_entries as (\n    select *\n    from {{ ref('stg_quickbooks__journal_entry') }}\n),\n\njournal_entry_lines as (\n    select *\n    from {{ ref('stg_quickbooks__journal_entry_line') }}\n),\n\nfinal as (\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as {{ dbt_utils.type_string() }}) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n                end as amount,\n        journal_entries.total_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__journal_entry_transactions"], "unique_id": "model.quickbooks.int_quickbooks__journal_entry_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__journal_entry_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__journal_entry_transactions.sql", "name": "int_quickbooks__journal_entry_transactions", "resource_type": "model", "alias": "int_quickbooks__journal_entry_transactions", "checksum": {"name": "sha256", "checksum": "20331ca032ed04088b7b91d3a966569fbddd328500ef726926e0c50ff954dacf"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__journal_entry"], ["stg_quickbooks__journal_entry_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry", "model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "description": "Table that joins the journal entry and corresponding journal entry lines into a single journal entry transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__journal_entry_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith journal_entries as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry`\n),\n\njournal_entry_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n),\n\nfinal as (\n    select\n        journal_entries.journal_entry_id as transaction_id,\n        journal_entry_lines.index as transaction_line_id,\n        journal_entries.doc_number,\n        'journal_entry' as transaction_type,\n        journal_entries.transaction_date,\n        journal_entry_lines.account_id,\n        journal_entry_lines.class_id,\n        journal_entry_lines.department_id,\n        journal_entry_lines.customer_id,\n        journal_entry_lines.vendor_id,\n        cast(billable_status as \n    string\n) as billable_status,\n        journal_entry_lines.description,\n        case when lower(journal_entry_lines.posting_type) = 'credit'\n            then journal_entry_lines.amount * -1 \n            else journal_entry_lines.amount \n                end as amount,\n        journal_entries.total_amount\n    from journal_entries\n\n    inner join journal_entry_lines\n        on journal_entries.journal_entry_id = journal_entry_lines.journal_entry_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__journal_entry_transactions`"}, "model.quickbooks.int_quickbooks__refund_receipt_transactions": {"raw_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith refund_receipts as (\n    select *\n    from {{ref('stg_quickbooks__refund_receipt')}}\n),\n\nrefund_receipt_lines as (\n    select *\n    from {{ref('stg_quickbooks__refund_receipt_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as {{ dbt_utils.type_string() }}) as vendor_id,\n        cast(null as {{ dbt_utils.type_string() }}) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipts.total_amount * -1 as total_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__refund_receipt_transactions"], "unique_id": "model.quickbooks.int_quickbooks__refund_receipt_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__refund_receipt_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__refund_receipt_transactions.sql", "name": "int_quickbooks__refund_receipt_transactions", "resource_type": "model", "alias": "int_quickbooks__refund_receipt_transactions", "checksum": {"name": "sha256", "checksum": "070e58b97d6be36960aa2afaf9810495f69a1699798b6d93c51dcd048c496de5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__refund_receipt"], ["stg_quickbooks__refund_receipt_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt", "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that joins the refund receipt and corresponding refund receipt lines into a single refund receipt transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__refund_receipt_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith refund_receipts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n),\n\nrefund_receipt_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        refund_receipts.refund_id as transaction_id,\n        refund_receipt_lines.index as transaction_line_id,\n        refund_receipts.doc_number,\n        'refund_receipt' as transaction_type,\n        refund_receipts.transaction_date,\n        refund_receipt_lines.sales_item_item_id as item_id,\n        refund_receipt_lines.sales_item_quantity as item_quantity,\n        refund_receipt_lines.sales_item_unit_price as item_unit_price,\n        case when refund_receipt_lines.sales_item_account_id is null\n            then coalesce(items.asset_account_id, items.income_account_id, items.expense_account_id) \n            else refund_receipt_lines.sales_item_account_id\n                end as account_id,\n        refund_receipts.class_id,\n        refund_receipts.department_id,\n        refund_receipts.customer_id,\n        cast(null as \n    int64\n) as vendor_id,\n        cast(null as \n    string\n) as billable_status,\n        refund_receipt_lines.description,\n        refund_receipt_lines.amount * -1 as amount,\n        refund_receipts.total_amount * -1 as total_amount\n    from refund_receipts\n\n    inner join refund_receipt_lines\n        on refund_receipts.refund_id = refund_receipt_lines.refund_id\n\n    left join items\n        on refund_receipt_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__refund_receipt_transactions`"}, "model.quickbooks.int_quickbooks__vendor_credit_transactions": {"raw_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith vendor_credits as (\n    select *\n    from {{ref('stg_quickbooks__vendor_credit')}}\n),\n\nvendor_credit_lines as (\n    select *\n    from {{ref('stg_quickbooks__vendor_credit_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credits.total_amount * -1 as total_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__vendor_credit_transactions"], "unique_id": "model.quickbooks.int_quickbooks__vendor_credit_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__vendor_credit_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__vendor_credit_transactions.sql", "name": "int_quickbooks__vendor_credit_transactions", "resource_type": "model", "alias": "int_quickbooks__vendor_credit_transactions", "checksum": {"name": "sha256", "checksum": "44dd7dbdee7eb69957e8ca1f25bc49e6981462ab6289577d869537d1ec8a1dff"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__vendor_credit"], ["stg_quickbooks__vendor_credit_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit", "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that joins the vendor credit and corresponding vendor credit lines into a single vendor credit transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__vendor_credit_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith vendor_credits as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit`\n),\n\nvendor_credit_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        vendor_credits.vendor_credit_id as transaction_id,\n        vendor_credit_lines.index as transaction_line_id,\n        vendor_credits.doc_number,\n        'vendor_credit' as transaction_type,\n        vendor_credits.transaction_date,\n        case when vendor_credit_lines.account_expense_account_id is null\n            then items.expense_account_id\n            else vendor_credit_lines.account_expense_account_id\n                end as account_id,\n        coalesce(vendor_credit_lines.account_expense_class_id, vendor_credit_lines.item_expense_class_id) as class_id,\n        vendor_credits.department_id,\n        coalesce(vendor_credit_lines.account_expense_customer_id, vendor_credit_lines.item_expense_customer_id) as customer_id,\n        vendor_credits.vendor_id,\n        coalesce(vendor_credit_lines.account_expense_billable_status, vendor_credit_lines.item_expense_billable_status) as billable_status,\n        vendor_credit_lines.description,\n        vendor_credit_lines.amount * -1 as amount,\n        vendor_credits.total_amount * -1 as total_amount\n    from vendor_credits\n\n    inner join vendor_credit_lines\n        on vendor_credits.vendor_credit_id = vendor_credit_lines.vendor_credit_id\n\n    left join items\n        on vendor_credit_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__vendor_credit_transactions`"}, "model.quickbooks.int_quickbooks__purchase_transactions": {"raw_sql": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_purchase', True)) }}\n\nwith purchases as (\n    select *\n    from {{ ref('stg_quickbooks__purchase') }}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\npurchase_lines as (\n    select *\n    from {{ ref('stg_quickbooks__purchase_line') }}\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        purchase_lines.amount,\n        purchases.total_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__purchase_transactions"], "unique_id": "model.quickbooks.int_quickbooks__purchase_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__purchase_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__purchase_transactions.sql", "name": "int_quickbooks__purchase_transactions", "resource_type": "model", "alias": "int_quickbooks__purchase_transactions", "checksum": {"name": "sha256", "checksum": "12d0d4051724830798e0aa4eba96319824655478a4a5d7d0afeb7d284f30a784"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase"], ["stg_quickbooks__item"], ["stg_quickbooks__purchase_line"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__purchase_line"]}, "description": "Table that joins the purchase and corresponding purchase lines into a single purchase transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__purchase_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_purchase variable within your dbt_project.yml file to False.\n\n\nwith purchases as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\npurchase_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line`\n),\n\nfinal as (\n    select\n        purchases.purchase_id as transaction_id,\n        purchase_lines.index as transaction_line_id,\n        purchases.doc_number,\n        'purchase' as transaction_type,\n        purchases.transaction_date,\n        coalesce(purchase_lines.account_expense_account_id, items.expense_account_id) as account_id,\n        purchase_lines.account_expense_class_id as class_id,\n        purchases.department_id,\n        coalesce(purchases.customer_id, account_expense_customer_id, item_expense_customer_id) as customer_id,\n        purchases.vendor_id,\n        coalesce(purchase_lines.account_expense_billable_status, purchase_lines.item_expense_billable_status) as billable_status,\n        purchase_lines.description,\n        purchase_lines.amount,\n        purchases.total_amount\n    from purchases\n\n    inner join purchase_lines \n        on purchases.purchase_id = purchase_lines.purchase_id\n\n    left join items\n        on purchase_lines.item_expense_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__purchase_transactions`"}, "model.quickbooks.int_quickbooks__sales_receipt_transactions": {"raw_sql": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith sales_receipts as (\n    select *\n    from {{ref('stg_quickbooks__sales_receipt')}}\n),\n\nsales_receipt_lines as (\n    select *\n    from {{ref('stg_quickbooks__sales_receipt_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as {{ dbt_utils.type_string() }}) as vendor_id,\n        cast(null as {{ dbt_utils.type_string() }}) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipts.total_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__sales_receipt_transactions"], "unique_id": "model.quickbooks.int_quickbooks__sales_receipt_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__sales_receipt_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__sales_receipt_transactions.sql", "name": "int_quickbooks__sales_receipt_transactions", "resource_type": "model", "alias": "int_quickbooks__sales_receipt_transactions", "checksum": {"name": "sha256", "checksum": "7cce65ccf93f41c766fc9ed6c05b8c641ac41a6d2157cd63d459f6ffdd4afe9f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__sales_receipt"], ["stg_quickbooks__sales_receipt_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt", "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that joins the sales receipt and corresponding sales receipt lines into a single sales receipt transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__sales_receipt_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_sales_receipt variable within your dbt_project.yml file to False.\n\n\nwith sales_receipts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n),\n\nsales_receipt_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        sales_receipts.sales_receipt_id as transaction_id,\n        sales_receipt_lines.index as transaction_line_id,\n        sales_receipts.doc_number,\n        'sales_receipt' as transaction_type,\n        sales_receipts.transaction_date,\n        sales_receipt_lines.sales_item_item_id as item_id,\n        sales_receipt_lines.sales_item_quantity as item_quantity,\n        sales_receipt_lines.sales_item_unit_price as item_unit_price,\n        coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) as account_id,\n        sales_receipts.class_id,\n        sales_receipts.department_id,\n        sales_receipts.customer_id,\n        cast(null as \n    int64\n) as vendor_id,\n        cast(null as \n    string\n) as billable_status,\n        sales_receipt_lines.description,\n        sales_receipt_lines.amount,\n        sales_receipts.total_amount\n    from sales_receipts\n\n    inner join sales_receipt_lines\n        on sales_receipts.sales_receipt_id = sales_receipt_lines.sales_receipt_id\n\n    left join items\n        on sales_receipt_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_receipt_transactions`"}, "model.quickbooks.int_quickbooks__deposit_transactions": {"raw_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith deposits as (\n    select *\n    from {{ref('stg_quickbooks__deposit')}}\n), \n\ndeposit_lines as (\n    select *\n    from {{ref('stg_quickbooks__deposit_line')}}\n),\n\nfinal as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposit_lines.index as transaction_line_id,\n        cast(null as {{ dbt_utils.type_string() }}) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as {{ dbt_utils.type_string() }}) as vendor_id,\n        cast(null as {{ dbt_utils.type_string() }}) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposits.total_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__deposit_transactions"], "unique_id": "model.quickbooks.int_quickbooks__deposit_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__deposit_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__deposit_transactions.sql", "name": "int_quickbooks__deposit_transactions", "resource_type": "model", "alias": "int_quickbooks__deposit_transactions", "checksum": {"name": "sha256", "checksum": "07e4bf0b6b79460d77f0809862d5814c75cd05f0b7f9b9cba7f88ff16729ca03"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__deposit"], ["stg_quickbooks__deposit_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit", "model.quickbooks_source.stg_quickbooks__deposit_line"]}, "description": "Table that joins the deposit and corresponding deposit lines into a single deposit transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__deposit_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith deposits as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit`\n), \n\ndeposit_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line`\n),\n\nfinal as (\n    select\n        deposits.deposit_id as transaction_id,\n        deposit_lines.index as transaction_line_id,\n        cast(null as \n    string\n) as doc_number,\n        'deposit' as transaction_type,\n        deposits.transaction_date,\n        deposit_lines.deposit_account_id as account_id,\n        deposit_lines.deposit_class_id as class_id,\n        deposits.department_id,\n        deposit_lines.deposit_customer_id as customer_id,\n        cast(null as \n    int64\n) as vendor_id,\n        cast(null as \n    string\n) as billable_status,\n        deposit_lines.description,\n        deposit_lines.amount,\n        deposits.total_amount\n    from deposits\n    \n    inner join deposit_lines \n        on deposits.deposit_id = deposit_lines.deposit_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__deposit_transactions`"}, "model.quickbooks.int_quickbooks__credit_memo_transactions": {"raw_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith credit_memos as (\n    select *\n    from {{ref('stg_quickbooks__credit_memo')}}\n),\n\ncredit_memo_lines as (\n    select *\n    from {{ref('stg_quickbooks__credit_memo_line')}}\n),\n\nitems as (\n    select *\n    from {{ref('stg_quickbooks__item')}}\n),\n\nfinal as (\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as {{ dbt_utils.type_string() }}) as vendor_id,\n        cast(null as {{ dbt_utils.type_string() }}) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memos.total_amount * -1 as total_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n\n     left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "transaction_lines", "int_quickbooks__credit_memo_transactions"], "unique_id": "model.quickbooks.int_quickbooks__credit_memo_transactions", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "transaction_lines/int_quickbooks__credit_memo_transactions.sql", "original_file_path": "models/transaction_lines/int_quickbooks__credit_memo_transactions.sql", "name": "int_quickbooks__credit_memo_transactions", "resource_type": "model", "alias": "int_quickbooks__credit_memo_transactions", "checksum": {"name": "sha256", "checksum": "0e7ad2628d427b5decb0c9ac258b641754a0412bc6ee73314439a6a9b25ea8da"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__credit_memo"], ["stg_quickbooks__credit_memo_line"], ["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo", "model.quickbooks_source.stg_quickbooks__credit_memo_line", "model.quickbooks_source.stg_quickbooks__item"]}, "description": "Table that joins the credit memo and credit memo lines into a single credit memo transactions table.", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/transaction_lines/int_quickbooks__credit_memo_transactions.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith credit_memos as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo`\n),\n\ncredit_memo_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\n),\n\nitems as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n),\n\nfinal as (\n    select\n        credit_memos.credit_memo_id as transaction_id,\n        credit_memo_lines.index as transaction_line_id,\n        credit_memos.doc_number,\n        'credit_memo' as transaction_type,\n        credit_memos.transaction_date,\n        credit_memo_lines.sales_item_item_id as item_id,\n        credit_memo_lines.sales_item_quantity as item_quantity,\n        credit_memo_lines.sales_item_unit_price as item_unit_price,\n        case when credit_memo_lines.sales_item_account_id is null\n            then coalesce(items.income_account_id, items.asset_account_id, items.expense_account_id) \n            else credit_memo_lines.sales_item_account_id\n                end as account_id,\n        credit_memos.class_id,\n        credit_memos.department_id,\n        credit_memos.customer_id, \n        cast(null as \n    int64\n) as vendor_id,\n        cast(null as \n    string\n) as billable_status,\n        credit_memo_lines.description,\n        credit_memo_lines.amount * -1 as amount,\n        credit_memos.total_amount * -1 as total_amount\n    from credit_memos\n\n    inner join credit_memo_lines\n        on credit_memos.credit_memo_id = credit_memo_lines.credit_memo_id\n\n     left join items\n        on credit_memo_lines.sales_item_item_id = items.item_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__credit_memo_transactions`"}, "model.quickbooks.int_quickbooks__general_ledger_balances": {"raw_sql": "with general_ledger as (\n    select *\n    from {{ref('quickbooks__general_ledger')}}\n),\n\ngl_accounting_periods as (\n    select *\n    from {{ref('int_quickbooks__general_ledger_date_spine')}}\n),\n\ngl_period_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        cast({{ dbt_utils.date_trunc(\"year\", \"transaction_date\") }} as date) as date_year,\n        cast({{ dbt_utils.date_trunc(\"month\", \"transaction_date\") }} as date) as date_month,\n        round(sum(adjusted_amount),2) as period_balance\n    from general_ledger\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n),\n\ngl_cumulative_balance as (\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then round(sum(period_balance) over (partition by account_id order by date_month, account_id rows unbounded preceding),2) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then round((cumulative_balance - period_balance),2) \n            else 0\n                end as period_beginning_balance,\n        round(cumulative_balance,2) as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n),\n\nmissing_period_starter as (\n    select \n        *,\n        case when period_beginning_balance is null and period_index = 1\n            then 0\n            else period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when period_ending_balance is null and period_index = 1\n            then 0\n            else period_ending_balance\n                end as period_ending_balance_starter\n    from gl_patch\n),\n \nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter, last_value(period_ending_balance_starter ignore nulls) over (partition by account_id order by date_year, period_first_day, account_id rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter, last_value(period_ending_balance_starter ignore nulls) over (partition by account_id order by date_year, period_first_day, account_id rows unbounded preceding)) as period_ending_balance\n    from missing_period_starter\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__general_ledger_balances"], "unique_id": "model.quickbooks.int_quickbooks__general_ledger_balances", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__general_ledger_balances.sql", "original_file_path": "models/intermediate/int_quickbooks__general_ledger_balances.sql", "name": "int_quickbooks__general_ledger_balances", "resource_type": "model", "alias": "int_quickbooks__general_ledger_balances", "checksum": {"name": "sha256", "checksum": "2d7751a85f4c5b871db43be026eb8de0702b3bb7335f6700760a2fc9d84b664e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger"], ["int_quickbooks__general_ledger_date_spine"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.quickbooks.quickbooks__general_ledger", "model.quickbooks.int_quickbooks__general_ledger_date_spine"]}, "description": "Table that aggregates quickbooks__general_ledger account level transactions per period into a period_beginning_balance, period_ending_balance, and period_net_change  for each period through the use of the int_quickbooks__general_ledger_date_spine model. Further, period balances are only applied to balance sheet accounts while income statement accounts do not have a persisting balance rather a period net change. Please note, a period equates to one month. \n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__general_ledger_balances.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger`\n),\n\ngl_accounting_periods as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__general_ledger_date_spine`\n),\n\ngl_period_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        cast(\n    timestamp_trunc(\n        cast(transaction_date as timestamp),\n        year\n    )\n\n as date) as date_year,\n        cast(\n    timestamp_trunc(\n        cast(transaction_date as timestamp),\n        month\n    )\n\n as date) as date_month,\n        round(sum(adjusted_amount),2) as period_balance\n    from general_ledger\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n),\n\ngl_cumulative_balance as (\n    select\n        *,\n        case when financial_statement_helper = 'balance_sheet'\n            then round(sum(period_balance) over (partition by account_id order by date_month, account_id rows unbounded preceding),2) \n            else 0\n                end as cumulative_balance\n    from gl_period_balance\n),\n\ngl_beginning_balance as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        financial_statement_helper,\n        account_class,\n        date_year,\n        date_month, \n        period_balance as period_net_change,\n        case when financial_statement_helper = 'balance_sheet'\n            then round((cumulative_balance - period_balance),2) \n            else 0\n                end as period_beginning_balance,\n        round(cumulative_balance,2) as period_ending_balance  \n    from gl_cumulative_balance\n),\n\ngl_patch as (\n    select \n        coalesce(gl_beginning_balance.account_id, gl_accounting_periods.account_id) as account_id,\n        coalesce(gl_beginning_balance.account_number, gl_accounting_periods.account_number) as account_number,\n        coalesce(gl_beginning_balance.account_name, gl_accounting_periods.account_name) as account_name,\n        coalesce(gl_beginning_balance.is_sub_account, gl_accounting_periods.is_sub_account) as is_sub_account,\n        coalesce(gl_beginning_balance.parent_account_number, gl_accounting_periods.parent_account_number) as parent_account_number,\n        coalesce(gl_beginning_balance.parent_account_name, gl_accounting_periods.parent_account_name) as parent_account_name,\n        coalesce(gl_beginning_balance.account_type, gl_accounting_periods.account_type) as account_type,\n        coalesce(gl_beginning_balance.account_sub_type, gl_accounting_periods.account_sub_type) as account_sub_type,\n        coalesce(gl_beginning_balance.account_class, gl_accounting_periods.account_class) as account_class,\n        coalesce(gl_beginning_balance.financial_statement_helper, gl_accounting_periods.financial_statement_helper) as financial_statement_helper,\n        coalesce(gl_beginning_balance.date_year, gl_accounting_periods.date_year) as date_year,\n        gl_accounting_periods.period_first_day,\n        gl_accounting_periods.period_last_day,\n        gl_accounting_periods.period_index,\n        gl_beginning_balance.period_net_change,\n        gl_beginning_balance.period_beginning_balance,\n        gl_beginning_balance.period_ending_balance\n    from gl_accounting_periods\n\n    left join gl_beginning_balance\n        on gl_beginning_balance.account_id = gl_accounting_periods.account_id\n            and gl_beginning_balance.date_month = gl_accounting_periods.period_first_day\n            and gl_beginning_balance.date_year = gl_accounting_periods.date_year\n),\n\nmissing_period_starter as (\n    select \n        *,\n        case when period_beginning_balance is null and period_index = 1\n            then 0\n            else period_beginning_balance\n                end as period_beginning_balance_starter,\n        case when period_ending_balance is null and period_index = 1\n            then 0\n            else period_ending_balance\n                end as period_ending_balance_starter\n    from gl_patch\n),\n \nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        coalesce(period_net_change,0) as period_net_change,\n        coalesce(period_beginning_balance_starter, last_value(period_ending_balance_starter ignore nulls) over (partition by account_id order by date_year, period_first_day, account_id rows unbounded preceding)) as period_beginning_balance,\n        coalesce(period_ending_balance_starter, last_value(period_ending_balance_starter ignore nulls) over (partition by account_id order by date_year, period_first_day, account_id rows unbounded preceding)) as period_ending_balance\n    from missing_period_starter\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__general_ledger_balances`"}, "model.quickbooks.int_quickbooks__account_classifications": {"raw_sql": "with accounts as (\n    select *\n    from {{ ref('stg_quickbooks__account') }}\n),\n\nparent_accounts as (\n    select *\n    from accounts\n    where not is_sub_account\n),\n\nclassification_fix as (\n    select \n        account_id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        round(balance * multiplier, 2) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__account_classifications"], "unique_id": "model.quickbooks.int_quickbooks__account_classifications", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__account_classifications.sql", "original_file_path": "models/intermediate/int_quickbooks__account_classifications.sql", "name": "int_quickbooks__account_classifications", "resource_type": "model", "alias": "int_quickbooks__account_classifications", "checksum": {"name": "sha256", "checksum": "d79510fa188a2932387eb43613fe5f77a2533c95ca21924326afdbb4de81b93a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "description": "Table that adds missing detail to the account table. This table adds the following:\nA financial statement helper field that specifies the account as either a balance sheet or income statement account.\nAdds a transaction type to the specified account. The transaction type (debit or credit) is the type of transaction that increases the account.\nAdds a multiplier of -1 to Liability and Equity accounts to offset the account balance so liability and equity accounts do not show up as negative balances.\nCreates a new classification field that fills in the gaps if classifications were incorrectly set on certain account_types. For more information  on how these classifications were determined you can refer to the  [QuickBooks API Docs](https://developer.intuit.com/app/developer/qbo/docs/api/accounting/all-entities/account) that was used as reference.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__account_classifications.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with accounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n),\n\nparent_accounts as (\n    select *\n    from accounts\n    where not is_sub_account\n),\n\nclassification_fix as (\n    select \n        account_id,\n        account_number,\n        is_sub_account,\n        parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        balance,\n        balance_with_sub_accounts,\n        is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at,\n        case when classification is not null\n            then classification\n            when classification is null and account_type in ('Bank', 'Other Current Asset', 'Fixed Asset', 'Other Asset', 'Accounts Receivable')\n                then 'Asset'\n            when classification is null and account_type = 'Equity'\n                then 'Equity'\n            when classification is null and account_type in ('Expense', 'Other Expense', 'Cost of Goods Sold')\n                then 'Expense'\n            when classification is null and account_type in ('Accounts Payable', 'Credit Card', 'Long Term Liability', 'Other Current Liability')\n                then 'Liability'\n            when classification is null and account_type in ('Income', 'Other Income')\n                then 'Revenue'\n                    end as classification\n    from accounts\n),\n\nclassification_add as (\n    select\n        *,\n        case when classification in ('Liability', 'Equity')\n            then -1\n        when classification = 'Asset'\n            then 1\n            else null\n                end as multiplier,\n        case when classification in ('Asset', 'Liability', 'Equity')\n            then 'balance_sheet'\n            else 'income_statement'\n                end as financial_statement_helper,\n        case when classification in ('Asset', 'Expense')\n            then 'debit'\n            else 'credit'\n                end as transaction_type\n    from classification_fix\n),\n\nadjusted_balances as (\n    select \n        *,\n        round(balance * multiplier, 2) as adjusted_balance\n    from classification_add\n),\n\nfinal as (\n    select\n        adjusted_balances.*,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.account_number\n            else adjusted_balances.account_number\n                end as parent_account_number,\n        case when adjusted_balances.is_sub_account\n            then parent_accounts.fully_qualified_name\n            else adjusted_balances.fully_qualified_name\n                end as parent_account_name\n    from adjusted_balances\n\n    left join parent_accounts\n        on parent_accounts.account_id = adjusted_balances.parent_account_id\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__account_classifications`"}, "model.quickbooks.int_quickbooks__expenses_union": {"raw_sql": "with expense_union as (\n    select *\n    from {{ ref('int_quickbooks__purchase_transactions') }}\n\n    {% if var('using_bill', True) %}\n    union all\n\n    select *\n    from {{ ref('int_quickbooks__bill_transactions') }}\n    {% endif %} \n\n    {% if var('using_journal_entry', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__journal_entry_transactions')}}\n    {% endif %} \n\n    {% if var('using_deposit', True) %}\n    union all\n\n    select *\n    from {{ref('int_quickbooks__deposit_transactions')}}\n    {% endif %} \n\n    {% if var('using_vendor_credit', True) %}\n    union all\n\n    select *\n    from {{ ref('int_quickbooks__vendor_credit_transactions') }}\n    {% endif %}\n),\n\ncustomers as (\n    select *\n    from {{ ref('stg_quickbooks__customer') }}\n),\n\n{% if var('using_department', True) %}\ndepartments as ( \n    select *\n    from {{ ref('stg_quickbooks__department') }}\n),\n{% endif %}\n\nvendors as (\n    select *\n    from {{ ref('stg_quickbooks__vendor') }}\n),\n\nexpense_accounts as (\n    select *\n    from {{ ref('int_quickbooks__account_classifications') }}\n    where account_type = 'Expense'\n),\n\nfinal as (\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as {{ dbt_utils.type_string() }}) as item_id,\n        cast(null as decimal) as item_quantity,\n        cast(null as decimal) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        {% if var('using_department', True) %}\n        departments.fully_qualified_name as department_name,\n        {% endif %}\n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.total_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n\n    {% if var('using_department', True) %}\n    left join departments\n        on departments.department_id = expense_union.department_id\n    {% endif %}\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__expenses_union"], "unique_id": "model.quickbooks.int_quickbooks__expenses_union", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__expenses_union.sql", "original_file_path": "models/intermediate/int_quickbooks__expenses_union.sql", "name": "int_quickbooks__expenses_union", "resource_type": "model", "alias": "int_quickbooks__expenses_union", "checksum": {"name": "sha256", "checksum": "aff0bbacd2cb461692aecdf36e8e44a575ba4e1ff60f0b7ac08abb950cb3d62d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__purchase_transactions"], ["int_quickbooks__bill_transactions"], ["int_quickbooks__journal_entry_transactions"], ["int_quickbooks__deposit_transactions"], ["int_quickbooks__vendor_credit_transactions"], ["stg_quickbooks__customer"], ["stg_quickbooks__department"], ["stg_quickbooks__vendor"], ["int_quickbooks__account_classifications"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"], "nodes": ["model.quickbooks.int_quickbooks__purchase_transactions", "model.quickbooks.int_quickbooks__bill_transactions", "model.quickbooks.int_quickbooks__journal_entry_transactions", "model.quickbooks.int_quickbooks__deposit_transactions", "model.quickbooks.int_quickbooks__vendor_credit_transactions", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__vendor", "model.quickbooks.int_quickbooks__account_classifications"]}, "description": "Table that unions transactional tables that are representative of an expense. The expense transactional tables included are: int_quickbooks__purchase_transactions, int_quickbooks__bill_transactions, int_quickbooks_journal_entry_transactions, int_quickbooks__deposit_transactions, int_quickbooks__vendor_credit_transactions. Additionally, while some transactions included in the previously mentioned transaction tables  contain non-expense transactions an inner join on accounts with the sub_type equal to Expense is applied.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__expenses_union.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with expense_union as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__purchase_transactions`\n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_transactions`\n     \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__journal_entry_transactions`\n     \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__deposit_transactions`\n     \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__vendor_credit_transactions`\n    \n),\n\ncustomers as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\n\ndepartments as ( \n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\nvendors as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nexpense_accounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__account_classifications`\n    where account_type = 'Expense'\n),\n\nfinal as (\n    select \n        'expense' as transaction_source,\n        expense_union.transaction_id,\n        expense_union.transaction_line_id,\n        expense_union.doc_number,\n        expense_union.transaction_type,\n        expense_union.transaction_date,\n        cast(null as \n    int64\n) as item_id,\n        cast(null as decimal) as item_quantity,\n        cast(null as decimal) as item_unit_price,\n        expense_union.account_id,\n        expense_accounts.name as account_name,\n        expense_accounts.account_sub_type as account_sub_type,\n        expense_union.class_id,\n        expense_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        expense_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        expense_union.vendor_id,\n        vendors.display_name as vendor_name,\n        expense_union.billable_status,\n        expense_union.description,\n        expense_union.amount,\n        expense_union.total_amount\n\n    from expense_union\n\n    inner join expense_accounts\n        on expense_union.account_id = expense_accounts.account_id\n\n    left join customers\n        on customers.customer_id = expense_union.customer_id\n\n    left join vendors\n        on vendors.vendor_id = expense_union.vendor_id\n\n    \n    left join departments\n        on departments.department_id = expense_union.department_id\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__expenses_union`"}, "model.quickbooks.int_quickbooks__invoice_join": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice')) }}\n\nwith invoices as (\n    select *\n    from {{ref('stg_quickbooks__invoice')}}\n),\n\ninvoice_linked as (\n    select *\n    from {{ref('stg_quickbooks__invoice_linked_txn')}}\n),\n\n{% if var('using_estimate', True) %}\nestimates as (\n    select *\n    from {{ref('stg_quickbooks__estimate')}}\n),\n{% endif %}\n\npayments as (\n    select *\n    from {{ref('stg_quickbooks__payment')}}\n),\n\npayment_lines_payment as (\n    select *\n    from {{ref('stg_quickbooks__payment_line')}}\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n),\n\nfinal as (\n    select\n        'invoice' as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        invoice_link.balance as current_balance,\n\n        {% if var('using_estimate', True) %}\n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        estimates.transaction_status as estimate_status,\n\n        {% else %}\n        cast(null as decimal) as estimate_total_amount,\n        cast(null as {{ dbt_utils.type_string() }}) as estimate_status,\n\n        {% endif %}\n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    {% if var('using_estimate', True) %}\n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n    {% endif %}\n\n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n            and invoice_link.invoice_id = payment_lines_payment.invoice_id\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__invoice_join"], "unique_id": "model.quickbooks.int_quickbooks__invoice_join", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__invoice_join.sql", "original_file_path": "models/intermediate/int_quickbooks__invoice_join.sql", "name": "int_quickbooks__invoice_join", "resource_type": "model", "alias": "int_quickbooks__invoice_join", "checksum": {"name": "sha256", "checksum": "b7de83da1c566d7902fa9cec3f1e79243db055e501987aba772012b10ff7e887"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice"], ["stg_quickbooks__invoice_linked_txn"], ["stg_quickbooks__estimate"], ["stg_quickbooks__payment"], ["stg_quickbooks__payment_line"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "model.quickbooks_source.stg_quickbooks__estimate", "model.quickbooks_source.stg_quickbooks__payment", "model.quickbooks_source.stg_quickbooks__payment_line"]}, "description": "Table that joins a single invoice transactions with the corresponding payment (if paid) and corresponding estimate (if provided).", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__invoice_join.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith invoices as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`\n),\n\ninvoice_linked as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`\n),\n\n\nestimates as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate`\n),\n\n\npayments as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment`\n),\n\npayment_lines_payment as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line`\n\n    where invoice_id is not null\n),\n\ninvoice_est as (\n    select\n        invoices.invoice_id,\n        invoice_linked.estimate_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.estimate_id is not null\n),\n\ninvoice_pay as (\n    select\n        invoices.invoice_id,\n        invoice_linked.payment_id\n    from invoices\n\n    left join invoice_linked\n        on invoices.invoice_id = invoice_linked.invoice_id\n\n    where invoice_linked.payment_id is not null\n),\n\ninvoice_link as (\n    select\n        invoices.*,\n        invoice_est.estimate_id,\n        invoice_pay.payment_id\n    from invoices\n\n    left join invoice_est\n        on invoices.invoice_id = invoice_est.invoice_id\n\n    left join invoice_pay\n        on invoices.invoice_id = invoice_pay.invoice_id\n),\n\nfinal as (\n    select\n        'invoice' as transaction_type,\n        invoice_link.invoice_id as transaction_id,\n        invoice_link.doc_number,\n        invoice_link.estimate_id,\n        invoice_link.department_id,\n        invoice_link.customer_id as customer_id,\n        invoice_link.billing_address_id,\n        invoice_link.shipping_address_id,\n        invoice_link.delivery_type,\n        invoice_link.total_amount as total_amount,\n        invoice_link.balance as current_balance,\n\n        \n        coalesce(estimates.total_amount, 0) as estimate_total_amount,\n        estimates.transaction_status as estimate_status,\n\n        \n\n        invoice_link.due_date as due_date,\n        min(payments.transaction_date) as initial_payment_date,\n        max(payments.transaction_date) as recent_payment_date,\n        sum(coalesce(payment_lines_payment.amount, 0)) as total_current_payment\n\n    from invoice_link\n\n    \n    left join estimates\n        on invoice_link.estimate_id = estimates.estimate_id\n    \n\n    left join payments\n        on invoice_link.payment_id = payments.payment_id\n\n    left join payment_lines_payment\n        on payments.payment_id = payment_lines_payment.payment_id\n            and invoice_link.invoice_id = payment_lines_payment.invoice_id\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_join`"}, "model.quickbooks.int_quickbooks__retained_earnings": {"raw_sql": "with general_ledger_balances as (\n    select *\n    from {{ref('int_quickbooks__general_ledger_balances')}}\n),\n\nrevenue_starter as (\n    select\n        period_first_day,\n        sum(period_net_change) as revenue_net_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1\n),\n\nexpense_starter as (\n    select \n        period_first_day,\n        sum(period_net_change) as expense_net_change \n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1\n),\n\nnet_income_loss as (\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day)\n),\n\nretained_earnings_starter as (\n    select\n        9999 as account_id,\n        '9999-00' as account_number,\n        'Net Income / Retained Earnings Adjustment' as account_name,\n        false as is_sub_account,\n        cast(null as {{ dbt_utils.type_string() }}) as parent_account_number,\n        cast(null as {{ dbt_utils.type_string() }}) as parent_account_name,\n        'Equity' as account_type,\n        'RetainedEarnings' as account_sub_type,\n        'Equity' as account_class,\n        'balance_sheet' as financial_statement_helper,\n        cast({{ dbt_utils.date_trunc(\"year\", \"period_first_day\") }} as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        last_day(period_first_day) as period_last_day,\n        round((revenue_net_change - expense_net_change),2) as period_net_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n    select\n        *,\n        round(sum(coalesce(period_net_change,0)) over (order by period_first_day, period_first_day rows unbounded preceding),2) as period_ending_balance\n    from retained_earnings_starter\n)\n,\n\nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        round(lag(coalesce(period_ending_balance,0)) over (order by period_first_day),2) as period_beginning_balance,\n        period_ending_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__retained_earnings"], "unique_id": "model.quickbooks.int_quickbooks__retained_earnings", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__retained_earnings.sql", "original_file_path": "models/intermediate/int_quickbooks__retained_earnings.sql", "name": "int_quickbooks__retained_earnings", "resource_type": "model", "alias": "int_quickbooks__retained_earnings", "checksum": {"name": "sha256", "checksum": "fc631bbc8a81a170581f4dc03758d1977681e3bb118b741d12c588e8cdd6a0af"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__general_ledger_balances"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.date_trunc"], "nodes": ["model.quickbooks.int_quickbooks__general_ledger_balances"]}, "description": "Table that creates an adjusting entry for retained earnings each month. The retained earnings account is created as account_id 9999 and is listed as an Equity class.  This table generates the retained earnings period beginning balance, ending balance, and net change by adding the period revenues and subtracting by the period  expenses. This total is set as the period ending balance. From the period ending balance the net change and beginning balances are calculated. This is table is then unioned with in_quickbooks__general_ledger_balances.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__retained_earnings.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_balances as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__general_ledger_balances`\n),\n\nrevenue_starter as (\n    select\n        period_first_day,\n        sum(period_net_change) as revenue_net_change\n    from general_ledger_balances\n    \n    where account_class = 'Revenue'\n\n    group by 1\n),\n\nexpense_starter as (\n    select \n        period_first_day,\n        sum(period_net_change) as expense_net_change \n    from general_ledger_balances\n    \n    where account_class = 'Expense'\n\n    group by 1\n),\n\nnet_income_loss as (\n    select *\n    from revenue_starter\n\n    join expense_starter \n        using (period_first_day)\n),\n\nretained_earnings_starter as (\n    select\n        9999 as account_id,\n        '9999-00' as account_number,\n        'Net Income / Retained Earnings Adjustment' as account_name,\n        false as is_sub_account,\n        cast(null as \n    string\n) as parent_account_number,\n        cast(null as \n    string\n) as parent_account_name,\n        'Equity' as account_type,\n        'RetainedEarnings' as account_sub_type,\n        'Equity' as account_class,\n        'balance_sheet' as financial_statement_helper,\n        cast(\n    timestamp_trunc(\n        cast(period_first_day as timestamp),\n        year\n    )\n\n as date) as date_year,\n        cast(period_first_day as date) as period_first_day,\n        last_day(period_first_day) as period_last_day,\n        round((revenue_net_change - expense_net_change),2) as period_net_change\n    from net_income_loss\n),\n\n\nretained_earnings_beginning as (\n    select\n        *,\n        round(sum(coalesce(period_net_change,0)) over (order by period_first_day, period_first_day rows unbounded preceding),2) as period_ending_balance\n    from retained_earnings_starter\n)\n,\n\nfinal as (\n    select\n        account_id,\n        account_number,\n        account_name,\n        is_sub_account,\n        parent_account_number,\n        parent_account_name,\n        account_type,\n        account_sub_type,\n        account_class,\n        financial_statement_helper,\n        date_year,\n        period_first_day,\n        period_last_day,\n        period_net_change,\n        round(lag(coalesce(period_ending_balance,0)) over (order by period_first_day),2) as period_beginning_balance,\n        period_ending_balance\n    from retained_earnings_beginning\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__retained_earnings`"}, "model.quickbooks.int_quickbooks__general_ledger_date_spine": {"raw_sql": "-- depends_on: {{ ref('quickbooks__general_ledger') }}\n\nwith spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( transaction_date ) as min_date from {{ ref('quickbooks__general_ledger') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n\n    {% else %} {% set first_date = \"'2015-01-01'\" %}\n    {% endif %}\n\n    {% if execute %}\n    {% set last_date_query %}\n        select  max( transaction_date ) as max_date from {{ ref('quickbooks__general_ledger') }}\n    {% endset %}\n\n    {% set current_date_query %}\n        select current_date\n    {% endset %}\n\n    {% if run_query(current_date_query).columns[0][0]|string < run_query(last_date_query).columns[0][0]|string %}\n\n    {% set last_date = run_query(last_date_query).columns[0][0]|string %}\n\n    {% else %} {% set last_date = run_query(current_date_query).columns[0][0]|string %}\n    {% endif %}\n    {% endif %}\n\n    {{ dbt_utils.date_spine(\n        datepart=\"month\",\n        start_date=\"'\" ~ first_date[0:10] ~ \"'\",\n        end_date=dbt_utils.dateadd(\"month\", 1, \"'\" ~ last_date[0:10] ~ \"'\")\n        )\n    }}\n),\n\ngeneral_ledger as (\n    select *\n    from {{ ref('quickbooks__general_ledger') }}\n),\n\ndate_spine as (\n    select\n        cast({{ dbt_utils.date_trunc(\"year\", \"date_month\") }} as date) as date_year,\n        cast({{ dbt_utils.date_trunc(\"month\", \"date_month\") }} as date) as period_first_day,\n        last_day(cast(date_month as date)) as period_last_day,\n        row_number() over (order by cast({{ dbt_utils.date_trunc(\"month\", \"date_month\") }} as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__general_ledger_date_spine"], "unique_id": "model.quickbooks.int_quickbooks__general_ledger_date_spine", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__general_ledger_date_spine.sql", "original_file_path": "models/intermediate/int_quickbooks__general_ledger_date_spine.sql", "name": "int_quickbooks__general_ledger_date_spine", "resource_type": "model", "alias": "int_quickbooks__general_ledger_date_spine", "checksum": {"name": "sha256", "checksum": "21cf4d79360b02277f2323035ff2043b596e50948ad9c2f359ffab25ef7a674b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger"], ["quickbooks__general_ledger"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine", "macro.dbt_utils.date_trunc", "macro.dbt.run_query"], "nodes": ["model.quickbooks.quickbooks__general_ledger", "model.quickbooks.quickbooks__general_ledger"]}, "description": "Table that creates a date spine by month with the first date being the minimum transaction date from the quickbooks__general_ledger model and the last date being one month after the last transaction date from the quickbooks__general_ledger model.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__general_ledger_date_spine.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "-- depends_on: `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger`\n\nwith spine as (\n\n    \n    \n    \n\n    \n\n    \n    \n\n    \n\n     \n    \n    \n\n    \n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * pow(2, 0)\n     + \n    \n    p1.generated_number * pow(2, 1)\n     + \n    \n    p2.generated_number * pow(2, 2)\n     + \n    \n    p3.generated_number * pow(2, 3)\n     + \n    \n    p4.generated_number * pow(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 27\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2019-01-02' as datetime),\n        interval row_number() over (order by 1) - 1 month\n        )\n\n\n    ) as date_month\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_month <= \n\n        datetime_add(\n            cast( '2021-03-12' as datetime),\n        interval 1 month\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\ngeneral_ledger as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger`\n),\n\ndate_spine as (\n    select\n        cast(\n    timestamp_trunc(\n        cast(date_month as timestamp),\n        year\n    )\n\n as date) as date_year,\n        cast(\n    timestamp_trunc(\n        cast(date_month as timestamp),\n        month\n    )\n\n as date) as period_first_day,\n        last_day(cast(date_month as date)) as period_last_day,\n        row_number() over (order by cast(\n    timestamp_trunc(\n        cast(date_month as timestamp),\n        month\n    )\n\n as date)) as period_index\n    from spine\n),\n\nfinal as (\n    select distinct\n        general_ledger.account_id,\n        general_ledger.account_number,\n        general_ledger.account_name,\n        general_ledger.is_sub_account,\n        general_ledger.parent_account_number,\n        general_ledger.parent_account_name,\n        general_ledger.account_type,\n        general_ledger.account_sub_type,\n        general_ledger.account_class,\n        general_ledger.financial_statement_helper,\n        date_spine.date_year,\n        date_spine.period_first_day,\n        date_spine.period_last_day,\n        date_spine.period_index\n    from general_ledger\n\n    cross join date_spine\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__general_ledger_date_spine`"}, "model.quickbooks.int_quickbooks__bill_join": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith bills as (\n    select *\n    from {{ref('stg_quickbooks__bill')}}\n),\n\nbill_lines as (\n    select *\n    from {{ref('stg_quickbooks__bill_line')}}\n),\n\nbills_linked as (\n    select *\n    from {{ref('stg_quickbooks__bill_linked_txn')}}\n),\n\nbill_payments as (\n    select *\n    from {{ref('stg_quickbooks__bill_payment')}}\n),\n\nbill_payment_lines as (\n    select *\n    from {{ref('stg_quickbooks__bill_payment_line')}}\n\n    where bill_id is not null\n),\n\nbill_pay as (\n    select\n        bills.bill_id,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n),\n\nfinal as (\n    select\n        'bill' as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        round(sum(coalesce(bill_payment_lines.amount, 0)),2) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n            and bill_link.bill_id = bill_payment_lines.bill_id\n    \n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__bill_join"], "unique_id": "model.quickbooks.int_quickbooks__bill_join", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__bill_join.sql", "original_file_path": "models/intermediate/int_quickbooks__bill_join.sql", "name": "int_quickbooks__bill_join", "resource_type": "model", "alias": "int_quickbooks__bill_join", "checksum": {"name": "sha256", "checksum": "a43b9b3b093b364afad032a3309bee73f1e3feed9a6cdfa09bb40dc7cb3888b1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill"], ["stg_quickbooks__bill_line"], ["stg_quickbooks__bill_linked_txn"], ["stg_quickbooks__bill_payment"], ["stg_quickbooks__bill_payment_line"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "model.quickbooks_source.stg_quickbooks__bill_payment", "model.quickbooks_source.stg_quickbooks__bill_payment_line"]}, "description": "Table that joins a single bill transaction with the corresponding bill payment (if paid).", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__bill_join.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith bills as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill`\n),\n\nbill_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line`\n),\n\nbills_linked as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`\n),\n\nbill_payments as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment`\n),\n\nbill_payment_lines as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\n\n    where bill_id is not null\n),\n\nbill_pay as (\n    select\n        bills.bill_id,\n        bills_linked.bill_payment_id\n    from bills\n\n    left join bills_linked\n        on bills.bill_id = bills_linked.bill_id\n\n    where bills_linked.bill_payment_id is not null\n),\n\nbill_link as (\n    select\n        bills.*,\n        bill_pay.bill_payment_id\n    from bills\n\n    left join bill_pay\n        on bills.bill_id = bill_pay.bill_id\n),\n\nfinal as (\n    select\n        'bill' as transaction_type,\n        bill_link.bill_id as transaction_id,\n        bill_link.doc_number,\n        bill_link.department_id,\n        bill_link.vendor_id as vendor_id,\n        bill_link.payable_account_id,\n        bill_link.total_amount as total_amount,\n        bill_link.balance as current_balance,\n        bill_link.due_date_at as due_date,\n        min(bill_payments.transaction_date) as initial_payment_date,\n        max(bill_payments.transaction_date) as recent_payment_date,\n        round(sum(coalesce(bill_payment_lines.amount, 0)),2) as total_current_payment\n\n    from bill_link\n\n    left join bill_payments\n        on bill_link.bill_payment_id = bill_payments.bill_payment_id\n\n    left join bill_payment_lines\n        on bill_payments.bill_payment_id = bill_payment_lines.bill_payment_id\n            and bill_link.bill_id = bill_payment_lines.bill_id\n    \n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__bill_join`"}, "model.quickbooks.int_quickbooks__sales_union": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars_one_true(['using_sales_receipt','using_invoice'])) }}\n\nwith sales_union as (\n    {% if var('using_sales_receipt', True) %}\n    select *\n    from {{ ref('int_quickbooks__sales_receipt_transactions') }}\n    {% endif %}\n\n    {% if fivetran_utils.enabled_vars(['using_sales_receipt','using_invoice']) %}\n    union all\n\n    select *\n    from {{ ref('int_quickbooks__invoice_transactions') }}\n\n    {% else %}\n\n        {% if var('using_invoice', True) %}\n        select *\n        from {{ ref('int_quickbooks__invoice_transactions') }}\n        {% endif %}   \n        \n    {% endif %}\n\n    {% if var('using_refund_receipt', True) %}\n    union all\n\n    select *\n    from {{ ref('int_quickbooks__refund_receipt_transactions') }}\n    {% endif %}\n\n    {% if var('using_credit_memo', True) %}\n    union all\n\n    select *\n    from {{ ref('int_quickbooks__credit_memo_transactions') }}\n    {% endif %}\n),\n\ncustomers as (\n    select *\n    from {{ ref('stg_quickbooks__customer') }}\n),\n\n{% if var('using_department', True) %}\ndepartments as ( \n    select *\n    from {{ ref('stg_quickbooks__department') }}\n),\n{% endif %}\n\nvendors as (\n    select *\n    from {{ ref('stg_quickbooks__vendor') }}\n),\n\nincome_accounts as (\n    select *\n    from {{ ref('int_quickbooks__account_classifications') }}\n    where account_type = 'Income'\n),\n\nfinal as (\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        {% if var('using_department', True) %}\n        departments.fully_qualified_name as department_name,\n        {% endif %}\n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.total_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n\n    {% if var('using_department', True) %}\n    left join departments\n        on departments.department_id = sales_union.department_id\n    {% endif %}\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "intermediate", "int_quickbooks__sales_union"], "unique_id": "model.quickbooks.int_quickbooks__sales_union", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "intermediate/int_quickbooks__sales_union.sql", "original_file_path": "models/intermediate/int_quickbooks__sales_union.sql", "name": "int_quickbooks__sales_union", "resource_type": "model", "alias": "int_quickbooks__sales_union", "checksum": {"name": "sha256", "checksum": "b48e3ecc298fcccdf54a63bc210c1a11fbded3702ff8ba3c696d2d65dc20467a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["int_quickbooks__sales_receipt_transactions"], ["int_quickbooks__invoice_transactions"], ["int_quickbooks__refund_receipt_transactions"], ["int_quickbooks__credit_memo_transactions"], ["stg_quickbooks__customer"], ["stg_quickbooks__department"], ["stg_quickbooks__vendor"], ["int_quickbooks__account_classifications"]], "sources": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars_one_true", "macro.fivetran_utils.enabled_vars"], "nodes": ["model.quickbooks.int_quickbooks__sales_receipt_transactions", "model.quickbooks.int_quickbooks__invoice_transactions", "model.quickbooks.int_quickbooks__refund_receipt_transactions", "model.quickbooks.int_quickbooks__credit_memo_transactions", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__vendor", "model.quickbooks.int_quickbooks__account_classifications"]}, "description": "Table that unions transactional tables that are representative of a sale. The sale transactional tables are: int_quickbooks__sales_receipt_transactions int_quickbooks__invoice_transactions, int_quickbooks__credit_memo_transactions, int_quickbooks__refund_receipt_transactions, int_quickbooks__journal_entry_transactions, int_quickbooks__deposit_transactions. Additionally, while some transactions included in the previously mentioned transaction tables  contain non-income transactions an inner join on accounts with the sub_type equal to Income is applied.\n", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "models/quickbooks.yml", "build_path": "target/compiled/quickbooks/models/intermediate/int_quickbooks__sales_union.sql", "deferred": false, "unrendered_config": {"materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith sales_union as (\n    \n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_receipt_transactions`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__invoice_transactions`\n\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__refund_receipt_transactions`\n    \n\n    \n    union all\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__credit_memo_transactions`\n    \n),\n\ncustomers as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`\n),\n\n\ndepartments as ( \n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department`\n),\n\n\nvendors as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`\n),\n\nincome_accounts as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__account_classifications`\n    where account_type = 'Income'\n),\n\nfinal as (\n    select \n        'sales' as transaction_source,\n        sales_union.transaction_id,\n        sales_union.transaction_line_id,\n        sales_union.doc_number,\n        sales_union.transaction_type,\n        sales_union.transaction_date,\n        sales_union.item_id,\n        sales_union.item_quantity,\n        sales_union.item_unit_price,\n        sales_union.account_id,\n        income_accounts.name as account_name,\n        income_accounts.account_sub_type as account_sub_type,\n        sales_union.class_id,\n        sales_union.department_id,\n        \n        departments.fully_qualified_name as department_name,\n        \n        sales_union.customer_id,\n        customers.fully_qualified_name as customer_name,\n        customers.website as customer_website,\n        sales_union.vendor_id,\n        vendors.display_name as vendor_name,\n        sales_union.billable_status,\n        sales_union.description,\n        sales_union.amount,\n        sales_union.total_amount\n    from sales_union\n\n    inner join income_accounts\n        on sales_union.account_id = income_accounts.account_id\n\n    left join customers\n        on customers.customer_id = sales_union.customer_id\n\n    left join vendors\n        on vendors.vendor_id = sales_union.vendor_id\n\n    \n    left join departments\n        on departments.department_id = sales_union.department_id\n    \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests`.`int_quickbooks__sales_union`"}, "analysis.quickbooks.quickbooks__balance_sheet": {"raw_sql": "with general_ledger_by_period as (\n    select * \n    from {{ ref('quickbooks__general_ledger_by_period') }}\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1\n),\n\nasset_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1\n),\n\nequity_date as (\n    select \n        account_id,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance\n    from liability_date ld\n\n    left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day \n),\n\nasset as (\n    select ad.account_id, a.period_ending_balance\n    from asset_date ad\n        left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n),\n\nequity as (\n    select ed.account_id, e.period_ending_balance\n    from equity_date ed\n        left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n)\n\nselect \n    \"liability\" as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom liability\n\nunion all\n\nselect \n    \"asset\" as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom asset\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom equity", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "analysis", "quickbooks__balance_sheet"], "unique_id": "analysis.quickbooks.quickbooks__balance_sheet", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "analysis/quickbooks__balance_sheet.sql", "original_file_path": "analysis/quickbooks__balance_sheet.sql", "name": "quickbooks__balance_sheet", "resource_type": "analysis", "alias": "quickbooks__balance_sheet", "checksum": {"name": "sha256", "checksum": "98d26b43462de29ebe4a3ae915b96ad65a1ea2f202794e8a30a2867713f20633"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger_by_period"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks.quickbooks__general_ledger_by_period"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks/analysis/quickbooks__balance_sheet.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_by_period as (\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger_by_period`\n    where period_first_day <= 'YYYY-MM-DD' --Update to be your desired ending date.\n),\n\nliability_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Liability'\n\n    group by 1\n),\n\nasset_date as (\n    select \n        account_id, \n        max(period_first_day) as period_first_day \n    from general_ledger_by_period\n\n    where account_class = 'Asset'\n\n    group by 1\n),\n\nequity_date as (\n    select \n        account_id,\n        max(period_first_day) as period_first_day \n    from general_ledger_by_period \n\n    where account_class = 'Equity'\n\n    group by 1\n),\n\nliability as (\n    select \n        ld.account_id, \n        l.period_ending_balance\n    from liability_date ld\n\n    left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Liability') l\n        on l.account_id = ld.account_id\n            and l.period_first_day = ld.period_first_day \n),\n\nasset as (\n    select ad.account_id, a.period_ending_balance\n    from asset_date ad\n        left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Asset') a\n            on a.account_id = ad.account_id\n                and a.period_first_day = ad.period_first_day \n),\n\nequity as (\n    select ed.account_id, e.period_ending_balance\n    from equity_date ed\n        left join (select account_id, period_first_day, period_ending_balance from general_ledger_by_period where account_class = 'Equity') e\n            on e.account_id = ed.account_id\n                and e.period_first_day = ed.period_first_day \n)\n\nselect \n    \"liability\" as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom liability\n\nunion all\n\nselect \n    \"asset\" as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom asset\n\nunion all \n\nselect \n    'equity' as balance_sheet_type, \n    round(sum(period_ending_balance),2) as balance \nfrom equity", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.quickbooks.quickbooks__income_statement": {"raw_sql": "with general_ledger_by_period as (\n    select * \n    from {{ ref('quickbooks__general_ledger_by_period') }}\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        round(sum(ending_balance),2) \n    from revenue\n),\n\nexpense_total as (\n    select \n        'expene' as income_statement_type, \n        round(sum(ending_balance),2) \n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests", "fqn": ["quickbooks", "analysis", "quickbooks__income_statement"], "unique_id": "analysis.quickbooks.quickbooks__income_statement", "package_name": "quickbooks", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks", "path": "analysis/quickbooks__income_statement.sql", "original_file_path": "analysis/quickbooks__income_statement.sql", "name": "quickbooks__income_statement", "resource_type": "analysis", "alias": "quickbooks__income_statement", "checksum": {"name": "sha256", "checksum": "755bc63e2476b34130830d76852ba8dafd2ee371c0e4e6bc60d35bd2046d3b87"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["quickbooks__general_ledger_by_period"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.quickbooks.quickbooks__general_ledger_by_period"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks/analysis/quickbooks__income_statement.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with general_ledger_by_period as (\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests`.`quickbooks__general_ledger_by_period`\n),\n\nrevenue as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Revenue'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nexpense as (\n    select \n        account_id, \n        sum(period_net_change) as ending_balance \n    from general_ledger_by_period\n\n    where account_class = 'Expense'\n        and period_first_day between 'YYYY-MM-DD' and 'YYYY-MM-DD' --Update 'YYYY-MM-DD' to be your desired date period.\n\n    group by 1\n),\n\nrevenue_total as (\n    select \n        'revenue' as income_statement_type, \n        round(sum(ending_balance),2) \n    from revenue\n),\n\nexpense_total as (\n    select \n        'expene' as income_statement_type, \n        round(sum(ending_balance),2) \n    from expense\n)\n\nselect * \nfrom revenue_total\n\nunion all \n\nselect * \nfrom expense_total", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.quickbooks_source.stg_quickbooks__journal_entry_line": {"raw_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__journal_entry_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__journal_entry_line_tmp')),\n                staging_columns=get_journal_entry_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as {{ dbt_utils.type_string() }}) as journal_entry_id,\n        index,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        amount,\n        customer_id,\n        department_id,\n        class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as {{ dbt_utils.type_string() }}) as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__journal_entry_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__journal_entry_line.sql", "original_file_path": "models/stg_quickbooks__journal_entry_line.sql", "name": "stg_quickbooks__journal_entry_line", "resource_type": "model", "alias": "stg_quickbooks__journal_entry_line", "checksum": {"name": "sha256", "checksum": "cc62e6db510aa85fd830f285ae6cdc76de14edab2fcaa631172a145301270bc3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__journal_entry_line_tmp"], ["stg_quickbooks__journal_entry_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_journal_entry_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"]}, "description": "Individual line items of a transaction associated with a journal entry.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the journal entry is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_status": {"name": "billable_status", "description": "Status of the journal entry indicating whether it is billable or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__journal_entry_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billable_status\n    \n as \n    \n    billable_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    posting_type\n    \n as \n    \n    posting_type\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_applicable_on\n    \n as \n    \n    tax_applicable_on\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(journal_entry_id as \n    int64\n) as journal_entry_id,\n        index,\n        cast(account_id as \n    int64\n) as account_id,\n        amount,\n        customer_id,\n        department_id,\n        class_id,\n        description,\n        billable_status,\n        posting_type,\n        cast(vendor_id as \n    int64\n) as vendor_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line`"}, "model.quickbooks_source.stg_quickbooks__transfer": {"raw_sql": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_transfer', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__transfer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__transfer_tmp')),\n                staging_columns=get_transfer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as transfer_id,\n        amount,\n        cast(from_account_id as {{ dbt_utils.type_string() }}) as from_account_id,\n        cast(to_account_id as {{ dbt_utils.type_string() }}) as to_account_id,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__transfer"], "unique_id": "model.quickbooks_source.stg_quickbooks__transfer", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__transfer.sql", "original_file_path": "models/stg_quickbooks__transfer.sql", "name": "stg_quickbooks__transfer", "resource_type": "model", "alias": "stg_quickbooks__transfer", "checksum": {"name": "sha256", "checksum": "a154b134773fcb467413454de938a795f9b1c0a17e3db667563ca4ab657dbf1d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__transfer_tmp"], ["stg_quickbooks__transfer_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_transfer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer_tmp", "model.quickbooks_source.stg_quickbooks__transfer_tmp"]}, "description": "Table containing records of transfers. A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts.", "columns": {"transfer_id": {"name": "transfer_id", "description": "Unique identifier of the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_account_id": {"name": "from_account_id", "description": "Account id of the account which the transfer is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_account_id": {"name": "to_account_id", "description": "Account id of the account which the transfer is to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the transfer occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__transfer.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    from_account_id\n    \n as \n    \n    from_account_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    to_account_id\n    \n as \n    \n    to_account_id\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as transfer_id,\n        amount,\n        cast(from_account_id as \n    int64\n) as from_account_id,\n        cast(to_account_id as \n    int64\n) as to_account_id,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer`"}, "model.quickbooks_source.stg_quickbooks__bill_payment_line": {"raw_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_payment_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_payment_line_tmp')),\n                staging_columns=get_bill_payment_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as {{ dbt_utils.type_string() }}) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as {{ dbt_utils.type_string() }}) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bill_payment_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bill_payment_line.sql", "original_file_path": "models/stg_quickbooks__bill_payment_line.sql", "name": "stg_quickbooks__bill_payment_line", "resource_type": "model", "alias": "stg_quickbooks__bill_payment_line", "checksum": {"name": "sha256", "checksum": "07f2291a80ba273988245a5c8497aa3ef3186aae615fe5e02d8c9a85dab1d38e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_payment_line_tmp"], ["stg_quickbooks__bill_payment_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_payment_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"]}, "description": "", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "The unique identifier of the bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of payments associated with the parent bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the purchase record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linked_bill_payment_id": {"name": "linked_bill_payment_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor_credit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_payment_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_credit_card_id\n    \n as \n    \n    bill_payment_credit_card_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    linked_bill_payment_id\n    \n as \n    \n    linked_bill_payment_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_payment_id as \n    int64\n) as bill_payment_id,\n        index,\n        amount,\n        cast(bill_id as \n    int64\n) as bill_id,\n        deposit_id,\n        expense_id,\n        journal_entry_id,\n        linked_bill_payment_id,\n        vendor_credit_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line`"}, "model.quickbooks_source.stg_quickbooks__payment_line": {"raw_sql": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_payment', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__payment_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__payment_line_tmp')),\n                staging_columns=get_payment_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as {{ dbt_utils.type_string() }}) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as {{ dbt_utils.type_string() }}) as invoice_id,\n        credit_memo_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__payment_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__payment_line.sql", "original_file_path": "models/stg_quickbooks__payment_line.sql", "name": "stg_quickbooks__payment_line", "resource_type": "model", "alias": "stg_quickbooks__payment_line", "checksum": {"name": "sha256", "checksum": "6a058428fc2c2f470f683982c6c474509fce6127df1d140c63053c7f41edfb97"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__payment_line_tmp"], ["stg_quickbooks__payment_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_payment_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp", "model.quickbooks_source.stg_quickbooks__payment_line_tmp"]}, "description": "Table containing individual line items recorded within a payment.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the payment line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Journal entry reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Deposit reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_memo_id": {"name": "credit_memo_id", "description": "credit memo reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__payment_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    check_id\n    \n as \n    \n    check_id\n    \n, \n    \n    \n    credit_card_charge_id\n    \n as \n    \n    credit_card_charge_id\n    \n, \n    \n    \n    credit_card_credit_id\n    \n as \n    \n    credit_card_credit_id\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(payment_id as \n    int64\n) as payment_id,\n        index,\n        amount,\n        journal_entry_id,\n        deposit_id,\n        cast(invoice_id as \n    int64\n) as invoice_id,\n        credit_memo_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line`"}, "model.quickbooks_source.stg_quickbooks__vendor": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_tmp')),\n                staging_columns=get_vendor_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__vendor"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__vendor.sql", "original_file_path": "models/stg_quickbooks__vendor.sql", "name": "stg_quickbooks__vendor", "resource_type": "model", "alias": "stg_quickbooks__vendor", "checksum": {"name": "sha256", "checksum": "2a74056af543a188ddbdceb1fd6133c07aa73a8ee6c4d642132294ac5d7569dc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__vendor_tmp"], ["stg_quickbooks__vendor_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_tmp", "model.quickbooks_source.stg_quickbooks__vendor_tmp"]}, "description": "Table containing all vendor records. A vendor is the seller from whom your company purchases any service or product.", "columns": {"vendor_id": {"name": "vendor_id", "description": "Unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Name or number of the account associated with this vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Address reference for the billing address of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the vendor is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company associated with the person or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this vendor are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "The name of the vendor as displayed. Must be unique across all Vendor, Customer, and Employee objects.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_url": {"name": "web_url", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_vendor_1099": {"name": "is_vendor_1099", "description": "Boolean indicating whether this vendor is an independent contractor; someone who is given a 1099-MISC form at the end of the year.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone\n    \n as \n    \n    alternate_phone\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    other_contacts\n    \n as \n    \n    other_contacts\n    \n, \n    \n    \n    primary_phone\n    \n as \n    \n    primary_phone\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_identifier\n    \n as \n    \n    tax_identifier\n    \n, \n    \n    \n    term_id\n    \n as \n    \n    term_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_1099\n    \n as \n    \n    vendor_1099\n    \n, \n    \n    \n    web_url\n    \n as \n    \n    web_url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as vendor_id,\n        account_number,\n        active as is_active,\n        balance,\n        billing_address_id,\n        company_name,\n        created_at,\n        currency_id,\n        display_name,\n        web_url,\n        vendor_1099 as is_vendor_1099\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`"}, "model.quickbooks_source.stg_quickbooks__invoice_line": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_line_tmp')),\n                staging_columns=get_invoice_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt_utils.type_string() }}) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as {{ dbt_utils.type_string() }}) as sales_item_account_id,\n        cast(sales_item_item_id as {{ dbt_utils.type_string() }}) as sales_item_item_id,\n        sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        discount_account_id,\n        discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as {{ dbt_utils.type_string() }}) as bundle_id,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(item_id as {{ dbt_utils.type_string() }}) as item_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__invoice_line.sql", "original_file_path": "models/stg_quickbooks__invoice_line.sql", "name": "stg_quickbooks__invoice_line", "resource_type": "model", "alias": "stg_quickbooks__invoice_line", "checksum": {"name": "sha256", "checksum": "3c23560119916dd4ea16ce99acb2dc98532e5fd2c36465ae7612293b1d9d9d15"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice_line_tmp"], ["stg_quickbooks__invoice_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "model.quickbooks_source.stg_quickbooks__invoice_line_tmp"]}, "description": "Table containing individual records from invoices.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the invoice line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Class reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Account reference for a discount invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class reference for a discount invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bundle_quantity": {"name": "bundle_quantity", "description": "Quantity of items included in the invoice bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "Reference to the bundle associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item included on the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as \n    int64\n) as invoice_id,\n        index,\n        amount,\n        cast(sales_item_account_id as \n    int64\n) as sales_item_account_id,\n        cast(sales_item_item_id as \n    int64\n) as sales_item_item_id,\n        sales_item_class_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        discount_account_id,\n        discount_class_id,\n        description,\n        quantity,\n        bundle_quantity,\n        cast(bundle_id as \n    int64\n) as bundle_id,\n        cast(account_id as \n    int64\n) as account_id,\n        cast(item_id as \n    int64\n) as item_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line`"}, "model.quickbooks_source.stg_quickbooks__estimate": {"raw_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__estimate_tmp') }}\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__estimate_tmp')),\n                staging_columns=get_estimate_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as estimate_id,\n        class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        department_id,\n        due_date,\n        total_amount,\n        transaction_date,\n        transaction_status,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__estimate"], "unique_id": "model.quickbooks_source.stg_quickbooks__estimate", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__estimate.sql", "original_file_path": "models/stg_quickbooks__estimate.sql", "name": "stg_quickbooks__estimate", "resource_type": "model", "alias": "stg_quickbooks__estimate", "checksum": {"name": "sha256", "checksum": "48154e452b4048a2225907e2d0211003a830140a388cc7c45a3c02ea5462169f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__estimate_tmp"], ["stg_quickbooks__estimate_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_estimate_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_tmp", "model.quickbooks_source.stg_quickbooks__estimate_tmp"]}, "description": "Table containing estimates. An estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Unique identifier of the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the estimate record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the estimate was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the estimate was provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date which the estimate is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount of all line items included in the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the estimate occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Current status of the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__estimate.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_tmp`\n\n),\n \nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accepted_by\n    \n as \n    \n    accepted_by\n    \n, \n    \n    \n    accepted_date\n    \n as \n    \n    accepted_date\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    expiration_date\n    \n as \n    \n    expiration_date\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as estimate_id,\n        class_id,\n        created_at,\n        currency_id,\n        customer_id,\n        department_id,\n        due_date,\n        total_amount,\n        transaction_date,\n        transaction_status,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate`"}, "model.quickbooks_source.stg_quickbooks__credit_memo_line": {"raw_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__credit_memo_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__credit_memo_line_tmp')),\n                staging_columns=get_credit_memo_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as {{ dbt_utils.type_string() }}) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as {{ dbt_utils.type_string() }}) as sales_item_account_id,\n        cast(sales_item_item_id as {{ dbt_utils.type_string() }}) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as {{ dbt_utils.type_string() }}) as discount_account_id,\n        discount_class_id,\n        description\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__credit_memo_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__credit_memo_line.sql", "original_file_path": "models/stg_quickbooks__credit_memo_line.sql", "name": "stg_quickbooks__credit_memo_line", "resource_type": "model", "alias": "stg_quickbooks__credit_memo_line", "checksum": {"name": "sha256", "checksum": "bc08c4f710a8e71b1834590a24ac78e53fc5278e755816fb394646223409c525"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__credit_memo_line_tmp"], ["stg_quickbooks__credit_memo_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_credit_memo_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"]}, "description": "Table containing individual records of credit memos.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier of the credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account reference for an item credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item reference for an item credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of item related to the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item related to the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Account reference for a discount credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class reference for a discount credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__credit_memo_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    credit_memo_id\n    \n as \n    \n    credit_memo_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(credit_memo_id as \n    int64\n) as credit_memo_id,\n        index,\n        amount,\n        cast(sales_item_account_id as \n    int64\n) as sales_item_account_id,\n        cast(sales_item_item_id as \n    int64\n) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        cast(discount_account_id as \n    int64\n) as discount_account_id,\n        discount_class_id,\n        description\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line`"}, "model.quickbooks_source.stg_quickbooks__bundle": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bundle_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bundle_tmp')),\n                staging_columns=get_bundle_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at\n\n    from fields\n)\n\nselect * from final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bundle"], "unique_id": "model.quickbooks_source.stg_quickbooks__bundle", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bundle.sql", "original_file_path": "models/stg_quickbooks__bundle.sql", "name": "stg_quickbooks__bundle", "resource_type": "model", "alias": "stg_quickbooks__bundle", "checksum": {"name": "sha256", "checksum": "bfffe908d8c80d59eae1e472df0766f4cdefff07760fb6d447ec666c7338fb7b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bundle_tmp"], ["stg_quickbooks__bundle_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bundle_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_tmp", "model.quickbooks_source.stg_quickbooks__bundle_tmp"]}, "description": "Table containing all bundles possible to be used within an invoice.", "columns": {"bundle_id": {"name": "bundle_id", "description": "Unique identifier of the bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the bundle was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the bundle is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name given to the bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the bundle was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bundle.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    print_grouped_items\n    \n as \n    \n    print_grouped_items\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as bundle_id,\n        created_at,\n        active as is_active,\n        fully_qualified_name,\n        updated_at\n\n    from fields\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle`"}, "model.quickbooks_source.stg_quickbooks__department": {"raw_sql": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_department', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__department_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__department_tmp')),\n                staging_columns=get_department_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__department"], "unique_id": "model.quickbooks_source.stg_quickbooks__department", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__department.sql", "original_file_path": "models/stg_quickbooks__department.sql", "name": "stg_quickbooks__department", "resource_type": "model", "alias": "stg_quickbooks__department", "checksum": {"name": "sha256", "checksum": "2be93e7cc41f15b54e16e9dcf3fa931ca96aa0c49cafee6b61af10a8938a063f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__department_tmp"], ["stg_quickbooks__department_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_department_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.quickbooks_source.stg_quickbooks__department_tmp", "model.quickbooks_source.stg_quickbooks__department_tmp"]}, "description": "Table containing records representing physical locations such as stores, and sales regions.", "columns": {"department_id": {"name": "department_id", "description": "Unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the department is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the department was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the department was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_department": {"name": "is_sub_department", "description": "Boolean indicating whether the department is a sub department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_department_id": {"name": "parent_department_id", "description": "Reference to the unique identifier of the parent department if is_sub_department = true.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__department.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_department_id\n    \n as \n    \n    parent_department_id\n    \n, \n    \n    \n    sub_department\n    \n as \n    \n    sub_department\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as department_id,\n        active as is_active,\n        created_at,\n        updated_at,\n        fully_qualified_name,\n        name,\n        sub_department as is_sub_department,\n        parent_department_id\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department`"}, "model.quickbooks_source.stg_quickbooks__purchase_line": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_line_tmp')),\n                staging_columns=get_purchase_line_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as {{ dbt_utils.type_string() }}) as purchase_id,\n        index,\n        cast(account_expense_account_id as {{ dbt_utils.type_string() }}) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as {{ dbt_utils.type_string() }}) as item_expense_item_id,\n        item_expense_billable_status,\n        item_expense_customer_id,\n        amount,\n        description\n    from fields\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__purchase_line.sql", "original_file_path": "models/stg_quickbooks__purchase_line.sql", "name": "stg_quickbooks__purchase_line", "resource_type": "model", "alias": "stg_quickbooks__purchase_line", "checksum": {"name": "sha256", "checksum": "2f38e705cc108f5c9ad72d7c7f3932e8698d2a2d80ada35a5772b4be72658fab"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase_line_tmp"], ["stg_quickbooks__purchase_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "model.quickbooks_source.stg_quickbooks__purchase_line_tmp"]}, "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer id associated with the account based expense purchase line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer id associated with the item based expense purchase line", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_id as \n    int64\n) as purchase_id,\n        index,\n        cast(account_expense_account_id as \n    int64\n) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as \n    int64\n) as item_expense_item_id,\n        item_expense_billable_status,\n        item_expense_customer_id,\n        amount,\n        description\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line`"}, "model.quickbooks_source.stg_quickbooks__purchase": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__purchase_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_tmp')),\n                staging_columns=get_purchase_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as purchase_id,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        created_at,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        department_id,\n        customer_id,\n        cast(vendor_id as {{ dbt_utils.type_string() }}) as vendor_id,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__purchase"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__purchase.sql", "original_file_path": "models/stg_quickbooks__purchase.sql", "name": "stg_quickbooks__purchase", "resource_type": "model", "alias": "stg_quickbooks__purchase", "checksum": {"name": "sha256", "checksum": "dfd0a3e02fa435223cc77e553ce8a991aec851e1896fb6afa76c5776d502f986"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase_tmp"], ["stg_quickbooks__purchase_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_tmp", "model.quickbooks_source.stg_quickbooks__purchase_tmp"]}, "description": "Table containing records of purchase expenses.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Boolean where `false` represents a charge and `true` represents a refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the purchase is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer which the purchase is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__purchase.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit\n    \n as \n    \n    credit\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    employee_id\n    \n as \n    \n    employee_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remit_to_address_id\n    \n as \n    \n    remit_to_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n     \n    select \n        cast(id as \n    int64\n) as purchase_id,\n        cast(account_id as \n    int64\n) as account_id,\n        created_at,\n        cast(doc_number as \n    string\n) as doc_number,\n        currency_id,\n        exchange_rate,\n        credit,\n        total_amount,\n        payment_type,\n        department_id,\n        customer_id,\n        cast(vendor_id as \n    int64\n) as vendor_id,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`"}, "model.quickbooks_source.stg_quickbooks__refund_receipt_line": {"raw_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__refund_receipt_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__refund_receipt_line_tmp')),\n                staging_columns=get_refund_receipt_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as {{ dbt_utils.type_string() }}) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as {{ dbt_utils.type_string() }}) as discount_account_id,\n        cast(sales_item_account_id as {{ dbt_utils.type_string() }}) as sales_item_account_id,\n        cast(sales_item_item_id as {{ dbt_utils.type_string() }}) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__refund_receipt_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__refund_receipt_line.sql", "original_file_path": "models/stg_quickbooks__refund_receipt_line.sql", "name": "stg_quickbooks__refund_receipt_line", "resource_type": "model", "alias": "stg_quickbooks__refund_receipt_line", "checksum": {"name": "sha256", "checksum": "e175a6a7b27b109ede60ca38040b605d954a8cd286d1986618a503666cf1d389"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__refund_receipt_line_tmp"], ["stg_quickbooks__refund_receipt_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_refund_receipt_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"]}, "description": "Table containing individual line items of a refund transaction.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the refund record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the refund line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the refund line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account which the refund is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the refunded item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__refund_receipt_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    refund_id\n    \n as \n    \n    refund_id\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(refund_id as \n    int64\n) as refund_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as \n    int64\n) as discount_account_id,\n        cast(sales_item_account_id as \n    int64\n) as sales_item_account_id,\n        cast(sales_item_item_id as \n    int64\n) as sales_item_item_id,\n        sales_item_quantity,\n        sales_item_unit_price,\n        sales_item_tax_code_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`"}, "model.quickbooks_source.stg_quickbooks__bundle_item": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bundle_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bundle_item_tmp')),\n                staging_columns=get_bundle_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as {{ dbt_utils.type_string() }}) as bundle_id,\n        cast(item_id as {{ dbt_utils.type_string() }}) as item_id,\n        item_quantity\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bundle_item"], "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bundle_item.sql", "original_file_path": "models/stg_quickbooks__bundle_item.sql", "name": "stg_quickbooks__bundle_item", "resource_type": "model", "alias": "stg_quickbooks__bundle_item", "checksum": {"name": "sha256", "checksum": "2624a01c121773dffa838b3a3d53f3d3310f5d6eb85195f11da3bca108a2010a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bundle_item_tmp"], ["stg_quickbooks__bundle_item_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bundle_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "model.quickbooks_source.stg_quickbooks__bundle_item_tmp"]}, "description": "Mapping table containing all bundle and item combinations", "columns": {"bundle_id": {"name": "bundle_id", "description": "Reference to the bundle table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item which the bundle is mapped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_quantity": {"name": "item_quantity", "description": "Total item quantity associated with the bunlde and item mapping.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bundle_item.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_item_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    item_quantity\n    \n as \n    \n    item_quantity\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bundle_id as \n    int64\n) as bundle_id,\n        cast(item_id as \n    int64\n) as item_id,\n        item_quantity\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_item`"}, "model.quickbooks_source.stg_quickbooks__credit_memo": {"raw_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__credit_memo_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__credit_memo_tmp')),\n                staging_columns=get_credit_memo_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as credit_memo_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        class_id,\n        department_id,\n        customer_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__credit_memo"], "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__credit_memo.sql", "original_file_path": "models/stg_quickbooks__credit_memo.sql", "name": "stg_quickbooks__credit_memo", "resource_type": "model", "alias": "stg_quickbooks__credit_memo", "checksum": {"name": "sha256", "checksum": "5be2ca2c333e9a2df1f5b7155e9a2b6cb83dd930b5377e313502f0fbca543f09"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__credit_memo_tmp"], ["stg_quickbooks__credit_memo_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_credit_memo_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "model.quickbooks_source.stg_quickbooks__credit_memo_tmp"]}, "description": "Table containing credit memo records. A credit memo is a refund or credit of payment or part of a payment for goods or services that have been sold.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier for a credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the credit memo occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__credit_memo.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_credit_memo variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    remaining_credit\n    \n as \n    \n    remaining_credit\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as credit_memo_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        total_amount,\n        currency_id,\n        class_id,\n        department_id,\n        customer_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo`"}, "model.quickbooks_source.stg_quickbooks__sales_receipt_line": {"raw_sql": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__sales_receipt_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__sales_receipt_line_tmp')),\n                staging_columns=get_sales_receipt_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as {{ dbt_utils.type_string() }}) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as {{ dbt_utils.type_string() }}) as discount_account_id,\n        cast(sales_item_account_id as {{ dbt_utils.type_string() }}) as sales_item_account_id,\n        cast(sales_item_item_id as {{ dbt_utils.type_string() }}) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price \n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__sales_receipt_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__sales_receipt_line.sql", "original_file_path": "models/stg_quickbooks__sales_receipt_line.sql", "name": "stg_quickbooks__sales_receipt_line", "resource_type": "model", "alias": "stg_quickbooks__sales_receipt_line", "checksum": {"name": "sha256", "checksum": "d5f46220d3dbd754bd547e69d045b939f5932d049031971fccd67bea686a9cc1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__sales_receipt_line_tmp"], ["stg_quickbooks__sales_receipt_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_sales_receipt_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"]}, "description": "Table containing individual line items of a sales transaction.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the sales record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the sales receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account credited with the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the item sold in the sale line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity of items included in the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item included on the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__sales_receipt_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(sales_receipt_id as \n    int64\n) as sales_receipt_id,\n        index,\n        amount,\n        description,\n        cast(discount_account_id as \n    int64\n) as discount_account_id,\n        cast(sales_item_account_id as \n    int64\n) as sales_item_account_id,\n        cast(sales_item_item_id as \n    int64\n) as sales_item_item_id,\n        sales_item_tax_code_id,\n        sales_item_quantity,\n        sales_item_unit_price \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`"}, "model.quickbooks_source.stg_quickbooks__sales_receipt": {"raw_sql": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__sales_receipt_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__sales_receipt_tmp')),\n                staging_columns=get_sales_receipt_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as sales_receipt_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as {{ dbt_utils.type_string() }}) as deposit_to_account_id,\n        created_at,\n        customer_id,\n        department_id,\n        class_id,\n        currency_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__sales_receipt"], "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__sales_receipt.sql", "original_file_path": "models/stg_quickbooks__sales_receipt.sql", "name": "stg_quickbooks__sales_receipt", "resource_type": "model", "alias": "stg_quickbooks__sales_receipt", "checksum": {"name": "sha256", "checksum": "16e6bb7f7b68a0b95b535ccc9a45414bb57985ecc411620bb5fb5935c81406ef"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__sales_receipt_tmp"], ["stg_quickbooks__sales_receipt_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_sales_receipt_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"]}, "description": "Table containing sales receipts that are given to a customer. A sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer's payment is deposited.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales receipt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account to which payment money is deposited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the sale was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the sold to customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the sales receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the sales receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the sale occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__sales_receipt.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as sales_receipt_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        total_amount,\n        cast(deposit_to_account_id as \n    int64\n) as deposit_to_account_id,\n        created_at,\n        customer_id,\n        department_id,\n        class_id,\n        currency_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt`"}, "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_linked_txn_tmp')),\n                staging_columns=get_invoice_linked_txn_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt_utils.type_string() }}) as invoice_id,\n        cast(payment_id as {{ dbt_utils.type_string() }}) as payment_id,\n        cast(estimate_id as {{ dbt_utils.type_string() }}) as estimate_id,\n        index\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_linked_txn"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__invoice_linked_txn.sql", "original_file_path": "models/stg_quickbooks__invoice_linked_txn.sql", "name": "stg_quickbooks__invoice_linked_txn", "resource_type": "model", "alias": "stg_quickbooks__invoice_linked_txn", "checksum": {"name": "sha256", "checksum": "aff2dba72f10b7876d4595f2255c089ebcaf3fe08b54bbb000a7cfc1450402e2"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice_linked_txn_tmp"], ["stg_quickbooks__invoice_linked_txn_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"]}, "description": "Mapping table for invoices records to respective estimate and payment objects.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Reference to the unique invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "Reference to the respective payment object for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimate_id": {"name": "estimate_id", "description": "Reference to the respective estimate object for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice mapping record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_linked_txn.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    charge_credit_id\n    \n as \n    \n    charge_credit_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    reimburse_charge_id\n    \n as \n    \n    reimburse_charge_id\n    \n, \n    \n    \n    statement_charge_id\n    \n as \n    \n    statement_charge_id\n    \n, \n    \n    \n    time_activity_id\n    \n as \n    \n    time_activity_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as \n    int64\n) as invoice_id,\n        cast(payment_id as \n    int64\n) as payment_id,\n        cast(estimate_id as \n    int64\n) as estimate_id,\n        index\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`"}, "model.quickbooks_source.stg_quickbooks__invoice": {"raw_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as invoice_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        department_id,\n        cast(deposit_to_account_id as {{ dbt_utils.type_string() }}) as deposit_to_account_id,\n        exchange_rate,\n        transaction_date,\n        customer_id,\n        billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        due_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__invoice"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__invoice.sql", "original_file_path": "models/stg_quickbooks__invoice.sql", "name": "stg_quickbooks__invoice", "resource_type": "model", "alias": "stg_quickbooks__invoice", "checksum": {"name": "sha256", "checksum": "fca3c91479c7bcc66866ce046852ce745b6a904dcdc08912e40d2e1e44af7cd4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice_tmp"], ["stg_quickbooks__invoice_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_tmp", "model.quickbooks_source.stg_quickbooks__invoice_tmp"]}, "description": "Table containing invoice records. An Invoice represents a sales form where the customer pays for a product or service later.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer reference is associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Reference to the address where the invoice is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Reference to the address where the invoice is to be shipped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_type": {"name": "delivery_type", "description": "How the invoice is delivered to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date which the invoice payment is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_ipnpayment\n    \n as \n    \n    allow_ipnpayment\n    \n, \n    \n    \n    allow_online_achpayment\n    \n as \n    \n    allow_online_achpayment\n    \n, \n    \n    \n    allow_online_credit_card_payment\n    \n as \n    \n    allow_online_credit_card_payment\n    \n, \n    \n    \n    allow_online_payment\n    \n as \n    \n    allow_online_payment\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    billing_bcc_email\n    \n as \n    \n    billing_bcc_email\n    \n, \n    \n    \n    billing_cc_email\n    \n as \n    \n    billing_cc_email\n    \n, \n    \n    \n    billing_email\n    \n as \n    \n    billing_email\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    custom_p_o_number\n    \n as \n    \n    custom_p_o_number\n    \n, \n    \n    \n    custom_sales_rep\n    \n as \n    \n    custom_sales_rep\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    delivery_time\n    \n as \n    \n    delivery_time\n    \n, \n    \n    \n    delivery_type\n    \n as \n    \n    delivery_type\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit\n    \n as \n    \n    deposit\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    email_status\n    \n as \n    \n    email_status\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    ship_date\n    \n as \n    \n    ship_date\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    tracking_number\n    \n as \n    \n    tracking_number\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as invoice_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        total_amount,\n        currency_id,\n        department_id,\n        cast(deposit_to_account_id as \n    int64\n) as deposit_to_account_id,\n        exchange_rate,\n        transaction_date,\n        customer_id,\n        billing_address_id,\n        shipping_address_id,\n        delivery_type,\n        due_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`"}, "model.quickbooks_source.stg_quickbooks__bill_payment": {"raw_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_payment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_payment_tmp')),\n                staging_columns=get_bill_payment_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as bill_payment_id,\n        cast(check_bank_account_id as {{ dbt_utils.type_string() }}) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as {{ dbt_utils.type_string() }}) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        department_id,\n        pay_type,\n        total_amount,\n        transaction_date,\n        vendor_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bill_payment"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bill_payment.sql", "original_file_path": "models/stg_quickbooks__bill_payment.sql", "name": "stg_quickbooks__bill_payment", "resource_type": "model", "alias": "stg_quickbooks__bill_payment", "checksum": {"name": "sha256", "checksum": "226c8de9352b518733b100a5fd098df27c120af5f11da95e5298e747a126b35c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_payment_tmp"], ["stg_quickbooks__bill_payment_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_payment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "model.quickbooks_source.stg_quickbooks__bill_payment_tmp"]}, "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "Unique identifier of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "check_bank_account_id": {"name": "check_bank_account_id", "description": "Account id of the account which the bill payment is credited. Only applicable if bill payment `pay_type` is of type check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "check_print_status": {"name": "check_print_status", "description": "Status of the check which was used as payment for the bill. Only applicable if bill payment `pay_type` is of type Check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "Account id of the account which the bill is credited. Only applicable if bill payment `pay_type` is of type CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by CurrencyRef. Applicable if multicurrency is enabled for the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to a Department object specifying the location of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount associated with this payment. This includes the total of all the payments from the payment line details.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the day the transaction took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_payment.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    check_bank_account_id\n    \n as \n    \n    check_bank_account_id\n    \n, \n    \n    \n    check_print_status\n    \n as \n    \n    check_print_status\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_account_id\n    \n as \n    \n    credit_card_account_id\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    pay_type\n    \n as \n    \n    pay_type\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_bill_payment\n    \n as \n    \n    process_bill_payment\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as bill_payment_id,\n        cast(check_bank_account_id as \n    int64\n) as check_bank_account_id,\n        check_print_status,\n        cast(credit_card_account_id as \n    int64\n) as credit_card_account_id,\n        exchange_rate,\n        currency_id,\n        department_id,\n        pay_type,\n        total_amount,\n        transaction_date,\n        vendor_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment`"}, "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__invoice_line_bundle_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__invoice_line_bundle_tmp')),\n                staging_columns=get_invoice_line_bundle_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as {{ dbt_utils.type_string() }}) as invoice_id,\n        index,\n        class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as {{ dbt_utils.type_string() }}) as sales_item_item_id,\n        cast(item_id as {{ dbt_utils.type_string() }}) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        unit_price,\n        invoice_line_index\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__invoice_line_bundle"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__invoice_line_bundle.sql", "original_file_path": "models/stg_quickbooks__invoice_line_bundle.sql", "name": "stg_quickbooks__invoice_line_bundle", "resource_type": "model", "alias": "stg_quickbooks__invoice_line_bundle", "checksum": {"name": "sha256", "checksum": "27e8489f753e4b74d7ef89e3e0e3b863f684b6f3582e62402b21a70d3c765a4d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__invoice_line_bundle_tmp"], ["stg_quickbooks__invoice_line_bundle_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_invoice_line_bundle_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"]}, "description": "Table containing lines of an invoice which were bundled.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_line_index": {"name": "invoice_line_index", "description": "Index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the invoice line bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total monetary value of the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Total quantity of the item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity in relation to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the line item included on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__invoice_line_bundle.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_amount\n    \n as \n    \n    discount_amount\n    \n, \n    \n    \n    discount_rate\n    \n as \n    \n    discount_rate\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_line_index\n    \n as \n    \n    invoice_line_index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    line_num\n    \n as \n    \n    line_num\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(invoice_id as \n    int64\n) as invoice_id,\n        index,\n        class_id,\n        description,\n        amount,\n        cast(sales_item_item_id as \n    int64\n) as sales_item_item_id,\n        cast(item_id as \n    int64\n) as item_id,\n        quantity,\n        sales_item_quantity,\n        cast(account_id as \n    int64\n) as account_id,\n        unit_price,\n        invoice_line_index\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`"}, "model.quickbooks_source.stg_quickbooks__account": {"raw_sql": "with base as (\n    select *\n    from {{ ref('stg_quickbooks__account_tmp') }}\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt_utils.type_string() }}) as account_id,\n        cast(account_number as {{ dbt_utils.type_string() }}) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as {{ dbt_utils.type_string() }}) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at\n\n    from base\n)\n\nselect *\nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__account"], "unique_id": "model.quickbooks_source.stg_quickbooks__account", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__account.sql", "original_file_path": "models/stg_quickbooks__account.sql", "name": "stg_quickbooks__account", "resource_type": "model", "alias": "stg_quickbooks__account", "checksum": {"name": "sha256", "checksum": "a0e1e1884403423313ecd07e46838315be796f73177b7c35cd99bfe69f445efa"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__account_tmp"], ["stg_quickbooks__account_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__account_tmp", "model.quickbooks_source.stg_quickbooks__account_tmp"]}, "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.\n", "columns": {"account_id": {"name": "account_id", "description": "Unique identifier for an account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_sub_account": {"name": "is_sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__account.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account_tmp`\n\n),\n\naccount as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_sub_type\n    \n as \n    \n    account_sub_type\n    \n, \n    \n    \n    account_type\n    \n as \n    \n    account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_sub_accounts\n    \n as \n    \n    balance_with_sub_accounts\n    \n, \n    \n    \n    classification\n    \n as \n    \n    classification\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    sub_account\n    \n as \n    \n    sub_account\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as \n    int64\n) as account_id,\n        cast(account_number as \n    string\n) as account_number,\n        sub_account as is_sub_account,\n        cast(parent_account_id as \n    int64\n) as parent_account_id,\n        name,\n        account_type,\n        account_sub_type,\n        classification,\n        balance,\n        balance_with_sub_accounts,\n        active as is_active,\n        created_at,\n        currency_id,\n        description,\n        fully_qualified_name,\n        updated_at\n\n    from base\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`"}, "model.quickbooks_source.stg_quickbooks__payment": {"raw_sql": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_payment', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__payment_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__payment_tmp')),\n                staging_columns=get_payment_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as {{ dbt_utils.type_string() }}) as receivable_account_id,\n        cast(deposit_to_account_id as {{ dbt_utils.type_string() }}) as deposit_to_account_id,\n        exchange_rate,\n        transaction_date,\n        customer_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__payment"], "unique_id": "model.quickbooks_source.stg_quickbooks__payment", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__payment.sql", "original_file_path": "models/stg_quickbooks__payment.sql", "name": "stg_quickbooks__payment", "resource_type": "model", "alias": "stg_quickbooks__payment", "checksum": {"name": "sha256", "checksum": "2ef72227933461ec2104e4a3e2a239788fff56cf97ee9b3fe3671a4d4ad9a138"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__payment_tmp"], ["stg_quickbooks__payment_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_payment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_tmp", "model.quickbooks_source.stg_quickbooks__payment_tmp"]}, "description": "Table containing all payment records. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "Indicates the amount that has not been applied to pay amounts owed for sales transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivable_account_id": {"name": "receivable_account_id", "description": "Identifies the account for obtaining a receivable from this payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the payment occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to a customer or job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__payment.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_payment variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    process_payment\n    \n as \n    \n    process_payment\n    \n, \n    \n    \n    receivable_account_id\n    \n as \n    \n    receivable_account_id\n    \n, \n    \n    \n    reference_number\n    \n as \n    \n    reference_number\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as payment_id,\n        unapplied_amount,\n        total_amount,\n        currency_id,\n        cast(receivable_account_id as \n    int64\n) as receivable_account_id,\n        cast(deposit_to_account_id as \n    int64\n) as deposit_to_account_id,\n        exchange_rate,\n        transaction_date,\n        customer_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment`"}, "model.quickbooks_source.stg_quickbooks__estimate_line": {"raw_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__estimate_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__estimate_line_tmp')),\n                staging_columns=get_estimate_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as {{ dbt_utils.type_string() }}) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        discount_class_id,\n        sales_item_account_id,\n        sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__estimate_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__estimate_line.sql", "original_file_path": "models/stg_quickbooks__estimate_line.sql", "name": "stg_quickbooks__estimate_line", "resource_type": "model", "alias": "stg_quickbooks__estimate_line", "checksum": {"name": "sha256", "checksum": "c6940335302da931eb1b4dfda43f073aa2b5aa7fabd542c6b4e4b869bb35b768"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__estimate_line_tmp"], ["stg_quickbooks__estimate_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_estimate_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "model.quickbooks_source.stg_quickbooks__estimate_line_tmp"]}, "description": "Table containing line item records of an estimate.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Reference to the unique estimate record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the estimate line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to the account associated with the discount estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Reference to the account associated with the sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item associated with a sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for a sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item for the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__estimate_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bundle_id\n    \n as \n    \n    bundle_id\n    \n, \n    \n    \n    bundle_quantity\n    \n as \n    \n    bundle_quantity\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    description_service_date\n    \n as \n    \n    description_service_date\n    \n, \n    \n    \n    description_tax_code_id\n    \n as \n    \n    description_tax_code_id\n    \n, \n    \n    \n    discount_account_id\n    \n as \n    \n    discount_account_id\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_discount_percent\n    \n as \n    \n    discount_discount_percent\n    \n, \n    \n    \n    discount_percent_based\n    \n as \n    \n    discount_percent_based\n    \n, \n    \n    \n    discount_tax_code_id\n    \n as \n    \n    discount_tax_code_id\n    \n, \n    \n    \n    estimate_id\n    \n as \n    \n    estimate_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_id\n    \n as \n    \n    item_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    sales_item_account_id\n    \n as \n    \n    sales_item_account_id\n    \n, \n    \n    \n    sales_item_class_id\n    \n as \n    \n    sales_item_class_id\n    \n, \n    \n    \n    sales_item_discount_amount\n    \n as \n    \n    sales_item_discount_amount\n    \n, \n    \n    \n    sales_item_discount_rate\n    \n as \n    \n    sales_item_discount_rate\n    \n, \n    \n    \n    sales_item_item_id\n    \n as \n    \n    sales_item_item_id\n    \n, \n    \n    \n    sales_item_quantity\n    \n as \n    \n    sales_item_quantity\n    \n, \n    \n    \n    sales_item_service_date\n    \n as \n    \n    sales_item_service_date\n    \n, \n    \n    \n    sales_item_tax_code_id\n    \n as \n    \n    sales_item_tax_code_id\n    \n, \n    \n    \n    sales_item_unit_price\n    \n as \n    \n    sales_item_unit_price\n    \n, \n    \n    \n    sub_total_item_id\n    \n as \n    \n    sub_total_item_id\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(estimate_id as \n    int64\n) as estimate_id,\n        index,\n        description,\n        discount_account_id,\n        discount_class_id,\n        sales_item_account_id,\n        sales_item_class_id,\n        sales_item_item_id,\n        sales_item_quantity,\n        item_id,\n        quantity,\n        account_id,\n        amount\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_line`"}, "model.quickbooks_source.stg_quickbooks__bill_linked_txn": {"raw_sql": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_linked_txn_tmp')),\n                staging_columns=get_bill_linked_txn_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as {{ dbt_utils.type_string() }}) as bill_id,\n        index,\n        cast(bill_payment_id as {{ dbt_utils.type_string() }}) as bill_payment_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bill_linked_txn"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bill_linked_txn.sql", "original_file_path": "models/stg_quickbooks__bill_linked_txn.sql", "name": "stg_quickbooks__bill_linked_txn", "resource_type": "model", "alias": "stg_quickbooks__bill_linked_txn", "checksum": {"name": "sha256", "checksum": "08089a0bed4ef632ed041864401df60b0c56c18f29db09e8e131c1da4d37b8a6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_linked_txn_tmp"], ["stg_quickbooks__bill_linked_txn_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"]}, "description": "", "columns": {"bill_id": {"name": "bill_id", "description": "The unique identifier of the bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a single bill record associated with payment ids.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "The unique identifier of the bill payment id record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_linked_txn.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    bill_payment_id\n    \n as \n    \n    bill_payment_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as \n    int64\n) as bill_id,\n        index,\n        cast(bill_payment_id as \n    int64\n) as bill_payment_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`"}, "model.quickbooks_source.stg_quickbooks__address": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__address_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__address_tmp')),\n                staging_columns=get_address_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__address"], "unique_id": "model.quickbooks_source.stg_quickbooks__address", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__address.sql", "original_file_path": "models/stg_quickbooks__address.sql", "name": "stg_quickbooks__address", "resource_type": "model", "alias": "stg_quickbooks__address", "checksum": {"name": "sha256", "checksum": "ae7a5371c682396448f4cbbfc02fc651f6dbd4761360cd595e0813eb6b3d0f9e"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__address_tmp"], ["stg_quickbooks__address_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_address_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.quickbooks_source.stg_quickbooks__address_tmp", "model.quickbooks_source.stg_quickbooks__address_tmp"]}, "description": "Table containing address details.", "columns": {"address_id": {"name": "address_id", "description": "Unique identifier for an address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The address_line_1 associated with the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The address_line_2 associated with the address (if applicable).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The postal code which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__address.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    country_sub_division_code\n    \n as \n    \n    country_sub_division_code\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    latitude\n    \n as \n    \n    latitude\n    \n, \n    \n    \n    line_1\n    \n as \n    \n    line_1\n    \n, \n    \n    \n    line_2\n    \n as \n    \n    line_2\n    \n, \n    \n    \n    line_3\n    \n as \n    \n    line_3\n    \n, \n    \n    \n    line_4\n    \n as \n    \n    line_4\n    \n, \n    \n    \n    line_5\n    \n as \n    \n    line_5\n    \n, \n    \n    \n    longitude\n    \n as \n    \n    longitude\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as address_id,\n        city,\n        country,\n        line_1 as address_1,\n        line_2 as address_2,\n        postal_code\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address`"}, "model.quickbooks_source.stg_quickbooks__bill": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_tmp')),\n                staging_columns=get_bill_columns()\n            )\n        }}\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as bill_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        currency_id,\n        department_id,\n        due_date as due_date_at,\n        transaction_date,\n        exchange_rate,\n        cast(payable_account_id as {{ dbt_utils.type_string() }}) as payable_account_id,\n        total_amount,\n        cast(vendor_id as {{ dbt_utils.type_string() }}) as vendor_id,\n        private_note,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bill"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bill.sql", "original_file_path": "models/stg_quickbooks__bill.sql", "name": "stg_quickbooks__bill", "resource_type": "model", "alias": "stg_quickbooks__bill", "checksum": {"name": "sha256", "checksum": "fbf8be5ea5848030a93108ab7ed6bc639616edc70845878451ed3098393ad3e3"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_tmp"], ["stg_quickbooks__bill_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_tmp", "model.quickbooks_source.stg_quickbooks__bill_tmp"]}, "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department the bill is linked with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of all bill line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor the bill is linked with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date_at": {"name": "due_date_at", "description": "Timestamp of the date which the bill is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the bill transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n    from base\n),\n \nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as bill_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        currency_id,\n        department_id,\n        due_date as due_date_at,\n        transaction_date,\n        exchange_rate,\n        cast(payable_account_id as \n    int64\n) as payable_account_id,\n        total_amount,\n        cast(vendor_id as \n    int64\n) as vendor_id,\n        private_note,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill`"}, "model.quickbooks_source.stg_quickbooks__bill_line": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__bill_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__bill_line_tmp')),\n                staging_columns=get_bill_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as {{ dbt_utils.type_string() }}) as bill_id,\n        index,\n        cast(account_expense_account_id as {{ dbt_utils.type_string() }}) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        account_expense_customer_id,\n        cast(item_expense_item_id as {{ dbt_utils.type_string() }}) as item_expense_item_id,\n        item_expense_customer_id,\n        item_expense_billable_status,\n        amount,\n        description\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__bill_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__bill_line.sql", "original_file_path": "models/stg_quickbooks__bill_line.sql", "name": "stg_quickbooks__bill_line", "resource_type": "model", "alias": "stg_quickbooks__bill_line", "checksum": {"name": "sha256", "checksum": "f1ef4c1cbe7d7452de8dda72bbe18512b63aeaae7b84b04565f9d5879f34bc7d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__bill_line_tmp"], ["stg_quickbooks__bill_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_bill_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp", "model.quickbooks_source.stg_quickbooks__bill_line_tmp"]}, "description": "", "columns": {"bill_id": {"name": "bill_id", "description": "The unique identifier of the parent bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Bill line index in reference to the parent bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "The tax code id associated with the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the bill line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__bill_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(bill_id as \n    int64\n) as bill_id,\n        index,\n        cast(account_expense_account_id as \n    int64\n) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        account_expense_customer_id,\n        cast(item_expense_item_id as \n    int64\n) as item_expense_item_id,\n        item_expense_customer_id,\n        item_expense_billable_status,\n        amount,\n        description\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line`"}, "model.quickbooks_source.stg_quickbooks__journal_entry": {"raw_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__journal_entry_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__journal_entry_tmp')),\n                staging_columns=get_journal_entry_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt_utils.type_string() }}) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__journal_entry"], "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__journal_entry.sql", "original_file_path": "models/stg_quickbooks__journal_entry.sql", "name": "stg_quickbooks__journal_entry", "resource_type": "model", "alias": "stg_quickbooks__journal_entry", "checksum": {"name": "sha256", "checksum": "1fd5badabb28837af0b6bb78b923935b07f6cea40aeb091c424451f3e3051e9c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__journal_entry_tmp"], ["stg_quickbooks__journal_entry_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_journal_entry_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "model.quickbooks_source.stg_quickbooks__journal_entry_tmp"]}, "description": "Table containing journal entry transactions.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_adjustment": {"name": "is_adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the journal entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "The value of this field will always be set to zero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the journal entry was transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__journal_entry.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    adjustment\n    \n as \n    \n    adjustment\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as \n    int64\n) as journal_entry_id,\n        adjustment as is_adjustment,\n        created_at,\n        currency_id,\n        cast(doc_number as \n    string\n) as doc_number,\n        exchange_rate,\n        private_note,\n        total_amount,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry`"}, "model.quickbooks_source.stg_quickbooks__refund_receipt": {"raw_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__refund_receipt_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__refund_receipt_tmp')),\n                staging_columns=get_refund_receipt_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as refund_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        total_amount,\n        class_id,\n        cast(deposit_to_account_id as {{ dbt_utils.type_string() }}) as deposit_to_account_id,\n        created_at,\n        department_id,\n        customer_id,\n        currency_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__refund_receipt"], "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__refund_receipt.sql", "original_file_path": "models/stg_quickbooks__refund_receipt.sql", "name": "stg_quickbooks__refund_receipt", "resource_type": "model", "alias": "stg_quickbooks__refund_receipt", "checksum": {"name": "sha256", "checksum": "a53514b8acb73312e2077e6af528954e26451c5e49a9e873d438837723fa6fdd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__refund_receipt_tmp"], ["stg_quickbooks__refund_receipt_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_refund_receipt_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"]}, "description": "Table containing refunds to the customer for a product or service that was provided.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the refund receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the refund receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account from which payment money is refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer credited with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date in which the refund occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__refund_receipt.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    apply_tax_after_discount\n    \n as \n    \n    apply_tax_after_discount\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_email\n    \n as \n    \n    bill_email\n    \n, \n    \n    \n    billing_address_id\n    \n as \n    \n    billing_address_id\n    \n, \n    \n    \n    check_payment_account_number\n    \n as \n    \n    check_payment_account_number\n    \n, \n    \n    \n    check_payment_bank_name\n    \n as \n    \n    check_payment_bank_name\n    \n, \n    \n    \n    check_payment_check_number\n    \n as \n    \n    check_payment_check_number\n    \n, \n    \n    \n    check_payment_name_on_account\n    \n as \n    \n    check_payment_name_on_account\n    \n, \n    \n    \n    check_payment_status\n    \n as \n    \n    check_payment_status\n    \n, \n    \n    \n    class_id\n    \n as \n    \n    class_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    credit_card_amount\n    \n as \n    \n    credit_card_amount\n    \n, \n    \n    \n    credit_card_auth_code\n    \n as \n    \n    credit_card_auth_code\n    \n, \n    \n    \n    credit_card_billing_address_street\n    \n as \n    \n    credit_card_billing_address_street\n    \n, \n    \n    \n    credit_card_cc_expiry_month\n    \n as \n    \n    credit_card_cc_expiry_month\n    \n, \n    \n    \n    credit_card_cc_expiry_year\n    \n as \n    \n    credit_card_cc_expiry_year\n    \n, \n    \n    \n    credit_card_cctrans_id\n    \n as \n    \n    credit_card_cctrans_id\n    \n, \n    \n    \n    credit_card_name_on_account\n    \n as \n    \n    credit_card_name_on_account\n    \n, \n    \n    \n    credit_card_postal_code\n    \n as \n    \n    credit_card_postal_code\n    \n, \n    \n    \n    credit_card_process_payment\n    \n as \n    \n    credit_card_process_payment\n    \n, \n    \n    \n    credit_card_status\n    \n as \n    \n    credit_card_status\n    \n, \n    \n    \n    credit_card_transaction_authorization_time\n    \n as \n    \n    credit_card_transaction_authorization_time\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    customer_memo\n    \n as \n    \n    customer_memo\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    deposit_to_account_id\n    \n as \n    \n    deposit_to_account_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_balance\n    \n as \n    \n    home_balance\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_reference_number\n    \n as \n    \n    payment_reference_number\n    \n, \n    \n    \n    payment_type\n    \n as \n    \n    payment_type\n    \n, \n    \n    \n    print_status\n    \n as \n    \n    print_status\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_code_id\n    \n as \n    \n    tax_code_id\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    total_tax\n    \n as \n    \n    total_tax\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as refund_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        total_amount,\n        class_id,\n        cast(deposit_to_account_id as \n    int64\n) as deposit_to_account_id,\n        created_at,\n        department_id,\n        customer_id,\n        currency_id,\n        exchange_rate,\n        transaction_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt`"}, "model.quickbooks_source.stg_quickbooks__deposit_line": {"raw_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__deposit_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__deposit_line_tmp')),\n                staging_columns=get_deposit_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as {{ dbt_utils.type_string() }}) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as {{ dbt_utils.type_string() }}) as deposit_account_id,\n        deposit_class_id,\n        deposit_customer_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__deposit_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__deposit_line.sql", "original_file_path": "models/stg_quickbooks__deposit_line.sql", "name": "stg_quickbooks__deposit_line", "resource_type": "model", "alias": "stg_quickbooks__deposit_line", "checksum": {"name": "sha256", "checksum": "d954264796a827c4b4d1287fea9467ed324d5b0cc651f1d63d7a042c8b863651"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__deposit_line_tmp"], ["stg_quickbooks__deposit_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_deposit_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "model.quickbooks_source.stg_quickbooks__deposit_line_tmp"]}, "description": "Table containing individual line items comprising the deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the deposit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_class_id": {"name": "deposit_class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_account_id": {"name": "deposit_account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_customer_id": {"name": "deposit_customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__deposit_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    bill_id\n    \n as \n    \n    bill_id\n    \n, \n    \n    \n    deposit_account_id\n    \n as \n    \n    deposit_account_id\n    \n, \n    \n    \n    deposit_check_number\n    \n as \n    \n    deposit_check_number\n    \n, \n    \n    \n    deposit_class_id\n    \n as \n    \n    deposit_class_id\n    \n, \n    \n    \n    deposit_customer_id\n    \n as \n    \n    deposit_customer_id\n    \n, \n    \n    \n    deposit_id\n    \n as \n    \n    deposit_id\n    \n, \n    \n    \n    deposit_payment_method_id\n    \n as \n    \n    deposit_payment_method_id\n    \n, \n    \n    \n    deposit_tax_applicable_on\n    \n as \n    \n    deposit_tax_applicable_on\n    \n, \n    \n    \n    deposit_tax_code_id\n    \n as \n    \n    deposit_tax_code_id\n    \n, \n    \n    \n    deposit_transaction_type\n    \n as \n    \n    deposit_transaction_type\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    detail_type\n    \n as \n    \n    detail_type\n    \n, \n    \n    \n    expense_id\n    \n as \n    \n    expense_id\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    purchase_id\n    \n as \n    \n    purchase_id\n    \n, \n    \n    \n    refund_receipt_id\n    \n as \n    \n    refund_receipt_id\n    \n, \n    \n    \n    sales_receipt_id\n    \n as \n    \n    sales_receipt_id\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(deposit_id as \n    int64\n) as deposit_id,\n        index,\n        amount,\n        description,\n        cast(deposit_account_id as \n    int64\n) as deposit_account_id,\n        deposit_class_id,\n        deposit_customer_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line`"}, "model.quickbooks_source.stg_quickbooks__vendor_credit": {"raw_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_credit_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_credit_tmp')),\n                staging_columns=get_vendor_credit_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as vendor_credit_id,\n        balance,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as {{ dbt_utils.type_string() }}) as payable_account_id,\n        department_id,\n        private_note,\n        transaction_date,\n        cast(vendor_id as {{ dbt_utils.type_string() }}) as vendor_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__vendor_credit"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__vendor_credit.sql", "original_file_path": "models/stg_quickbooks__vendor_credit.sql", "name": "stg_quickbooks__vendor_credit", "resource_type": "model", "alias": "stg_quickbooks__vendor_credit", "checksum": {"name": "sha256", "checksum": "05b0105afefd79ddba2fa662bd560488130d24e9f427d9ef3936c6822baf1028"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__vendor_credit_tmp"], ["stg_quickbooks__vendor_credit_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_credit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"]}, "description": "Table containing all vendor credit records. A vendor credit is an accounts payable transaction that represents a refund or credit of payment for goods or services.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The current amount of the vendor credit reflecting any adjustments to the original credit amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total credit amount, determined by taking the total of all all lines of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the vendor credit was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Specifies to which AP account the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the vendor credit is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The date entered by the user when this transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor_credit.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    doc_number\n    \n as \n    \n    doc_number\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    payable_account_id\n    \n as \n    \n    payable_account_id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    vendor_id\n    \n as \n    \n    vendor_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as vendor_credit_id,\n        balance,\n        cast(doc_number as \n    string\n) as doc_number,\n        total_amount,\n        currency_id,\n        exchange_rate,\n        created_at,\n        cast(payable_account_id as \n    int64\n) as payable_account_id,\n        department_id,\n        private_note,\n        transaction_date,\n        cast(vendor_id as \n    int64\n) as vendor_id,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit`"}, "model.quickbooks_source.stg_quickbooks__vendor_credit_line": {"raw_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__vendor_credit_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__vendor_credit_line_tmp')),\n                staging_columns=get_vendor_credit_line_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as {{ dbt_utils.type_string() }}) as vendor_credit_id,\n        index,\n        account_expense_customer_id,\n        cast(account_expense_account_id as {{ dbt_utils.type_string() }}) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        account_expense_class_id,\n        item_expense_customer_id,\n        cast(item_expense_item_id as {{ dbt_utils.type_string() }}) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__vendor_credit_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__vendor_credit_line.sql", "original_file_path": "models/stg_quickbooks__vendor_credit_line.sql", "name": "stg_quickbooks__vendor_credit_line", "resource_type": "model", "alias": "stg_quickbooks__vendor_credit_line", "checksum": {"name": "sha256", "checksum": "d0df82e6a035be50b5e0bee1af39494fa019e247a8fb502c746fc5904a31b027"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__vendor_credit_line_tmp"], ["stg_quickbooks__vendor_credit_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_vendor_credit_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"]}, "description": "Table containing individual vendor credit line items.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit record.", "meta": {}, "data_type": null, "quote": null, "tags": [], "test": ["not_null"]}, "index": {"name": "index", "description": "Index count of records associated with the vendor credit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account credited for the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the billable related to the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code id of the tax code associated with the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Customer reference for the vendor credit expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Customer reference for the item on the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_quantity": {"name": "item_expense_quantity", "description": "Quantity of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_unit_price": {"name": "item_expense_unit_price", "description": "Unit price of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__vendor_credit_line.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_line_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_expense_account_id\n    \n as \n    \n    account_expense_account_id\n    \n, \n    \n    \n    account_expense_billable_status\n    \n as \n    \n    account_expense_billable_status\n    \n, \n    \n    \n    account_expense_class_id\n    \n as \n    \n    account_expense_class_id\n    \n, \n    \n    \n    account_expense_customer_id\n    \n as \n    \n    account_expense_customer_id\n    \n, \n    \n    \n    account_expense_tax_amount\n    \n as \n    \n    account_expense_tax_amount\n    \n, \n    \n    \n    account_expense_tax_code_id\n    \n as \n    \n    account_expense_tax_code_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    item_expense_billable_status\n    \n as \n    \n    item_expense_billable_status\n    \n, \n    \n    \n    item_expense_class_id\n    \n as \n    \n    item_expense_class_id\n    \n, \n    \n    \n    item_expense_customer_id\n    \n as \n    \n    item_expense_customer_id\n    \n, \n    \n    \n    item_expense_item_id\n    \n as \n    \n    item_expense_item_id\n    \n, \n    \n    \n    item_expense_quantity\n    \n as \n    \n    item_expense_quantity\n    \n, \n    \n    \n    item_expense_tax_code_id\n    \n as \n    \n    item_expense_tax_code_id\n    \n, \n    \n    \n    item_expense_unit_price\n    \n as \n    \n    item_expense_unit_price\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    vendor_credit_id\n    \n as \n    \n    vendor_credit_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(vendor_credit_id as \n    int64\n) as vendor_credit_id,\n        index,\n        account_expense_customer_id,\n        cast(account_expense_account_id as \n    int64\n) as account_expense_account_id,\n        account_expense_billable_status,\n        account_expense_tax_code_id,\n        account_expense_class_id,\n        item_expense_customer_id,\n        cast(item_expense_item_id as \n    int64\n) as item_expense_item_id,\n        item_expense_quantity,\n        item_expense_unit_price,\n        item_expense_class_id,\n        item_expense_billable_status,\n        amount,\n        description\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_line`"}, "model.quickbooks_source.stg_quickbooks__deposit": {"raw_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_quickbooks__deposit_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__deposit_tmp')),\n                staging_columns=get_deposit_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as deposit_id,\n        cast(account_id as {{ dbt_utils.type_string() }}) as account_id,\n        created_at,\n        currency_id,\n        department_id,\n        total_amount,\n        transaction_date,\n        transaction_status,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__deposit"], "unique_id": "model.quickbooks_source.stg_quickbooks__deposit", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__deposit.sql", "original_file_path": "models/stg_quickbooks__deposit.sql", "name": "stg_quickbooks__deposit", "resource_type": "model", "alias": "stg_quickbooks__deposit", "checksum": {"name": "sha256", "checksum": "12bc7d8002be27b7ebcb5068ff0294a25f498e563a47f659d6b2123db521c390"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__deposit_tmp"], ["stg_quickbooks__deposit_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_deposit_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_tmp", "model.quickbooks_source.stg_quickbooks__deposit_tmp"]}, "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the deposit was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the deposit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Status of the deposit transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__deposit.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": true}, "compiled_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    cash_back_account_id\n    \n as \n    \n    cash_back_account_id\n    \n, \n    \n    \n    cash_back_amount\n    \n as \n    \n    cash_back_amount\n    \n, \n    \n    \n    cash_back_memo\n    \n as \n    \n    cash_back_memo\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    department_id\n    \n as \n    \n    department_id\n    \n, \n    \n    \n    global_tax_calculation\n    \n as \n    \n    global_tax_calculation\n    \n, \n    \n    \n    home_total_amount\n    \n as \n    \n    home_total_amount\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    private_note\n    \n as \n    \n    private_note\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    transaction_date\n    \n as \n    \n    transaction_date\n    \n, \n    \n    \n    transaction_source\n    \n as \n    \n    transaction_source\n    \n, \n    \n    \n    transaction_status\n    \n as \n    \n    transaction_status\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as deposit_id,\n        cast(account_id as \n    int64\n) as account_id,\n        created_at,\n        currency_id,\n        department_id,\n        total_amount,\n        transaction_date,\n        transaction_status,\n        _fivetran_deleted\n    from fields\n)\n\nselect * \nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit`"}, "model.quickbooks_source.stg_quickbooks__item": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__item_tmp')),\n                staging_columns=get_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as {{ dbt_utils.type_string() }}) as income_account_id,\n        cast(asset_account_id as {{ dbt_utils.type_string() }}) as asset_account_id,\n        cast(expense_account_id as {{ dbt_utils.type_string() }}) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as {{ dbt_utils.type_string() }}) as parent_item_id\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__item"], "unique_id": "model.quickbooks_source.stg_quickbooks__item", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__item.sql", "original_file_path": "models/stg_quickbooks__item.sql", "name": "stg_quickbooks__item", "resource_type": "model", "alias": "stg_quickbooks__item", "checksum": {"name": "sha256", "checksum": "0095e49755bb9f5340cee9a2253fbf3b6db36875fb3c911df2257667e7e0e93b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__item_tmp"], ["stg_quickbooks__item_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": ["model.quickbooks_source.stg_quickbooks__item_tmp", "model.quickbooks_source.stg_quickbooks__item_tmp"]}, "description": "Table containing item records. An item is a thing that your company buys, sells, or re-sells, such as products and services.", "columns": {"item_id": {"name": "item_id", "description": "Unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the object is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the item was created within QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "Reference to the posting account, that is, the account that records the proceeds from the sale of this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "Reference to the Inventory Asset account that tracks the current value of the inventory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "Reference to the expense account used to pay the vendor for this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_start_date": {"name": "inventory_start_date", "description": "Timestamp of the date the item was started as inventory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase_cost": {"name": "purchase_cost", "description": "Amount paid when buying or ordering the item, as expressed in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the item is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Classification that specifies the use of this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The monetary value of the service or product, as expressed in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__item.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    asset_account_id\n    \n as \n    \n    asset_account_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expense_account_id\n    \n as \n    \n    expense_account_id\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    income_account_id\n    \n as \n    \n    income_account_id\n    \n, \n    \n    \n    inventory_start_date\n    \n as \n    \n    inventory_start_date\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    parent_item_id\n    \n as \n    \n    parent_item_id\n    \n, \n    \n    \n    purchase_cost\n    \n as \n    \n    purchase_cost\n    \n, \n    \n    \n    purchase_description\n    \n as \n    \n    purchase_description\n    \n, \n    \n    \n    purchase_tax_code_id\n    \n as \n    \n    purchase_tax_code_id\n    \n, \n    \n    \n    purchase_tax_included\n    \n as \n    \n    purchase_tax_included\n    \n, \n    \n    \n    quantity_on_hand\n    \n as \n    \n    quantity_on_hand\n    \n, \n    \n    \n    sales_tax_code_id\n    \n as \n    \n    sales_tax_code_id\n    \n, \n    \n    \n    sales_tax_included\n    \n as \n    \n    sales_tax_included\n    \n, \n    \n    \n    stock_keeping_unit\n    \n as \n    \n    stock_keeping_unit\n    \n, \n    \n    \n    sub_item\n    \n as \n    \n    sub_item\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    track_quantity_on_hand\n    \n as \n    \n    track_quantity_on_hand\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    int64\n) as item_id,\n        active as is_active,\n        created_at,\n        cast(income_account_id as \n    int64\n) as income_account_id,\n        cast(asset_account_id as \n    int64\n) as asset_account_id,\n        cast(expense_account_id as \n    int64\n) as expense_account_id,\n        name,\n        purchase_cost,\n        taxable,\n        type,\n        unit_price,\n        inventory_start_date,\n        cast(parent_item_id as \n    int64\n) as parent_item_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`"}, "model.quickbooks_source.stg_quickbooks__customer": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_quickbooks__customer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable\n\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__customer"], "unique_id": "model.quickbooks_source.stg_quickbooks__customer", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__customer.sql", "original_file_path": "models/stg_quickbooks__customer.sql", "name": "stg_quickbooks__customer", "resource_type": "model", "alias": "stg_quickbooks__customer", "checksum": {"name": "sha256", "checksum": "ed64b1260db07c0c56f7648d3638de85c5848a8099560cf485cd0c4570912251"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__customer_tmp"], ["stg_quickbooks__customer_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer_tmp", "model.quickbooks_source.stg_quickbooks__customer_tmp"]}, "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_quickbooks.yml", "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks__customer.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table"}, "compiled_sql": "with base as (\n\n    select * \n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer_tmp`\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alternate_phone_number\n    \n as \n    \n    alternate_phone_number\n    \n, \n    \n    \n    ar_account_id\n    \n as \n    \n    ar_account_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    balance_with_jobs\n    \n as \n    \n    balance_with_jobs\n    \n, \n    \n    \n    bill_address_id\n    \n as \n    \n    bill_address_id\n    \n, \n    \n    \n    bill_with_parent\n    \n as \n    \n    bill_with_parent\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    currency_id\n    \n as \n    \n    currency_id\n    \n, \n    \n    \n    default_tax_code_id\n    \n as \n    \n    default_tax_code_id\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    family_name\n    \n as \n    \n    family_name\n    \n, \n    \n    \n    fax_number\n    \n as \n    \n    fax_number\n    \n, \n    \n    \n    fully_qualified_name\n    \n as \n    \n    fully_qualified_name\n    \n, \n    \n    \n    given_name\n    \n as \n    \n    given_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    job\n    \n as \n    \n    job\n    \n, \n    \n    \n    level\n    \n as \n    \n    level\n    \n, \n    \n    \n    middle_name\n    \n as \n    \n    middle_name\n    \n, \n    \n    \n    mobile_number\n    \n as \n    \n    mobile_number\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    open_balance_date\n    \n as \n    \n    open_balance_date\n    \n, \n    \n    \n    parent_customer_id\n    \n as \n    \n    parent_customer_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    phone_number\n    \n as \n    \n    phone_number\n    \n, \n    \n    \n    preferred_delivery_method\n    \n as \n    \n    preferred_delivery_method\n    \n, \n    \n    \n    print_on_check_name\n    \n as \n    \n    print_on_check_name\n    \n, \n    \n    \n    resale_number\n    \n as \n    \n    resale_number\n    \n, \n    \n    \n    sales_term_id\n    \n as \n    \n    sales_term_id\n    \n, \n    \n    \n    shipping_address_id\n    \n as \n    \n    shipping_address_id\n    \n, \n    \n    \n    suffix\n    \n as \n    \n    suffix\n    \n, \n    \n    \n    sync_token\n    \n as \n    \n    sync_token\n    \n, \n    \n    \n    tax_exemption_reason_id\n    \n as \n    \n    tax_exemption_reason_id\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        active as is_active,\n        balance,\n        balance_with_jobs,\n        bill_with_parent,\n        company_name,\n        fully_qualified_name,\n        currency_id,\n        display_name,\n        website,\n        taxable\n\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`"}, "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": {"raw_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nselect * \nfrom {{ var('vendor_credit') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_credit_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__vendor_credit_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_credit_tmp.sql", "name": "stg_quickbooks__vendor_credit_tmp", "resource_type": "model", "alias": "stg_quickbooks__vendor_credit_tmp", "checksum": {"name": "sha256", "checksum": "2cc1af8b806f60a8aab3cc6b08988da2d3014a246be9ff927ced5d1fda182fc9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["vendor_credit_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.vendor_credit_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_credit_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`vendor_credit_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_tmp`"}, "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": {"raw_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nselect * \nfrom {{ var('refund_receipt_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__refund_receipt_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "name": "stg_quickbooks__refund_receipt_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__refund_receipt_line_tmp", "checksum": {"name": "sha256", "checksum": "937c4edb6ed96a15d1ed984d79c6306f9ba1fa3a338e5e7a34fc0b3301f0b1c6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["refund_receipt_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.refund_receipt_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__refund_receipt_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`refund_receipt_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": {"raw_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nselect * \nfrom {{ var('estimate_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__estimate_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__estimate_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__estimate_line_tmp.sql", "name": "stg_quickbooks__estimate_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__estimate_line_tmp", "checksum": {"name": "sha256", "checksum": "c384d015b8964e52ccf18fcbbd2260278d8f2d9b02e79cda1ed35d89514f018d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["estimate_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.estimate_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__estimate_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`estimate_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": {"raw_sql": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nselect * \nfrom {{ var('credit_memo_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__credit_memo_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__credit_memo_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__credit_memo_line_tmp.sql", "name": "stg_quickbooks__credit_memo_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__credit_memo_line_tmp", "checksum": {"name": "sha256", "checksum": "d3c8e3dc3108ebae669290dc214fc716857dd7b93134587014f90ae22bd89bec"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["credit_memo_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.credit_memo_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__credit_memo_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`credit_memo_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": {"raw_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nselect * \nfrom {{ var('journal_entry') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__journal_entry_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__journal_entry_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__journal_entry_tmp.sql", "name": "stg_quickbooks__journal_entry_tmp", "resource_type": "model", "alias": "stg_quickbooks__journal_entry_tmp", "checksum": {"name": "sha256", "checksum": "61f5ac20efc0252540f3ff70ec87692d2b4635a96ec4ad08e7f8295e9f9e898d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["journal_entry_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.journal_entry_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__journal_entry_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`journal_entry_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_tmp`"}, "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nselect * \nfrom {{ var('invoice_line_bundle') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_line_bundle_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "name": "stg_quickbooks__invoice_line_bundle_tmp", "resource_type": "model", "alias": "stg_quickbooks__invoice_line_bundle_tmp", "checksum": {"name": "sha256", "checksum": "ecba6d64adcba0d6a1ec3bed3bdaee051c8b23ce2bd7d6dd87254a92dc772837"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["invoice_line_bundle_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.invoice_line_bundle_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_line_bundle_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`invoice_line_bundle_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle_tmp`"}, "model.quickbooks_source.stg_quickbooks__payment_tmp": {"raw_sql": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_payment', True)) }}\n\nselect * \nfrom {{ var('payment') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__payment_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__payment_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__payment_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__payment_tmp.sql", "name": "stg_quickbooks__payment_tmp", "resource_type": "model", "alias": "stg_quickbooks__payment_tmp", "checksum": {"name": "sha256", "checksum": "68166bc4b2a668928e855e7371c6743a5bf66a1fb1ede8bb2b113ff3e8d9c239"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["payment_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.payment_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__payment_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`payment_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_tmp`"}, "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\nselect * \nfrom {{ var('invoice_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__invoice_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_line_tmp.sql", "name": "stg_quickbooks__invoice_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__invoice_line_tmp", "checksum": {"name": "sha256", "checksum": "70e8445c77cc3b476587100fa0123c29ec4a82810ee9517dcc9abcfddd42b835"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["invoice_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.invoice_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`invoice_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": {"raw_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nselect * \nfrom {{ var('deposit_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__deposit_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__deposit_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__deposit_line_tmp.sql", "name": "stg_quickbooks__deposit_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__deposit_line_tmp", "checksum": {"name": "sha256", "checksum": "c792d5b27123728ccbd7b656a2a720c9880baad2c5102b95e275071fc7019440"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["deposit_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.deposit_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__deposit_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`deposit_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__customer_tmp": {"raw_sql": "select * \nfrom {{ var('customer') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__customer_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__customer_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__customer_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__customer_tmp.sql", "name": "stg_quickbooks__customer_tmp", "resource_type": "model", "alias": "stg_quickbooks__customer_tmp", "checksum": {"name": "sha256", "checksum": "ed57930558565003ebd42e837a90057b26f852767bc32e4a58b19094ecbfa509"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["customer_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.customer_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__customer_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`customer_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer_tmp`"}, "model.quickbooks_source.stg_quickbooks__bill_line_tmp": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nselect * \nfrom {{ var('bill_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bill_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_line_tmp.sql", "name": "stg_quickbooks__bill_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__bill_line_tmp", "checksum": {"name": "sha256", "checksum": "65c2cf00e68503a0faa314a95bcb99d9aef127a66b49eed378dba1307b80ff8e"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bill_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bill_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bill_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__item_tmp": {"raw_sql": "select * \nfrom {{ var('item') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__item_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__item_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__item_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__item_tmp.sql", "name": "stg_quickbooks__item_tmp", "resource_type": "model", "alias": "stg_quickbooks__item_tmp", "checksum": {"name": "sha256", "checksum": "af4a69cfe57cc894bf2bab8d71ac00aa95dd4ff1b337ad031accdf8059ce4dd9"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["item_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.item_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__item_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`item_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item_tmp`"}, "model.quickbooks_source.stg_quickbooks__account_tmp": {"raw_sql": "select *\nfrom {{ var('account') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__account_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__account_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__account_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__account_tmp.sql", "name": "stg_quickbooks__account_tmp", "resource_type": "model", "alias": "stg_quickbooks__account_tmp", "checksum": {"name": "sha256", "checksum": "89b197ede7e07bf1451016ce108798ac734cb75e9ab2f15a1e3690cd349b91ba"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["account_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.account_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__account_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select *\nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`account_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account_tmp`"}, "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": {"raw_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_vendor_credit', True)) }}\n\nselect * \nfrom {{ var('vendor_credit_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_credit_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "name": "stg_quickbooks__vendor_credit_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__vendor_credit_line_tmp", "checksum": {"name": "sha256", "checksum": "78229c53b993c7bcc6d8355993cdc3a2ff5c07117ced9aaef4ea691019361b6f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["vendor_credit_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.vendor_credit_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_credit_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_vendor_credit variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`vendor_credit_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__department_tmp": {"raw_sql": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_department', True)) }}\n\nselect * \nfrom {{ var('department') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__department_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__department_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__department_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__department_tmp.sql", "name": "stg_quickbooks__department_tmp", "resource_type": "model", "alias": "stg_quickbooks__department_tmp", "checksum": {"name": "sha256", "checksum": "2fdf3784cf998ce60970941e2839d369cd085661c952946bef8592d1abf32f47"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["department_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.department_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__department_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_department variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`department_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__department_tmp`"}, "model.quickbooks_source.stg_quickbooks__bundle_tmp": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nselect * \nfrom {{ var('bundle') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bundle_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bundle_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bundle_tmp.sql", "name": "stg_quickbooks__bundle_tmp", "resource_type": "model", "alias": "stg_quickbooks__bundle_tmp", "checksum": {"name": "sha256", "checksum": "167d7ef377ddda2a70dd33550dc6bd59b65b9e5d3af94c86fd348669b19eba01"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bundle_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bundle_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bundle_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bundle_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_tmp`"}, "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": {"raw_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_invoice_bundle', True)) }}\n\nselect * \nfrom {{ var('bundle_item') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bundle_item_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bundle_item_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bundle_item_tmp.sql", "name": "stg_quickbooks__bundle_item_tmp", "resource_type": "model", "alias": "stg_quickbooks__bundle_item_tmp", "checksum": {"name": "sha256", "checksum": "364c8c25c619bdf90cbc036bd87b84d19b686250398a3a107089a883da7828f6"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bundle_item_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bundle_item_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bundle_item_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_invoice_bundle variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bundle_item_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_item_tmp`"}, "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": {"raw_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nselect * \nfrom {{ var('bill_payment_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_payment_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bill_payment_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_payment_line_tmp.sql", "name": "stg_quickbooks__bill_payment_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__bill_payment_line_tmp", "checksum": {"name": "sha256", "checksum": "d0c2fe19b83418b83ff4d040425de10b4558cb98b74621fce2de76e67bc53992"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bill_payment_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bill_payment_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_payment_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bill_payment_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__estimate_tmp": {"raw_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_estimate', True)) }}\n\nselect * \nfrom {{ var('estimate') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__estimate_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__estimate_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__estimate_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__estimate_tmp.sql", "name": "stg_quickbooks__estimate_tmp", "resource_type": "model", "alias": "stg_quickbooks__estimate_tmp", "checksum": {"name": "sha256", "checksum": "387d86ea42380e18b5a88af69c9801228ec43e7cfca5fe9a2e00151c9c65f451"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["estimate_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.estimate_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__estimate_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_estimate variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`estimate_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_tmp`"}, "model.quickbooks_source.stg_quickbooks__purchase_tmp": {"raw_sql": "select * \nfrom {{ var('purchase') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__purchase_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_tmp.sql", "name": "stg_quickbooks__purchase_tmp", "resource_type": "model", "alias": "stg_quickbooks__purchase_tmp", "checksum": {"name": "sha256", "checksum": "66bc8c4634087951dd5d541ee092908f907fc0a521936fa5753894b2f121f471"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["purchase_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.purchase_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`purchase_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_tmp`"}, "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": {"raw_sql": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_credit_memo', True)) }}\n\nselect * \nfrom {{ var('credit_memo') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__credit_memo_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__credit_memo_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__credit_memo_tmp.sql", "name": "stg_quickbooks__credit_memo_tmp", "resource_type": "model", "alias": "stg_quickbooks__credit_memo_tmp", "checksum": {"name": "sha256", "checksum": "5a8abf0f3c86c4d7675fd783d26cd5477bec0e06056f82b8351d333f1df9fe7a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["credit_memo_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.credit_memo_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__credit_memo_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_credit_memo variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`credit_memo_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_tmp`"}, "model.quickbooks_source.stg_quickbooks__bill_tmp": {"raw_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nselect * \nfrom {{ var('bill') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bill_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_tmp.sql", "name": "stg_quickbooks__bill_tmp", "resource_type": "model", "alias": "stg_quickbooks__bill_tmp", "checksum": {"name": "sha256", "checksum": "13eedc57b03b350d0c228dbf1556178789afabe88eb541806450c0c3856e8dd7"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bill_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bill_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bill_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_tmp`"}, "model.quickbooks_source.stg_quickbooks__transfer_tmp": {"raw_sql": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_transfer', True)) }}\n\nselect * \nfrom {{ var('transfer') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__transfer_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__transfer_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__transfer_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__transfer_tmp.sql", "name": "stg_quickbooks__transfer_tmp", "resource_type": "model", "alias": "stg_quickbooks__transfer_tmp", "checksum": {"name": "sha256", "checksum": "fe093aad89e2c31a8bdcdc76afda4d24dcefa51d92b3233c64524eeba3eef37b"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["transfer_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.transfer_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__transfer_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_transfer variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`transfer_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer_tmp`"}, "model.quickbooks_source.stg_quickbooks__vendor_tmp": {"raw_sql": "select * \nfrom {{ var('vendor') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__vendor_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__vendor_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__vendor_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__vendor_tmp.sql", "name": "stg_quickbooks__vendor_tmp", "resource_type": "model", "alias": "stg_quickbooks__vendor_tmp", "checksum": {"name": "sha256", "checksum": "8b70affb7fe37710eca09eae95bf632d9d27148f5b733a85704da28973d0488d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["vendor_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.vendor_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__vendor_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`vendor_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_tmp`"}, "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": {"raw_sql": "select * \nfrom {{ var('purchase_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__purchase_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_line_tmp.sql", "name": "stg_quickbooks__purchase_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__purchase_line_tmp", "checksum": {"name": "sha256", "checksum": "4fd11ba6c866de7b7e63ac6b49ad73bda7f7979bd524c1b590bd3199237170e3"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["purchase_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.purchase_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__purchase_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`purchase_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__address_tmp": {"raw_sql": "select * \nfrom {{ var('address') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__address_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__address_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__address_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__address_tmp.sql", "name": "stg_quickbooks__address_tmp", "resource_type": "model", "alias": "stg_quickbooks__address_tmp", "checksum": {"name": "sha256", "checksum": "4bfa0bf8e53b06f5c032b8ce010553ec4c36ae437d01bfb827b23051f252f62d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["address_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.address_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__address_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view"}, "compiled_sql": "select * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`address_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address_tmp`"}, "model.quickbooks_source.stg_quickbooks__payment_line_tmp": {"raw_sql": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_payment', True)) }}\n\nselect * \nfrom {{ var('payment_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__payment_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__payment_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__payment_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__payment_line_tmp.sql", "name": "stg_quickbooks__payment_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__payment_line_tmp", "checksum": {"name": "sha256", "checksum": "5f0d1167d49e59ebd3067c62b5669168b1cc2bad26a10183754a6e487d2abb2f"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["payment_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.payment_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__payment_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_payment variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`payment_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": {"raw_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_refund_receipt', True)) }}\n\nselect * \nfrom {{ var('refund_receipt') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__refund_receipt_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__refund_receipt_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__refund_receipt_tmp.sql", "name": "stg_quickbooks__refund_receipt_tmp", "resource_type": "model", "alias": "stg_quickbooks__refund_receipt_tmp", "checksum": {"name": "sha256", "checksum": "cfee40b115db7fd6bfa6e9e149f1869ac0f7e00dd706ee67d4d84c8206872abf"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["refund_receipt_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.refund_receipt_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__refund_receipt_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_refund_receipt variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`refund_receipt_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_tmp`"}, "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": {"raw_sql": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nselect * \nfrom {{ var('sales_receipt') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__sales_receipt_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__sales_receipt_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__sales_receipt_tmp.sql", "name": "stg_quickbooks__sales_receipt_tmp", "resource_type": "model", "alias": "stg_quickbooks__sales_receipt_tmp", "checksum": {"name": "sha256", "checksum": "e3359ec9953b6cfab71b2d84d7ea912911eaa099382a7b2ad4a513e432ef65b5"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["sales_receipt_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.sales_receipt_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__sales_receipt_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`sales_receipt_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_tmp`"}, "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": {"raw_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nselect * \nfrom {{ var('bill_payment') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_payment_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bill_payment_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_payment_tmp.sql", "name": "stg_quickbooks__bill_payment_tmp", "resource_type": "model", "alias": "stg_quickbooks__bill_payment_tmp", "checksum": {"name": "sha256", "checksum": "66eda7d6020107bc0e84dcea48b870c6096225de722562f2d762140fd612beaf"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bill_payment_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bill_payment_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_payment_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill_payment variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bill_payment_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_tmp`"}, "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": {"raw_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_journal_entry', True)) }}\n\nselect * \nfrom {{ var('journal_entry_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__journal_entry_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__journal_entry_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__journal_entry_line_tmp.sql", "name": "stg_quickbooks__journal_entry_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__journal_entry_line_tmp", "checksum": {"name": "sha256", "checksum": "b50644aae9cd93f4b5984e7971224db8d93dafd7f248dfb89364bea6972fcfbf"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["journal_entry_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.journal_entry_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__journal_entry_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_journal_entry variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`journal_entry_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__deposit_tmp": {"raw_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n{{ config(enabled=var('using_deposit', True)) }}\n\nselect * \nfrom {{ var('deposit') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__deposit_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__deposit_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__deposit_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__deposit_tmp.sql", "name": "stg_quickbooks__deposit_tmp", "resource_type": "model", "alias": "stg_quickbooks__deposit_tmp", "checksum": {"name": "sha256", "checksum": "43224393f0bbff587d3698bbfbbd2ff3cd5f683500cd00a2419c746c005ec5f4"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["deposit_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.deposit_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__deposit_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_deposit variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`deposit_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_tmp`"}, "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": {"raw_sql": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n{{ config(enabled=var('using_bill', True)) }}\n\nselect * \nfrom {{ var('bill_linked_txn') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__bill_linked_txn_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "name": "stg_quickbooks__bill_linked_txn_tmp", "resource_type": "model", "alias": "stg_quickbooks__bill_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "25ee3cc57ef02869b14fd248302c42c2ef078a458770a67ed6364996f5732036"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["bill_linked_txn_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.bill_linked_txn_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__bill_linked_txn_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To disable this model, set the using_bill and using_bill_payment variables within your dbt_project.yml file to False.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`bill_linked_txn_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn_tmp`"}, "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\nselect * \nfrom {{ var('invoice_linked_txn') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_linked_txn_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "name": "stg_quickbooks__invoice_linked_txn_tmp", "resource_type": "model", "alias": "stg_quickbooks__invoice_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "9c2e3137b556c864bb7da4ece22641b9d5b00ed36305884828a2450f0d75f64a"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["invoice_linked_txn_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.invoice_linked_txn_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_linked_txn_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`invoice_linked_txn_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn_tmp`"}, "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": {"raw_sql": "{{ config(enabled=var('using_sales_receipt', True)) }}\n\nselect * \nfrom {{ var('sales_receipt_line') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__sales_receipt_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "name": "stg_quickbooks__sales_receipt_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__sales_receipt_line_tmp", "checksum": {"name": "sha256", "checksum": "d8fd3f81fc56b2f40f2fbe97128c7640153e1b01603635543e6a603110ed9057"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["sales_receipt_line_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.sales_receipt_line_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__sales_receipt_line_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`sales_receipt_line_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line_tmp`"}, "model.quickbooks_source.stg_quickbooks__invoice_tmp": {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_invoice', True)) }}\n\nselect * \nfrom {{ var('invoice') }}", "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__invoice_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__invoice_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__invoice_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__invoice_tmp.sql", "name": "stg_quickbooks__invoice_tmp", "resource_type": "model", "alias": "stg_quickbooks__invoice_tmp", "checksum": {"name": "sha256", "checksum": "94912a9345b3995fc90cbcb50db1e950570080b1c436178b76516a4a602b9fd1"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["invoice_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["seed.quickbooks_integration_tests.invoice_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/tmp/stg_quickbooks__invoice_tmp.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": true}, "compiled_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n\n\nselect * \nfrom `dbt-package-testing`.`quickbooks_integration_tests`.`invoice_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_tmp`"}, "test.quickbooks_source.unique_stg_quickbooks__account_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_quickbooks__account') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__account_account_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__account_account_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__account_account_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__account_account_id", "resource_type": "test", "alias": "unique_stg_quickbooks__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__account_account_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        account_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n    where account_id is not null\n    group by account_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.quickbooks_source.not_null_stg_quickbooks__account_account_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ ref('stg_quickbooks__account') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__account_account_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__account_account_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__account_account_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__account_account_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__account_account_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "account_id"}, "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": ["Asset", "Equity", "Expense", "Liability", "Revenue"], "column_name": "classification", "model": "{{ ref('stg_quickbooks__account') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue"], "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/accepted_values_stg_quickbooks__account_9a85c0a61d7deea1483c64a802ff3f5f.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue", "resource_type": "test", "alias": "accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__account"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.quickbooks_source.stg_quickbooks__account"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/accepted_values_stg_quickbooks__account_9a85c0a61d7deea1483c64a802ff3f5f.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        classification as value_field\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__account`\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Asset','Equity','Expense','Liability','Revenue'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "classification"}, "test.quickbooks_source.unique_stg_quickbooks__address_address_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "address_id", "model": "{{ ref('stg_quickbooks__address') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__address_address_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__address_address_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__address_address_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__address_address_id", "resource_type": "test", "alias": "unique_stg_quickbooks__address_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__address"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__address"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__address_address_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        address_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address`\n    where address_id is not null\n    group by address_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "address_id"}, "test.quickbooks_source.not_null_stg_quickbooks__address_address_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "address_id", "model": "{{ ref('stg_quickbooks__address') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__address_address_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__address_address_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__address_address_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__address_address_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__address_address_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__address"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__address"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__address_address_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__address`\nwhere address_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "address_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ ref('stg_quickbooks__bill_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_line_bill_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_line_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_line_bill_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_line_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_line_bill_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_line`\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ ref('stg_quickbooks__bill_linked_txn') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_linked_txn_bill_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_linked_txn_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_linked_txn_bill_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_linked_txn_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_linked_txn"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_linked_txn_bill_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_payment_id", "model": "{{ ref('stg_quickbooks__bill_linked_txn') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_linked_txn_bill_payment_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_linked_txn_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_linked_txn_bill_payment_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_linked_txn_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_linked_txn"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_linked_txn_bill_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_linked_txn`\nwhere bill_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_payment_id", "model": "{{ ref('stg_quickbooks__bill_payment_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_payment_line_bill_payment_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_payment_line_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_payment_line_bill_payment_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_payment_line_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_payment_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_payment_line_bill_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment_line`\nwhere bill_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id"}, "test.quickbooks_source.unique_stg_quickbooks__bill_payment_bill_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "bill_payment_id", "model": "{{ ref('stg_quickbooks__bill_payment') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__bill_payment_bill_payment_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__bill_payment_bill_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__bill_payment_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__bill_payment_bill_payment_id", "resource_type": "test", "alias": "unique_stg_quickbooks__bill_payment_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_payment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__bill_payment_bill_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        bill_payment_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment`\n    where bill_payment_id is not null\n    group by bill_payment_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_payment_id", "model": "{{ ref('stg_quickbooks__bill_payment') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_payment_bill_payment_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_payment_bill_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_payment_bill_payment_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_payment_bill_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill_payment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill_payment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_payment_bill_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill_payment`\nwhere bill_payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_payment_id"}, "test.quickbooks_source.unique_stg_quickbooks__bill_bill_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "bill_id", "model": "{{ ref('stg_quickbooks__bill') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__bill_bill_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__bill_bill_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__bill_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__bill_bill_id", "resource_type": "test", "alias": "unique_stg_quickbooks__bill_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__bill_bill_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        bill_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill`\n    where bill_id is not null\n    group by bill_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bill_id", "model": "{{ ref('stg_quickbooks__bill') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bill_bill_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bill_bill_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bill_bill_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bill_bill_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bill"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bill"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bill_bill_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bill`\nwhere bill_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bill_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bundle_id", "model": "{{ ref('stg_quickbooks__bundle_item') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bundle_item_bundle_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bundle_item_bundle_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bundle_item_bundle_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bundle_item_bundle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bundle_item"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bundle_item_bundle_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle_item`\nwhere bundle_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bundle_id"}, "test.quickbooks_source.unique_stg_quickbooks__bundle_bundle_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "bundle_id", "model": "{{ ref('stg_quickbooks__bundle') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__bundle_bundle_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__bundle_bundle_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__bundle_bundle_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__bundle_bundle_id", "resource_type": "test", "alias": "unique_stg_quickbooks__bundle_bundle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bundle"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__bundle_bundle_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        bundle_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle`\n    where bundle_id is not null\n    group by bundle_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bundle_id"}, "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "bundle_id", "model": "{{ ref('stg_quickbooks__bundle') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__bundle_bundle_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__bundle_bundle_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__bundle_bundle_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__bundle_bundle_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__bundle"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__bundle"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__bundle_bundle_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__bundle`\nwhere bundle_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "bundle_id"}, "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "credit_memo_id", "model": "{{ ref('stg_quickbooks__credit_memo_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__credit_memo_line_credit_memo_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__credit_memo_line_credit_memo_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__credit_memo_line_credit_memo_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__credit_memo_line_credit_memo_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__credit_memo_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__credit_memo_line_credit_memo_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo_line`\nwhere credit_memo_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "credit_memo_id"}, "test.quickbooks_source.unique_stg_quickbooks__credit_memo_credit_memo_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "credit_memo_id", "model": "{{ ref('stg_quickbooks__credit_memo') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__credit_memo_credit_memo_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__credit_memo_credit_memo_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__credit_memo_credit_memo_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__credit_memo_credit_memo_id", "resource_type": "test", "alias": "unique_stg_quickbooks__credit_memo_credit_memo_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__credit_memo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__credit_memo_credit_memo_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        credit_memo_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo`\n    where credit_memo_id is not null\n    group by credit_memo_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "credit_memo_id"}, "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "credit_memo_id", "model": "{{ ref('stg_quickbooks__credit_memo') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__credit_memo_credit_memo_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__credit_memo_credit_memo_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__credit_memo_credit_memo_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__credit_memo_credit_memo_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__credit_memo"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__credit_memo"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__credit_memo_credit_memo_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__credit_memo`\nwhere credit_memo_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "credit_memo_id"}, "test.quickbooks_source.unique_stg_quickbooks__customer_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ ref('stg_quickbooks__customer') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__customer_customer_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__customer_customer_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__customer_customer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__customer_customer_id", "resource_type": "test", "alias": "unique_stg_quickbooks__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__customer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__customer_customer_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        customer_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`\n    where customer_id is not null\n    group by customer_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ ref('stg_quickbooks__customer') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__customer_customer_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__customer_customer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__customer_customer_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__customer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__customer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__customer_customer_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__customer`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "deposit_id", "model": "{{ ref('stg_quickbooks__deposit_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__deposit_line_deposit_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__deposit_line_deposit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__deposit_line_deposit_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__deposit_line_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__deposit_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__deposit_line_deposit_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit_line`\nwhere deposit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id"}, "test.quickbooks_source.unique_stg_quickbooks__deposit_deposit_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "deposit_id", "model": "{{ ref('stg_quickbooks__deposit') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__deposit_deposit_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__deposit_deposit_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__deposit_deposit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__deposit_deposit_id", "resource_type": "test", "alias": "unique_stg_quickbooks__deposit_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__deposit"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__deposit_deposit_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        deposit_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit`\n    where deposit_id is not null\n    group by deposit_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id"}, "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "deposit_id", "model": "{{ ref('stg_quickbooks__deposit') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__deposit_deposit_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__deposit_deposit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__deposit_deposit_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__deposit_deposit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__deposit"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__deposit"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__deposit_deposit_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__deposit`\nwhere deposit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "deposit_id"}, "test.quickbooks_source.unique_stg_quickbooks__estimate_estimate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "estimate_id", "model": "{{ ref('stg_quickbooks__estimate') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__estimate_estimate_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__estimate_estimate_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__estimate_estimate_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__estimate_estimate_id", "resource_type": "test", "alias": "unique_stg_quickbooks__estimate_estimate_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__estimate"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__estimate_estimate_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        estimate_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate`\n    where estimate_id is not null\n    group by estimate_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "estimate_id"}, "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "estimate_id", "model": "{{ ref('stg_quickbooks__estimate') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__estimate_estimate_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__estimate_estimate_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__estimate_estimate_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__estimate_estimate_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__estimate"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__estimate_estimate_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate`\nwhere estimate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "estimate_id"}, "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "estimate_id", "model": "{{ ref('stg_quickbooks__estimate_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__estimate_line_estimate_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__estimate_line_estimate_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__estimate_line_estimate_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__estimate_line_estimate_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__estimate_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__estimate_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__estimate_line_estimate_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__estimate_line`\nwhere estimate_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "estimate_id"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_quickbooks__invoice_linked_txn') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__invoice_linked_txn_invoice_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__invoice_linked_txn_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__invoice_linked_txn_invoice_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__invoice_linked_txn_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__invoice_linked_txn"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__invoice_linked_txn_invoice_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_linked_txn`\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_quickbooks__invoice_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__invoice_line_invoice_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__invoice_line_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__invoice_line_invoice_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__invoice_line_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__invoice_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__invoice_line_invoice_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line`\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_quickbooks__invoice_line_bundle') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__invoice_line_bundle_invoice_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__invoice_line_bundle_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__invoice_line_bundle_invoice_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__invoice_line_bundle_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__invoice_line_bundle"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__invoice_line_bundle_invoice_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice_line_bundle`\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id"}, "test.quickbooks_source.unique_stg_quickbooks__invoice_invoice_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_quickbooks__invoice') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__invoice_invoice_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__invoice_invoice_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__invoice_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__invoice_invoice_id", "resource_type": "test", "alias": "unique_stg_quickbooks__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__invoice"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__invoice_invoice_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        invoice_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`\n    where invoice_id is not null\n    group by invoice_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id"}, "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ ref('stg_quickbooks__invoice') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__invoice_invoice_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__invoice_invoice_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__invoice_invoice_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__invoice"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__invoice"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__invoice_invoice_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__invoice`\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id"}, "test.quickbooks_source.unique_stg_quickbooks__item_item_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "item_id", "model": "{{ ref('stg_quickbooks__item') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__item_item_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__item_item_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__item_item_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__item_item_id", "resource_type": "test", "alias": "unique_stg_quickbooks__item_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__item_item_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        item_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\n    where item_id is not null\n    group by item_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id"}, "test.quickbooks_source.not_null_stg_quickbooks__item_item_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "item_id", "model": "{{ ref('stg_quickbooks__item') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__item_item_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__item_item_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__item_item_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__item_item_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__item_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__item"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__item_item_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__item`\nwhere item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "item_id"}, "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "journal_entry_id", "model": "{{ ref('stg_quickbooks__journal_entry_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__journal_entry_line_journal_entry_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__journal_entry_line_journal_entry_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__journal_entry_line_journal_entry_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__journal_entry_line_journal_entry_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__journal_entry_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__journal_entry_line_journal_entry_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\nwhere journal_entry_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id"}, "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": ["Credit", "Debit"], "column_name": "posting_type", "model": "{{ ref('stg_quickbooks__journal_entry_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit"], "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit", "resource_type": "test", "alias": "accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__journal_entry_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        posting_type as value_field\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry_line`\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Credit','Debit'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "posting_type"}, "test.quickbooks_source.unique_stg_quickbooks__journal_entry_journal_entry_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "journal_entry_id", "model": "{{ ref('stg_quickbooks__journal_entry') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__journal_entry_journal_entry_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__journal_entry_journal_entry_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__journal_entry_journal_entry_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__journal_entry_journal_entry_id", "resource_type": "test", "alias": "unique_stg_quickbooks__journal_entry_journal_entry_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__journal_entry"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__journal_entry_journal_entry_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        journal_entry_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry`\n    where journal_entry_id is not null\n    group by journal_entry_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id"}, "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "journal_entry_id", "model": "{{ ref('stg_quickbooks__journal_entry') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__journal_entry_journal_entry_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__journal_entry_journal_entry_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__journal_entry_journal_entry_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__journal_entry_journal_entry_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__journal_entry"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__journal_entry"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__journal_entry_journal_entry_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__journal_entry`\nwhere journal_entry_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "journal_entry_id"}, "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ ref('stg_quickbooks__payment_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__payment_line_payment_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__payment_line_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__payment_line_payment_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__payment_line_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__payment_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__payment_line_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment_line`\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_id"}, "test.quickbooks_source.unique_stg_quickbooks__payment_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ ref('stg_quickbooks__payment') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__payment_payment_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__payment_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__payment_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__payment_payment_id", "resource_type": "test", "alias": "unique_stg_quickbooks__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__payment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__payment_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        payment_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment`\n    where payment_id is not null\n    group by payment_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_id"}, "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ ref('stg_quickbooks__payment') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__payment_payment_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__payment_payment_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__payment_payment_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__payment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__payment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__payment_payment_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__payment`\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_id"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "purchase_id", "model": "{{ ref('stg_quickbooks__purchase_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__purchase_line_purchase_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__purchase_line_purchase_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__purchase_line_purchase_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__purchase_line_purchase_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__purchase_line_purchase_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase_line`\nwhere purchase_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "purchase_id"}, "test.quickbooks_source.unique_stg_quickbooks__purchase_purchase_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "purchase_id", "model": "{{ ref('stg_quickbooks__purchase') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__purchase_purchase_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__purchase_purchase_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__purchase_purchase_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__purchase_purchase_id", "resource_type": "test", "alias": "unique_stg_quickbooks__purchase_purchase_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__purchase_purchase_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        purchase_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`\n    where purchase_id is not null\n    group by purchase_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "purchase_id"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "purchase_id", "model": "{{ ref('stg_quickbooks__purchase') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__purchase_purchase_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__purchase_purchase_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__purchase_purchase_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__purchase_purchase_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__purchase_purchase_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`\nwhere purchase_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "purchase_id"}, "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": ["Cash", "Check", "CreditCard"], "column_name": "payment_type", "model": "{{ ref('stg_quickbooks__purchase') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard"], "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/accepted_values_stg_quickbooks__purchase_d6117bc728224c72d803b4826faeeb59.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard", "resource_type": "test", "alias": "accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": ["model.quickbooks_source.stg_quickbooks__purchase"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/accepted_values_stg_quickbooks__purchase_d6117bc728224c72d803b4826faeeb59.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\n\nwith all_values as (\n\n    select distinct\n        payment_type as value_field\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__purchase`\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        'Cash','Check','CreditCard'\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_type"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ ref('stg_quickbooks__purchase_order_line') }}"}}, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__purchase_order_line_purchase_order_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__purchase_order_line_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__purchase_order_line_purchase_order_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__purchase_order_line_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_order_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "column_name": "purchase_order_id"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ ref('stg_quickbooks__purchase_order_linked_txn') }}"}}, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_order_linked_txn"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "column_name": "purchase_order_id"}, "test.quickbooks_source.unique_stg_quickbooks__purchase_order_purchase_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "purchase_order_id", "model": "{{ ref('stg_quickbooks__purchase_order') }}"}}, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__purchase_order_purchase_order_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__purchase_order_purchase_order_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__purchase_order_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__purchase_order_purchase_order_id", "resource_type": "test", "alias": "unique_stg_quickbooks__purchase_order_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_order"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "column_name": "purchase_order_id"}, "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "purchase_order_id", "model": "{{ ref('stg_quickbooks__purchase_order') }}"}}, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__purchase_order_purchase_order_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__purchase_order_purchase_order_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__purchase_order_purchase_order_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__purchase_order_purchase_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_order"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "column_name": "purchase_order_id"}, "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "accepted_values", "kwargs": {"values": ["Open", "Closed"], "column_name": "status", "model": "{{ ref('stg_quickbooks__purchase_order') }}"}}, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "accepted_values_stg_quickbooks__purchase_order_status__Open__Closed"], "unique_id": "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/accepted_values_stg_quickbooks__purchase_order_status__Open__Closed.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "accepted_values_stg_quickbooks__purchase_order_status__Open__Closed", "resource_type": "test", "alias": "accepted_values_stg_quickbooks__purchase_order_status__Open__Closed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__purchase_order"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "column_name": "status"}, "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ ref('stg_quickbooks__refund_receipt_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__refund_receipt_line_refund_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__refund_receipt_line_refund_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__refund_receipt_line_refund_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__refund_receipt_line_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__refund_receipt_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__refund_receipt_line_refund_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt_line`\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id"}, "test.quickbooks_source.unique_stg_quickbooks__refund_receipt_refund_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ ref('stg_quickbooks__refund_receipt') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__refund_receipt_refund_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__refund_receipt_refund_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__refund_receipt_refund_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__refund_receipt_refund_id", "resource_type": "test", "alias": "unique_stg_quickbooks__refund_receipt_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__refund_receipt"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__refund_receipt_refund_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        refund_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt`\n    where refund_id is not null\n    group by refund_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id"}, "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ ref('stg_quickbooks__refund_receipt') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__refund_receipt_refund_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__refund_receipt_refund_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__refund_receipt_refund_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__refund_receipt_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__refund_receipt"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__refund_receipt"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__refund_receipt_refund_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__refund_receipt`\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id"}, "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "sales_receipt_id", "model": "{{ ref('stg_quickbooks__sales_receipt_line') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__sales_receipt_line"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt_line`\nwhere sales_receipt_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sales_receipt_id"}, "test.quickbooks_source.unique_stg_quickbooks__sales_receipt_sales_receipt_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "sales_receipt_id", "model": "{{ ref('stg_quickbooks__sales_receipt') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__sales_receipt_sales_receipt_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__sales_receipt_sales_receipt_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__sales_receipt_sales_receipt_id", "resource_type": "test", "alias": "unique_stg_quickbooks__sales_receipt_sales_receipt_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__sales_receipt"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        sales_receipt_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt`\n    where sales_receipt_id is not null\n    group by sales_receipt_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sales_receipt_id"}, "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "sales_receipt_id", "model": "{{ ref('stg_quickbooks__sales_receipt') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__sales_receipt_sales_receipt_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__sales_receipt"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__sales_receipt"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__sales_receipt_sales_receipt_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__sales_receipt`\nwhere sales_receipt_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sales_receipt_id"}, "test.quickbooks_source.unique_stg_quickbooks__transfer_transfer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "transfer_id", "model": "{{ ref('stg_quickbooks__transfer') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__transfer_transfer_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__transfer_transfer_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__transfer_transfer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__transfer_transfer_id", "resource_type": "test", "alias": "unique_stg_quickbooks__transfer_transfer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__transfer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__transfer_transfer_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        transfer_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer`\n    where transfer_id is not null\n    group by transfer_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transfer_id"}, "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "transfer_id", "model": "{{ ref('stg_quickbooks__transfer') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__transfer_transfer_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__transfer_transfer_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__transfer_transfer_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__transfer_transfer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__transfer"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__transfer"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__transfer_transfer_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__transfer`\nwhere transfer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "transfer_id"}, "test.quickbooks_source.unique_stg_quickbooks__vendor_credit_vendor_credit_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vendor_credit_id", "model": "{{ ref('stg_quickbooks__vendor_credit') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__vendor_credit_vendor_credit_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__vendor_credit_vendor_credit_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__vendor_credit_vendor_credit_id", "resource_type": "test", "alias": "unique_stg_quickbooks__vendor_credit_vendor_credit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__vendor_credit"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        vendor_credit_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit`\n    where vendor_credit_id is not null\n    group by vendor_credit_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_credit_id"}, "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vendor_credit_id", "model": "{{ ref('stg_quickbooks__vendor_credit') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__vendor_credit_vendor_credit_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__vendor_credit"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor_credit"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__vendor_credit_vendor_credit_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor_credit`\nwhere vendor_credit_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_credit_id"}, "test.quickbooks_source.unique_stg_quickbooks__vendor_vendor_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "vendor_id", "model": "{{ ref('stg_quickbooks__vendor') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "unique_stg_quickbooks__vendor_vendor_id"], "unique_id": "test.quickbooks_source.unique_stg_quickbooks__vendor_vendor_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/unique_stg_quickbooks__vendor_vendor_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "unique_stg_quickbooks__vendor_vendor_id", "resource_type": "test", "alias": "unique_stg_quickbooks__vendor_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__vendor"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/unique_stg_quickbooks__vendor_vendor_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        vendor_id\n\n    from `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`\n    where vendor_id is not null\n    group by vendor_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id"}, "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "vendor_id", "model": "{{ ref('stg_quickbooks__vendor') }}"}}, "compiled": true, "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "schema_test", "not_null_stg_quickbooks__vendor_vendor_id"], "unique_id": "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "schema_test/not_null_stg_quickbooks__vendor_vendor_id.sql", "original_file_path": "models/stg_quickbooks.yml", "name": "not_null_stg_quickbooks__vendor_vendor_id", "resource_type": "test", "alias": "not_null_stg_quickbooks__vendor_vendor_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_quickbooks__vendor"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.quickbooks_source.stg_quickbooks__vendor"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/quickbooks_source/models/stg_quickbooks.yml/schema_test/not_null_stg_quickbooks__vendor_vendor_id.sql", "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "severity": "ERROR"}, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom `dbt-package-testing`.`quickbooks_integration_tests_quickbooks_staging`.`stg_quickbooks__vendor`\nwhere vendor_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "vendor_id"}}, "sources": {"source.quickbooks_source.quickbooks.account": {"fqn": ["quickbooks_source", "quickbooks", "account"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.account", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "account", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing components of a Chart Of Accounts and is part of a ledger. It is used to record a total monetary amount allocated against a specific use. Accounts are one of five basic types: asset, liability, revenue (income), expenses, or equity.\n", "columns": {"id": {"name": "id", "description": "Unique identifier for an account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "User-defined account number intended to identify the account within the Chart of Accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_account": {"name": "sub_account", "description": "Specifies whether this object represents a parent (false) or a sub_account (true).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "User entered description for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User recognizable name for the Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "A detailed account classification that specifies the use of this account. The type is based on the Classification.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether an account is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_sub_type": {"name": "account_sub_type", "description": "The account sub-type classification and is based on the AccountType value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification": {"name": "classification", "description": "The classification of an account. Not supported for non-posting accounts. Valid values include Asset, Equity, Expense, Liability, Revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the account was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the account records the balance in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the balance amount for the current Account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_sub_accounts": {"name": "balance_with_sub_accounts", "description": "Specifies the balance amount for the current Account sub accounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date which the account was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`account`"}, "source.quickbooks_source.quickbooks.address": {"fqn": ["quickbooks_source", "quickbooks", "address"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.address", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "address", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "address", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing address details.", "columns": {"id": {"name": "id", "description": "Unique identifier for an address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_1": {"name": "line_1", "description": "The address_line_1 associated with the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_2": {"name": "line_2", "description": "The address_line_2 associated with the address (if applicable).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The postal code which the address is located.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`address`"}, "source.quickbooks_source.quickbooks.bill_line": {"fqn": ["quickbooks_source", "quickbooks", "bill_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bill_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bill_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing distinct line items from bills within the `bill` table.", "columns": {"bill_id": {"name": "bill_id", "description": "The unique identifier of the parent bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Bill line index in reference to the parent bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer reference associated with the account based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer reference associated with the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense bill line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "The id of the account being expensed from the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "The status of the bill line item expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "The tax code id associated with the bill.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the bill line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bill_line`"}, "source.quickbooks_source.quickbooks.bill_linked_txn": {"fqn": ["quickbooks_source", "quickbooks", "bill_linked_txn"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bill_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bill_linked_txn", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_linked_txn", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table containing bill payment transactions linked to a bill.", "columns": {"bill_id": {"name": "bill_id", "description": "The unique identifier of the bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a single bill record associated with payment ids.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_payment_id": {"name": "bill_payment_id", "description": "The unique identifier of the bill payment id record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bill_linked_txn`"}, "source.quickbooks_source.quickbooks.bill_payment_line": {"fqn": ["quickbooks_source", "quickbooks", "bill_payment_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bill_payment_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bill_payment_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_payment_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a bill payment, which are recorded within the `bill_payment` table.", "columns": {"bill_payment_id": {"name": "bill_payment_id", "description": "The unique identifier of the bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of payments associated with the parent bill payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_id": {"name": "expense_id", "description": "Unique identifier of the purchase record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "linked_bill_payment_id": {"name": "linked_bill_payment_id", "description": "Unique identifier of the bill record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor_credit record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record associated with the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bill_payment_line`"}, "source.quickbooks_source.quickbooks.bill_payment": {"fqn": ["quickbooks_source", "quickbooks", "bill_payment"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bill_payment", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bill_payment", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill_payment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing payment transactions bills that the business owner receives from a vendor for goods or services purchased from the vendor.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bill payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "check_bank_account_id": {"name": "check_bank_account_id", "description": "Account id of the account which the bill payment is credited. Only applicable if bill payment `pay_type` is of type check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "check_print_status": {"name": "check_print_status", "description": "Status of the check which was used as payment for the bill. Only applicable if bill payment `pay_type` is of type Check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_account_id": {"name": "credit_card_account_id", "description": "Account id of the account which the bill is credited. Only applicable if bill payment `pay_type` is of type CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by CurrencyRef. Applicable if multicurrency is enabled for the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to a Department object specifying the location of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pay_type": {"name": "pay_type", "description": "The payment type. Valid values include Check, CreditCard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount associated with this payment. This includes the total of all the payments from the payment line details.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the day the took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bill_payment`"}, "source.quickbooks_source.quickbooks.bill": {"fqn": ["quickbooks_source", "quickbooks", "bill"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bill", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bill", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bill", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing AP transactions representing a request-for-payment from a third party for goods/services rendered, received, or both.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bill record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department the bill is linked with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total monetary amount of all bill line items.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor the bill is linked with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date which the bill is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the bill transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id of the account which the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bill`"}, "source.quickbooks_source.quickbooks.bundle_item": {"fqn": ["quickbooks_source", "quickbooks", "bundle_item"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bundle_item", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bundle_item", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bundle_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table containing all bundle and item combinations", "columns": {"bundle_id": {"name": "bundle_id", "description": "Reference to the bundle table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item which the bundle is mapped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_quantity": {"name": "item_quantity", "description": "Total item quantity associated with the bunlde and item mapping.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bundle_item`"}, "source.quickbooks_source.quickbooks.bundle": {"fqn": ["quickbooks_source", "quickbooks", "bundle"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.bundle", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "bundle", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "bundle", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all bundles possible to be used within an invoice.", "columns": {"id": {"name": "id", "description": "Unique identifier of the bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the bundle was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the bundle is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Full name given to the bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the bundle was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`bundle`"}, "source.quickbooks_source.quickbooks.credit_memo_line": {"fqn": ["quickbooks_source", "quickbooks", "credit_memo_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.credit_memo_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "credit_memo_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "credit_memo_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual records of credit memos.", "columns": {"credit_memo_id": {"name": "credit_memo_id", "description": "Unique identifier of the credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records from a credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account reference for an item credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item reference for an item credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of item related to the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item related to the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Account reference for a discount credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class reference for a discount credit memo record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the credit memo line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`credit_memo_line`"}, "source.quickbooks_source.quickbooks.credit_memo": {"fqn": ["quickbooks_source", "quickbooks", "credit_memo"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.credit_memo", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "credit_memo", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "credit_memo", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing credit memo records. A credit memo is a refund or credit of payment or part of a payment for goods or services that have been sold.", "columns": {"id": {"name": "id", "description": "Unique identifier for a credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the credit memo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the credit memo occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`credit_memo`"}, "source.quickbooks_source.quickbooks.customer": {"fqn": ["quickbooks_source", "quickbooks", "customer"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.customer", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "customer", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing customers of which are consumers of the service or product that your business offers.", "columns": {"id": {"name": "id", "description": "Unique identifier of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether it is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_with_jobs": {"name": "balance_with_jobs", "description": "Cumulative open balance amount for the Customer (or Job) and all its sub-jobs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_with_parent": {"name": "bill_with_parent", "description": "Boolean indicating whether this Customer object is billed with its parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "Full name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this customer are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "Name of the customer which is displayed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "website": {"name": "website", "description": "The website url associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the customer is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`customer`"}, "source.quickbooks_source.quickbooks.department": {"fqn": ["quickbooks_source", "quickbooks", "department"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.department", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "department", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "department", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records representing physical locations such as stores, and sales regions.", "columns": {"id": {"name": "id", "description": "Unique identifier of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean indicating whether the department is currently active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the department was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of the date when the department was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fully_qualified_name": {"name": "fully_qualified_name", "description": "Fully qualified name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_department": {"name": "sub_department", "description": "Boolean indicating whether the department is a sub department.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_department_id": {"name": "parent_department_id", "description": "Reference to the unique identifier of the parent department if sub_department = true.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`department`"}, "source.quickbooks_source.quickbooks.deposit_line": {"fqn": ["quickbooks_source", "quickbooks", "deposit_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.deposit_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "deposit_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "deposit_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items comprising the deposit.", "columns": {"deposit_id": {"name": "deposit_id", "description": "Unique identifier of the deposit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the deposit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the deposit line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_class_id": {"name": "deposit_class_id", "description": "Reference to the class which the deposit line record is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_account_id": {"name": "deposit_account_id", "description": "Account id of the account which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_customer_id": {"name": "deposit_customer_id", "description": "Customer id of the customer which the deposit is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`deposit_line`"}, "source.quickbooks_source.quickbooks.deposit": {"fqn": ["quickbooks_source", "quickbooks", "deposit"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.deposit", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "deposit", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "deposit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of transactions that record on or more deposits of a customer payment or a new direct deposit.", "columns": {"id": {"name": "id", "description": "Unique identifier of the deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifies the account to be used for this deposit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date which the deposit was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the deposit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Status of the deposit transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`deposit`"}, "source.quickbooks_source.quickbooks.estimate": {"fqn": ["quickbooks_source", "quickbooks", "estimate"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.estimate", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "estimate", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "estimate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing estimates. An estimate represents a proposal for a financial transaction from a business to a customer for goods or services proposed to be sold, including proposed pricing.", "columns": {"id": {"name": "id", "description": "Unique identifier of the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the estimate record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the estimate was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency which the estimate was provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer associated with the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date which the estimate is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Total amount of all line items included in the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the estimate occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_status": {"name": "transaction_status", "description": "Current status of the estimate.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`estimate`"}, "source.quickbooks_source.quickbooks.estimate_line": {"fqn": ["quickbooks_source", "quickbooks", "estimate_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.estimate_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "estimate_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "estimate_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing line item records of an estimate.", "columns": {"estimate_id": {"name": "estimate_id", "description": "Reference to the unique estimate record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the estimate line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to the account associated with the discount estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Reference to the class associated with the discount estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Reference to the account associated with the sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Reference to the class associated with the sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the item associated with a sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for a sales estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item for the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the estimate line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`estimate_line`"}, "source.quickbooks_source.quickbooks.invoice_linked_txn": {"fqn": ["quickbooks_source", "quickbooks", "invoice_linked_txn"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.invoice_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "invoice_linked_txn", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_linked_txn", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table for invoices records to respective estimate and payment objects.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Reference to the unique invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "Reference to the respective payment object for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "estimate_id": {"name": "estimate_id", "description": "Reference to the respective estimate object for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice mapping record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`invoice_linked_txn`"}, "source.quickbooks_source.quickbooks.invoice_line": {"fqn": ["quickbooks_source", "quickbooks", "invoice_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.invoice_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "invoice_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual records from invoices.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the invoice line record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_class_id": {"name": "sales_item_class_id", "description": "Class reference for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item for an item invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Account reference for a discount invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "Class reference for a discount invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bundle_quantity": {"name": "bundle_quantity", "description": "Quantity of items included in the invoice bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "Reference to the bundle associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item associated with the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity of the item included on the invoice line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`invoice_line`"}, "source.quickbooks_source.quickbooks.invoice_line_bundle": {"fqn": ["quickbooks_source", "quickbooks", "invoice_line_bundle"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.invoice_line_bundle", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "invoice_line_bundle", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_bundle", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing lines of an invoice which were bundled.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier of the invoice record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class associated with the invoice line bundle.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total monetary value of the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Reference to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_id": {"name": "item_id", "description": "Reference to the item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Total quantity of the item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity in relation to the sales item on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Reference to the account associated with the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "Unit price of the line item included on the invoice bundle line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`invoice_line_bundle`"}, "source.quickbooks_source.quickbooks.invoice": {"fqn": ["quickbooks_source", "quickbooks", "invoice"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.invoice", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "invoice", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "invoice", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing invoice records. An Invoice represents a sales form where the customer pays for a product or service later.", "columns": {"id": {"name": "id", "description": "Unique identifier of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the deposit transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer reference associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Reference to the address where the invoice is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_id": {"name": "shipping_address_id", "description": "Reference to the address where the invoice is to be shipped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delivery_type": {"name": "delivery_type", "description": "How the invoice is delivered to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date which the invoice payment is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`invoice`"}, "source.quickbooks_source.quickbooks.item": {"fqn": ["quickbooks_source", "quickbooks", "item"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.item", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "item", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing item records. An item is a thing that your company buys, sells, or re-sells, such as products and services.", "columns": {"id": {"name": "id", "description": "Unique identifier of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the object is currently enabled for use by QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the item was created within QuickBooks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "income_account_id": {"name": "income_account_id", "description": "Reference to the posting account, that is, the account that records the proceeds from the sale of this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_account_id": {"name": "asset_account_id", "description": "Reference to the Inventory Asset account that tracks the current value of the inventory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expense_account_id": {"name": "expense_account_id", "description": "Reference to the expense account used to pay the vendor for this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inventory_start_date": {"name": "inventory_start_date", "description": "Timestamp of the date the item was started as inventory.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_item_id": {"name": "parent_item_id", "description": "Reference to the parent item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Full name of the item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase_cost": {"name": "purchase_cost", "description": "Amount paid when buying or ordering the item, as expressed in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Boolean indicating whether the item is taxable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Classification that specifies the use of this item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The monetary value of the service or product, as expressed in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`item`"}, "source.quickbooks_source.quickbooks.journal_entry_line": {"fqn": ["quickbooks_source", "quickbooks", "journal_entry_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.journal_entry_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "journal_entry_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "journal_entry_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a journal entry.", "columns": {"journal_entry_id": {"name": "journal_entry_id", "description": "Unique identifier of the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the journal entry record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Account id of the account which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer which the journal entry is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the journal entry is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the journal entry is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billable_status": {"name": "billable_status", "description": "Status of the journal entry indicating whether it is billable or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the journal entry line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posting_type": {"name": "posting_type", "description": "Indicates whether this JournalEntry line is a debit or credit. Valid values are Credit and Debit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`journal_entry_line`"}, "source.quickbooks_source.quickbooks.journal_entry": {"fqn": ["quickbooks_source", "quickbooks", "journal_entry"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.journal_entry", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "journal_entry", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "journal_entry", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing journal entry transactions.", "columns": {"id": {"name": "id", "description": "Unique identifier of the journal entry.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment": {"name": "adjustment", "description": "Indicates the total amount of the transaction. This includes the total of all the charges, allowances, and taxes. By default, this is recalculated by the system based on sub-items total and overridden.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the journal entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "The value of this field will always be set to zero.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the journal entry was transacted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`journal_entry`"}, "source.quickbooks_source.quickbooks.payment_line": {"fqn": ["quickbooks_source", "quickbooks", "payment_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.payment_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "payment_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "payment_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items recorded within a payment.", "columns": {"payment_id": {"name": "payment_id", "description": "Unique identifier of the payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the payment record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the payment line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "Journal entry reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_id": {"name": "deposit_id", "description": "Deposit reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Invoice reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_memo_id": {"name": "credit_memo_id", "description": "credit memo reference associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`payment_line`"}, "source.quickbooks_source.quickbooks.payment": {"fqn": ["quickbooks_source", "quickbooks", "payment"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.payment", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "payment", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "payment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all payment records. The payment can be applied for a particular customer against multiple Invoices and Credit Memos. It can also be created without any Invoice or Credit Memo, by just specifying an amount.", "columns": {"id": {"name": "id", "description": "Unique identifier of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "Indicates the amount that has not been applied to pay amounts owed for sales transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receivable_account_id": {"name": "receivable_account_id", "description": "Identifies the account for obtaining a receivable from this payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Identifies the account to be used for this payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the payment occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to a customer or job.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`payment`"}, "source.quickbooks_source.quickbooks.purchase_line": {"fqn": ["quickbooks_source", "quickbooks", "purchase_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.purchase_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "purchase_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a purchase.", "columns": {"purchase_id": {"name": "purchase_id", "description": "Unique identifier of the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`purchase_line`"}, "source.quickbooks_source.quickbooks.purchase": {"fqn": ["quickbooks_source", "quickbooks", "purchase"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.purchase", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "purchase", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of purchase expenses.", "columns": {"id": {"name": "id", "description": "Unique identifier of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Specifies the account reference to which this purchase is applied based on the PaymentType.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit": {"name": "credit", "description": "Boolean where `false` represents a charge and `true` represents a refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the purchase is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Reference to the customer which the purchase is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment type of the purchase. Type can be Cash, Check, or CreditCard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`purchase`"}, "source.quickbooks_source.quickbooks.purchase_order_line": {"fqn": ["quickbooks_source", "quickbooks", "purchase_order_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.purchase_order_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "purchase_order_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a transaction associated with a purchase order.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Unique identifier of the purchase order record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account which the purchase order is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense purchase order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the purchase billable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "The customer id associated with the account based purchase order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code reference associated to the purchase order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense purchase order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense purchase order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "The customer id associated with the item based purchase order line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the purchase line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`purchase_order_line`"}, "source.quickbooks_source.quickbooks.purchase_order_linked_txn": {"fqn": ["quickbooks_source", "quickbooks", "purchase_order_linked_txn"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.purchase_order_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "purchase_order_linked_txn", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order_linked_txn", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Mapping table for purchase order records to respective bill and purchase objects.", "columns": {"purchase_order_id": {"name": "purchase_order_id", "description": "Reference to the unique purchase order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_id": {"name": "bill_id", "description": "Reference to the respective bill object for the purchase order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchase_id": {"name": "purchase_id", "description": "Reference to the respective purchase object for the purchase_order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_credit_id": {"name": "vendor_credit_id", "description": "Reference to the respective vendor credit object for the purchase_order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the purchase order mapping record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`purchase_order_linked_txn`"}, "source.quickbooks_source.quickbooks.purchase_order": {"fqn": ["quickbooks_source", "quickbooks", "purchase_order"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.purchase_order", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "purchase_order", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "purchase_order", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of purchase orders (PO).", "columns": {"id": {"name": "id", "description": "Unique identifier of the purchase order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the purchase order is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the purchase order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_po_number": {"name": "custom_po_number", "description": "Custom field for PO number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "custom_customer_type": {"name": "custom_customer_type", "description": "Custom field for customer type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Timestamp of the date when the purchase order is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "A message for the vendor. This text appears on the purchase order object sent to the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date when the purchase order occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction. This note does not appear on the purchase order to the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Account id for which the purchase order will credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Purchase order status. Valid values are \"Open\" and \"Closed\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for the purchase order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`purchase_order`"}, "source.quickbooks_source.quickbooks.refund_receipt_line": {"fqn": ["quickbooks_source", "quickbooks", "refund_receipt_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.refund_receipt_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "refund_receipt_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "refund_receipt_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a refund transaction.", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier of the refund record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the refund record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the refund line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "User defined description of the refund line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Quantity of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item associated with the refund receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account which the refund is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the refunded item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`refund_receipt_line`"}, "source.quickbooks_source.quickbooks.refund_receipt": {"fqn": ["quickbooks_source", "quickbooks", "refund_receipt"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.refund_receipt", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "refund_receipt", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "refund_receipt", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing refunds to the customer for a product or service that was provided.", "columns": {"id": {"name": "id", "description": "Unique identifier of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the refund receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the refund receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account from which payment money is refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the customer credited with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date in which the refund occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`refund_receipt`"}, "source.quickbooks_source.quickbooks.sales_receipt_line": {"fqn": ["quickbooks_source", "quickbooks", "sales_receipt_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.sales_receipt_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "sales_receipt_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "sales_receipt_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual line items of a sales transaction.", "columns": {"sales_receipt_id": {"name": "sales_receipt_id", "description": "Unique identifier of the sales record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the sales record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the sales receipt line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_account_id": {"name": "discount_account_id", "description": "Reference to Income account used to track discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_account_id": {"name": "sales_item_account_id", "description": "Account id of the account credited with the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_item_id": {"name": "sales_item_item_id", "description": "Item id of the item sold in the sale line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_tax_code_id": {"name": "sales_item_tax_code_id", "description": "Tax code id of the tax code associated with the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_quantity": {"name": "sales_item_quantity", "description": "Total quantity of items included in the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_item_unit_price": {"name": "sales_item_unit_price", "description": "Unit price of the item included on the sales line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`sales_receipt_line`"}, "source.quickbooks_source.quickbooks.sales_receipt": {"fqn": ["quickbooks_source", "quickbooks", "sales_receipt"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.sales_receipt", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "sales_receipt", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "sales_receipt", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing sales receipts that are given to a customer. A sales receipt, payment is received as part of the sale of goods and services. The sales receipt specifies a deposit account where the customer's payment is deposited.", "columns": {"id": {"name": "id", "description": "Unique identifier of the sales receipt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance reflecting any payments made against the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total amount of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deposit_to_account_id": {"name": "deposit_to_account_id", "description": "Account to which payment money is deposited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the sale was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Customer id of the sold to customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the sales receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_id": {"name": "class_id", "description": "Reference to the class which the sales receipt is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the sale occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`sales_receipt`"}, "source.quickbooks_source.quickbooks.transfer": {"fqn": ["quickbooks_source", "quickbooks", "transfer"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.transfer", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "transfer", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "transfer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing records of transfers. A Transfer represents a transaction where funds are moved between two accounts from the company's QuickBooks chart of accounts.", "columns": {"id": {"name": "id", "description": "Unique identifier of the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_account_id": {"name": "from_account_id", "description": "Account id of the account which the transfer is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_account_id": {"name": "to_account_id", "description": "Account id of the account which the transfer is to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp of the date which the transfer occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`transfer`"}, "source.quickbooks_source.quickbooks.vendor_credit_line": {"fqn": ["quickbooks_source", "quickbooks", "vendor_credit_line"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.vendor_credit_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "vendor_credit_line", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor_credit_line", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing individual vendor credit line items.", "columns": {"vendor_credit_id": {"name": "vendor_credit_id", "description": "Unique identifier of the vendor credit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "Index count of records associated with the vendor credit record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_account_id": {"name": "account_expense_account_id", "description": "Account id of the account credited for the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_billable_status": {"name": "account_expense_billable_status", "description": "Status of the billable related to the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_tax_code_id": {"name": "account_expense_tax_code_id", "description": "Tax code id of the tax code associated with the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_customer_id": {"name": "account_expense_customer_id", "description": "Customer reference for the vendor credit expense.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_expense_class_id": {"name": "account_expense_class_id", "description": "The class reference associated with the account based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_customer_id": {"name": "item_expense_customer_id", "description": "Customer reference for the item on the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_item_id": {"name": "item_expense_item_id", "description": "The item reference associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_quantity": {"name": "item_expense_quantity", "description": "Quantity of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_unit_price": {"name": "item_expense_unit_price", "description": "Unit price of the item within the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_class_id": {"name": "item_expense_class_id", "description": "Reference to the class associated with the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_expense_billable_status": {"name": "item_expense_billable_status", "description": "The billable status of the item based expense vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Monetary amount of the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the vendor credit line.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`vendor_credit_line`"}, "source.quickbooks_source.quickbooks.vendor_credit": {"fqn": ["quickbooks_source", "quickbooks", "vendor_credit"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.vendor_credit", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "vendor_credit", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor_credit", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all vendor credit records. A vendor credit is an accounts payable transaction that represents a refund or credit of payment for goods or services.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor credit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The current amount of the vendor credit reflecting any adjustments to the original credit amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "Indicates the total credit amount, determined by taking the total of all all lines of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "doc_number": {"name": "doc_number", "description": "Reference number for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts on the associated transaction are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The number of home currency units it takes to equal one unit of currency specified by currency_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date the vendor credit was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payable_account_id": {"name": "payable_account_id", "description": "Specifies to which AP account the bill is credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "department_id": {"name": "department_id", "description": "Reference to the department which the vendor credit is associated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "private_note": {"name": "private_note", "description": "User entered, organization-private note about the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "The date entered by the user when this transaction occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_id": {"name": "vendor_id", "description": "Reference to the vendor for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean created by Fivetran to indicate whether the record has been deleted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`vendor_credit`"}, "source.quickbooks_source.quickbooks.vendor": {"fqn": ["quickbooks_source", "quickbooks", "vendor"], "database": "dbt-package-testing", "schema": "quickbooks", "unique_id": "source.quickbooks_source.quickbooks.vendor", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "models/src_quickbooks.yml", "original_file_path": "models/src_quickbooks.yml", "name": "vendor", "source_name": "quickbooks", "source_description": "", "loader": "fivetran", "identifier": "vendor", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 48, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all vendor records. A vendor is the seller from whom your company purchases any service or product.", "columns": {"id": {"name": "id", "description": "Unique identifier of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Name or number of the account associated with this vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_address_id": {"name": "billing_address_id", "description": "Address reference for the billing address of the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Boolean indicating whether the vendor is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Specifies the open balance amount or the amount unpaid by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The name of the company associated with the person or organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the date when the vendor was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency_id": {"name": "currency_id", "description": "Reference to the currency in which all amounts associated with this vendor are expressed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "display_name": {"name": "display_name", "description": "The name of the vendor as displayed. Must be unique across all Vendor, Customer, and Employee objects.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "web_url": {"name": "web_url", "description": "Website url associated with the vendor.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vendor_1099": {"name": "vendor_1099", "description": "Boolean indicating whether this vendor is an independent contractor; someone who is given a 1099-MISC form at the end of the year.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`quickbooks`.`vendor`"}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n  {%- set partition_type =\n      'date' if partition_by.data_type in ('timestamp, datetime')\n      else partition_by.data_type -%}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', packages = dbt_utils._get_utils_namespaces()) (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', packages = dbt_utils._get_utils_namespaces())(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{ dbt_utils.alternative_concat(fields) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', packages = dbt_utils._get_utils_namespaces()) (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', packages = dbt_utils._get_utils_namespaces())(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', packages = dbt_utils._get_utils_namespaces())()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', packages = dbt_utils._get_utils_namespaces()) (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', packages = dbt_utils._get_utils_namespaces())(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', packages = dbt_utils._get_utils_namespaces()) (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', packages = dbt_utils._get_utils_namespaces()) (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', packages = dbt_utils._get_utils_namespaces()) (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', packages = dbt_utils._get_utils_namespaces()) (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', packages = dbt_utils._get_utils_namespaces())()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', packages = dbt_utils._get_utils_namespaces()) (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._get_utils_namespaces": {"unique_id": "macro.dbt_utils._get_utils_namespaces", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_get_utils_namespaces.sql", "original_file_path": "macros/cross_db_utils/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', packages = dbt_utils._get_utils_namespaces()) (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', packages = dbt_utils._get_utils_namespaces()) (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', packages = dbt_utils._get_utils_namespaces()) (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', packages = dbt_utils._get_utils_namespaces())(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', packages = dbt_utils._get_utils_namespaces())(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', packages = dbt_utils._get_utils_namespaces())(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', packages = dbt_utils._get_utils_namespaces())(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', packages = dbt_utils._get_utils_namespaces())(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', packages = dbt_utils._get_utils_namespaces())(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', packages = dbt_utils._get_utils_namespaces())(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', packages = dbt_utils._get_utils_namespaces())(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n    {{ return(adapter.dispatch('haversine_distance', packages = dbt_utils._get_utils_namespaces())(lat1,lon1,lat2,lon2)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n  {{ return(adapter.dispatch('test_relationships_where', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', packages = dbt_utils._get_utils_namespaces())(model, datepart, interval, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n  {{ return(adapter.dispatch('test_not_constant', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          {# In TSQL, subquery aggregate columns need aliases #}\n          {# thus: a filler col name, 'filler_column' #}\n          count(distinct {{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% macro test_unique_where(model) %}\r\n  {{ return(adapter.dispatch('test_unique_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom (\r\n\r\n    select\r\n        {{ column_name }}\r\n\r\n    from {{ model }}\r\n    where {{ column_name }} is not null\r\n      {% if where %} and {{ where }} {% endif %}\r\n    group by {{ column_name }}\r\n    having count(*) > 1\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n  {{ return(adapter.dispatch('test_at_least_one', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model, quote_columns = false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', packages = dbt_utils._get_utils_namespaces())(model, quote_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, quote_columns = false) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{% if not quote_columns %}\n    {%- set column_list=columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n    {{ return(adapter.dispatch('test_cardinality_equality', packages = dbt_utils._get_utils_namespaces())(model, to, field, **kwargs)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, to, field) %}\n\n{# T-SQL doesn't let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ column_name }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', packages = dbt_utils._get_utils_namespaces())(model, condition, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% macro test_not_null_where(model) %}\r\n  {{ return(adapter.dispatch('test_not_null_where', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\r\n\r\nselect count(*)\r\nfrom {{ model }}\r\nwhere {{ column_name }} is null\r\n{% if where %} and {{ where }} {% endif %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n  {{ return(adapter.dispatch('test_equality', packages = dbt_utils._get_utils_namespaces())(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- set compare_columns = kwargs.get('compare_columns', None) -%}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', packages = dbt_utils._get_utils_namespaces())(model, lower_bound_column, upper_bound_column, partition_by, gaps)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', packages = dbt_utils._get_utils_namespaces())(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', packages = dbt_utils._get_utils_namespaces())(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', packages = dbt_utils._get_utils_namespaces())(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', packages = dbt_utils._get_utils_namespaces())(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', packages = dbt_utils._get_utils_namespaces())(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', packages = dbt_utils._get_utils_namespaces())(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', packages = dbt_utils._get_utils_namespaces())(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', packages = dbt_utils._get_utils_namespaces())(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', packages = dbt_utils._get_utils_namespaces())(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', packages = dbt_utils._get_utils_namespaces())(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', packages = dbt_utils._get_utils_namespaces())(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', packages = dbt_utils._get_utils_namespaces())\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', packages = dbt_utils._get_utils_namespaces())(table, column, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', packages = dbt_utils._get_utils_namespaces())(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', packages = dbt_utils._get_utils_namespaces())(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', packages = fivetran_utils._get_utils_namespaces()) (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', packages = fivetran_utils._get_utils_namespaces()) (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('datediff', packages = fivetran_utils._get_utils_namespaces())(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__datediff": {"unique_id": "macro.fivetran_utils.postgres__datediff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', packages = fivetran_utils._get_utils_namespaces()) (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.snowflake__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "snowflake__get_columns_for_macro", "macro_sql": "{% macro snowflake__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) = 'number' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) = 'numeric' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type == 'bigquery' %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', packages = fivetran_utils._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', packages = fivetran_utils._get_utils_namespaces()) (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', packages = fivetran_utils._get_utils_namespaces()) (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils._get_utils_namespaces": {"unique_id": "macro.fivetran_utils._get_utils_namespaces", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/_get_utils_namespaces.sql", "original_file_path": "macros/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils', 'fivetran_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', packages = fivetran_utils._get_utils_namespaces()) (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.snowflake__array_agg": {"unique_id": "macro.fivetran_utils.snowflake__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "snowflake__array_agg", "macro_sql": "{% macro snowflake__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.bigquery__array_agg": {"unique_id": "macro.fivetran_utils.bigquery__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "bigquery__array_agg", "macro_sql": "{% macro bigquery__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_deposit_line_columns": {"unique_id": "macro.quickbooks_source.get_deposit_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_deposit_line_columns.sql", "original_file_path": "macros/get_deposit_line_columns.sql", "name": "get_deposit_line_columns", "macro_sql": "{% macro get_deposit_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_check_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_tax_applicable_on\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_transaction_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"detail_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refund_receipt_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_receipt_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_vendor_credit_line_columns": {"unique_id": "macro.quickbooks_source.get_vendor_credit_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_vendor_credit_line_columns.sql", "original_file_path": "macros/get_vendor_credit_line_columns.sql", "name": "get_vendor_credit_line_columns", "macro_sql": "{% macro get_vendor_credit_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_account_columns": {"unique_id": "macro.quickbooks_source.get_account_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "name": "get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_sub_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"balance_with_sub_accounts\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"classification\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sub_account\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_purchase_order_linked_txn_columns": {"unique_id": "macro.quickbooks_source.get_purchase_order_linked_txn_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_purchase_order_linked_txn_columns.sql", "original_file_path": "macros/get_purchase_order_linked_txn_columns.sql", "name": "get_purchase_order_linked_txn_columns", "macro_sql": "{% macro get_purchase_order_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bill_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_order_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_sales_receipt_line_columns": {"unique_id": "macro.quickbooks_source.get_sales_receipt_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_sales_receipt_line_columns.sql", "original_file_path": "macros/get_sales_receipt_line_columns.sql", "name": "get_sales_receipt_line_columns", "macro_sql": "{% macro get_sales_receipt_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_receipt_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bill_linked_txn_columns": {"unique_id": "macro.quickbooks_source.get_bill_linked_txn_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bill_linked_txn_columns.sql", "original_file_path": "macros/get_bill_linked_txn_columns.sql", "name": "get_bill_linked_txn_columns", "macro_sql": "{% macro get_bill_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bill_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bill_payment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bill_payment_line_columns": {"unique_id": "macro.quickbooks_source.get_bill_payment_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bill_payment_line_columns.sql", "original_file_path": "macros/get_bill_payment_line_columns.sql", "name": "get_bill_payment_line_columns", "macro_sql": "{% macro get_bill_payment_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bill_payment_credit_card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bill_payment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_credit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"linked_bill_payment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_credit_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_transfer_columns": {"unique_id": "macro.quickbooks_source.get_transfer_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_transfer_columns.sql", "original_file_path": "macros/get_transfer_columns.sql", "name": "get_transfer_columns", "macro_sql": "{% macro get_transfer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"from_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"to_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_purchase_columns": {"unique_id": "macro.quickbooks_source.get_purchase_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_purchase_columns.sql", "original_file_path": "macros/get_purchase_columns.sql", "name": "get_purchase_columns", "macro_sql": "{% macro get_purchase_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit\", \"datatype\": \"boolean\"},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"employee_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"remit_to_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_journal_entry_line_columns": {"unique_id": "macro.quickbooks_source.get_journal_entry_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_journal_entry_line_columns.sql", "original_file_path": "macros/get_journal_entry_line_columns.sql", "name": "get_journal_entry_line_columns", "macro_sql": "{% macro get_journal_entry_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"employee_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"posting_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tax_applicable_on\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_deposit_columns": {"unique_id": "macro.quickbooks_source.get_deposit_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_deposit_columns.sql", "original_file_path": "macros/get_deposit_columns.sql", "name": "get_deposit_columns", "macro_sql": "{% macro get_deposit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cash_back_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cash_back_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"cash_back_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_purchase_order_columns": {"unique_id": "macro.quickbooks_source.get_purchase_order_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_purchase_order_columns.sql", "original_file_path": "macros/get_purchase_order_columns.sql", "name": "get_purchase_order_columns", "macro_sql": "{% macro get_purchase_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custom_customer_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custom_po_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_credit_memo_line_columns": {"unique_id": "macro.quickbooks_source.get_credit_memo_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_credit_memo_line_columns.sql", "original_file_path": "macros/get_credit_memo_line_columns.sql", "name": "get_credit_memo_line_columns", "macro_sql": "{% macro get_credit_memo_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit_memo_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_journal_entry_columns": {"unique_id": "macro.quickbooks_source.get_journal_entry_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_journal_entry_columns.sql", "original_file_path": "macros/get_journal_entry_columns.sql", "name": "get_journal_entry_columns", "macro_sql": "{% macro get_journal_entry_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"adjustment\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_vendor_columns": {"unique_id": "macro.quickbooks_source.get_vendor_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_vendor_columns.sql", "original_file_path": "macros/get_vendor_columns.sql", "name": "get_vendor_columns", "macro_sql": "{% macro get_vendor_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"alternate_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"company_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"display_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"family_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fax_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"given_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mobile_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"other_contacts\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"primary_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_on_check_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"suffix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_identifier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_1099\", \"datatype\": \"boolean\"},\n    {\"name\": \"web_url\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_invoice_linked_txn_columns": {"unique_id": "macro.quickbooks_source.get_invoice_linked_txn_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_invoice_linked_txn_columns.sql", "original_file_path": "macros/get_invoice_linked_txn_columns.sql", "name": "get_invoice_linked_txn_columns", "macro_sql": "{% macro get_invoice_linked_txn_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"charge_credit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"estimate_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reimburse_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_activity_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_item_columns": {"unique_id": "macro.quickbooks_source.get_item_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_item_columns.sql", "original_file_path": "macros/get_item_columns.sql", "name": "get_item_columns", "macro_sql": "{% macro get_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"asset_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"income_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"inventory_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchase_description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"purchase_tax_included\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity_on_hand\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_tax_included\", \"datatype\": \"boolean\"},\n    {\"name\": \"stock_keeping_unit\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sub_item\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"track_quantity_on_hand\", \"datatype\": \"boolean\"},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_credit_memo_columns": {"unique_id": "macro.quickbooks_source.get_credit_memo_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_credit_memo_columns.sql", "original_file_path": "macros/get_credit_memo_columns.sql", "name": "get_credit_memo_columns", "macro_sql": "{% macro get_credit_memo_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custom_p_o_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"remaining_credit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bundle_item_columns": {"unique_id": "macro.quickbooks_source.get_bundle_item_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bundle_item_columns.sql", "original_file_path": "macros/get_bundle_item_columns.sql", "name": "get_bundle_item_columns", "macro_sql": "{% macro get_bundle_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_quantity\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_payment_columns": {"unique_id": "macro.quickbooks_source.get_payment_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_payment_columns.sql", "original_file_path": "macros/get_payment_columns.sql", "name": "get_payment_columns", "macro_sql": "{% macro get_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"receivable_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reference_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unapplied_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_vendor_credit_columns": {"unique_id": "macro.quickbooks_source.get_vendor_credit_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_vendor_credit_columns.sql", "original_file_path": "macros/get_vendor_credit_columns.sql", "name": "get_vendor_credit_columns", "macro_sql": "{% macro get_vendor_credit_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_refund_receipt_columns": {"unique_id": "macro.quickbooks_source.get_refund_receipt_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_refund_receipt_columns.sql", "original_file_path": "macros/get_refund_receipt_columns.sql", "name": "get_refund_receipt_columns", "macro_sql": "{% macro get_refund_receipt_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_payment_account_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_payment_bank_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_payment_check_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_payment_name_on_account\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_payment_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": \"date\"},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_reference_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bill_columns": {"unique_id": "macro.quickbooks_source.get_bill_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bill_columns.sql", "original_file_path": "macros/get_bill_columns.sql", "name": "get_bill_columns", "macro_sql": "{% macro get_bill_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bill_line_columns": {"unique_id": "macro.quickbooks_source.get_bill_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bill_line_columns.sql", "original_file_path": "macros/get_bill_line_columns.sql", "name": "get_bill_line_columns", "macro_sql": "{% macro get_bill_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_customer_columns": {"unique_id": "macro.quickbooks_source.get_customer_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "name": "get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"alternate_phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ar_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"balance_with_jobs\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bill_with_parent\", \"datatype\": \"boolean\"},\n    {\"name\": \"company_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"display_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"family_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fax_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"given_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"job\", \"datatype\": \"boolean\"},\n    {\"name\": \"level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"middle_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"mobile_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"open_balance_date\", \"datatype\": \"date\"},\n    {\"name\": \"parent_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"preferred_delivery_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_on_check_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"resale_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"suffix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_exemption_reason_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"title\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"website\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_invoice_columns": {"unique_id": "macro.quickbooks_source.get_invoice_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "name": "get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"allow_ipnpayment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_achpayment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_credit_card_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"allow_online_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_bcc_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_cc_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custom_p_o_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"custom_sales_rep\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"delivery_time\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"delivery_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_payment_line_columns": {"unique_id": "macro.quickbooks_source.get_payment_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_payment_line_columns.sql", "original_file_path": "macros/get_payment_line_columns.sql", "name": "get_payment_line_columns", "macro_sql": "{% macro get_payment_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"check_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_credit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_memo_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"expense_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_department_columns": {"unique_id": "macro.quickbooks_source.get_department_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_department_columns.sql", "original_file_path": "macros/get_department_columns.sql", "name": "get_department_columns", "macro_sql": "{% macro get_department_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"parent_department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sub_department\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_invoice_line_columns": {"unique_id": "macro.quickbooks_source.get_invoice_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_invoice_line_columns.sql", "original_file_path": "macros/get_invoice_line_columns.sql", "name": "get_invoice_line_columns", "macro_sql": "{% macro get_invoice_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_purchase_order_line_columns": {"unique_id": "macro.quickbooks_source.get_purchase_order_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_purchase_order_line_columns.sql", "original_file_path": "macros/get_purchase_order_line_columns.sql", "name": "get_purchase_order_line_columns", "macro_sql": "{% macro get_purchase_order_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchase_order_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_purchase_line_columns": {"unique_id": "macro.quickbooks_source.get_purchase_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_purchase_line_columns.sql", "original_file_path": "macros/get_purchase_line_columns.sql", "name": "get_purchase_line_columns", "macro_sql": "{% macro get_purchase_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_expense_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"account_expense_tax_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"account_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_billable_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"item_expense_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_expense_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"purchase_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_refund_receipt_line_columns": {"unique_id": "macro.quickbooks_source.get_refund_receipt_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_refund_receipt_line_columns.sql", "original_file_path": "macros/get_refund_receipt_line_columns.sql", "name": "get_refund_receipt_line_columns", "macro_sql": "{% macro get_refund_receipt_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": \"date\"},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_estimate_columns": {"unique_id": "macro.quickbooks_source.get_estimate_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_estimate_columns.sql", "original_file_path": "macros/get_estimate_columns.sql", "name": "get_estimate_columns", "macro_sql": "{% macro get_estimate_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"accepted_by\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"accepted_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"bill_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"delivery_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"expiration_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_term_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"transaction_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bill_payment_columns": {"unique_id": "macro.quickbooks_source.get_bill_payment_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bill_payment_columns.sql", "original_file_path": "macros/get_bill_payment_columns.sql", "name": "get_bill_payment_columns", "macro_sql": "{% macro get_bill_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"check_bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"check_print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit_card_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pay_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payable_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"process_bill_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"vendor_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_sales_receipt_columns": {"unique_id": "macro.quickbooks_source.get_sales_receipt_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_sales_receipt_columns.sql", "original_file_path": "macros/get_sales_receipt_columns.sql", "name": "get_sales_receipt_columns", "macro_sql": "{% macro get_sales_receipt_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"apply_tax_after_discount\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bill_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"credit_card_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"credit_card_auth_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_billing_address_street\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_month\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cc_expiry_year\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_cctrans_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_name_on_account\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_process_payment\", \"datatype\": \"boolean\"},\n    {\"name\": \"credit_card_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_card_transaction_authorization_time\", \"datatype\": \"date\"},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"delivery_time\", \"datatype\": \"date\"},\n    {\"name\": \"delivery_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"department_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"deposit_to_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"doc_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"global_tax_calculation\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"home_balance\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"home_total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_reference_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"private_note\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ship_date\", \"datatype\": \"date\"},\n    {\"name\": \"shipping_address_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"total_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"total_tax\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transaction_date\", \"datatype\": \"date\"},\n    {\"name\": \"transaction_source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_bundle_columns": {"unique_id": "macro.quickbooks_source.get_bundle_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_bundle_columns.sql", "original_file_path": "macros/get_bundle_columns.sql", "name": "get_bundle_columns", "macro_sql": "{% macro get_bundle_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fully_qualified_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"print_grouped_items\", \"datatype\": \"boolean\"},\n    {\"name\": \"purchase_cost\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sync_token\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_estimate_line_columns": {"unique_id": "macro.quickbooks_source.get_estimate_line_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_estimate_line_columns.sql", "original_file_path": "macros/get_estimate_line_columns.sql", "name": "get_estimate_line_columns", "macro_sql": "{% macro get_estimate_line_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"bundle_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bundle_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_discount_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_percent_based\", \"datatype\": \"boolean\"},\n    {\"name\": \"discount_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"estimate_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_unit_price\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sub_total_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_address_columns": {"unique_id": "macro.quickbooks_source.get_address_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_address_columns.sql", "original_file_path": "macros/get_address_columns.sql", "name": "get_address_columns", "macro_sql": "{% macro get_address_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country_sub_division_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"latitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_3\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_5\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"longitude\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"postal_code\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.quickbooks_source.get_invoice_line_bundle_columns": {"unique_id": "macro.quickbooks_source.get_invoice_line_bundle_columns", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "macros/get_invoice_line_bundle_columns.sql", "original_file_path": "macros/get_invoice_line_bundle_columns.sql", "name": "get_invoice_line_bundle_columns", "macro_sql": "{% macro get_invoice_line_bundle_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"class_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"discount_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_line_index\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"line_num\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"sales_item_quantity\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"sales_item_tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"service_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"tax_code_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [{"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_tmp')),\n                staging_columns=get_purchase_order_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(id as {{ dbt_utils.type_string() }}) as purchase_order_id,\n        created_at,\n        custom_po_number,\n        cast(doc_number as {{ dbt_utils.type_string() }}) as doc_number,\n        currency_id,\n        exchange_rate,\n        total_amount,\n        cast(payable_account_id as {{ dbt_utils.type_string() }}) as payable_account_id,\n        cast(vendor_id as {{ dbt_utils.type_string() }}) as vendor_id,\n        transaction_date,\n        status,\n        due_date,\n        _fivetran_deleted\n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(_fivetran_deleted, false)", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__purchase_order.sql", "original_file_path": "models/stg_quickbooks__purchase_order.sql", "name": "stg_quickbooks__purchase_order", "resource_type": "model", "alias": "stg_quickbooks__purchase_order", "checksum": {"name": "sha256", "checksum": "8d70410dcbf7d524f75a5e31c3500415b6d61f6beedaaf3d02593a69350e75fb"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase_order_tmp"], ["stg_quickbooks__purchase_order_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": false}}, {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_line_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_line_tmp')),\n                staging_columns=get_purchase_order_line_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as {{ dbt_utils.type_string() }}) as purchase_order_id,\n        index,\n        cast(account_expense_account_id as {{ dbt_utils.type_string() }}) as account_expense_account_id,\n        account_expense_class_id,\n        account_expense_billable_status,\n        account_expense_customer_id,\n        account_expense_tax_code_id,\n        cast(item_expense_item_id as {{ dbt_utils.type_string() }}) as item_expense_item_id,\n        item_expense_billable_status,\n        item_expense_customer_id,\n        amount,\n        description\n    from fields\n)\n\nselect *\nfrom final", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order_line"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__purchase_order_line.sql", "original_file_path": "models/stg_quickbooks__purchase_order_line.sql", "name": "stg_quickbooks__purchase_order_line", "resource_type": "model", "alias": "stg_quickbooks__purchase_order_line", "checksum": {"name": "sha256", "checksum": "56a40695b8f9408f809769a8ca93047b91dd0adda853560599d7215440bc1763"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase_order_line_tmp"], ["stg_quickbooks__purchase_order_line_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_line_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": false}}, {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nwith base as (\n\n    select *\n    from {{ ref('stg_quickbooks__purchase_order_linked_txn_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns\n        that are expected/needed (staging_columns from dbt_quickbooks_source/models/tmp/) and compares it with columns\n        in the source (source_columns from dbt_quickbooks_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_quickbooks__purchase_order_linked_txn_tmp')),\n                staging_columns=get_purchase_order_linked_txn_columns()\n            )\n        }}\n\n    from base\n),\n\nfinal as (\n\n    select\n        cast(purchase_order_id as {{ dbt_utils.type_string() }}) as purchase_order_id,\n        cast(bill_id as {{ dbt_utils.type_string() }}) as bill_id,\n        cast(purchase_id as {{ dbt_utils.type_string() }}) as purchase_id,\n        cast(vendor_credit_id as {{ dbt_utils.type_string() }}) as vendor_credit_id,\n        index\n    from fields\n)\n\nselect *\nfrom final", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "stg_quickbooks__purchase_order_linked_txn"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "stg_quickbooks__purchase_order_linked_txn.sql", "original_file_path": "models/stg_quickbooks__purchase_order_linked_txn.sql", "name": "stg_quickbooks__purchase_order_linked_txn", "resource_type": "model", "alias": "stg_quickbooks__purchase_order_linked_txn", "checksum": {"name": "sha256", "checksum": "77e00cf575e1a2a672d1139b3e004f0044c8002463b588258bcf5cda968a3361"}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_quickbooks__purchase_order_linked_txn_tmp"], ["stg_quickbooks__purchase_order_linked_txn_tmp"]], "sources": [], "depends_on": {"macros": ["macro.quickbooks_source.get_purchase_order_linked_txn_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_int"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "table", "enabled": false}}, {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nselect *\nfrom {{ var('purchase_order_line') }}", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_line_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_line_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_line_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_line_tmp.sql", "name": "stg_quickbooks__purchase_order_line_tmp", "resource_type": "model", "alias": "stg_quickbooks__purchase_order_line_tmp", "checksum": {"name": "sha256", "checksum": "207db6c4ef8cfef78b8de6a2c96cbd0477f63e0a63eda4a08ee215057990ae34"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["quickbooks", "purchase_order_line"]], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": false}}, {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nselect *\nfrom {{ var('purchase_order') }}", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_tmp.sql", "name": "stg_quickbooks__purchase_order_tmp", "resource_type": "model", "alias": "stg_quickbooks__purchase_order_tmp", "checksum": {"name": "sha256", "checksum": "1a4e5034a6f95a3381e9190114b9b6d75ba273524e532d19926fff7061f286a2"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["quickbooks", "purchase_order"]], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": false}}, {"raw_sql": "--To enable this model, set the using_invoice variable within your dbt_project.yml file to True.\n{{ config(enabled=var('using_purchase_order', False)) }}\n\nselect *\nfrom {{ var('purchase_order_linked_txn') }}", "database": "dbt-package-testing", "schema": "quickbooks_integration_tests_quickbooks_staging", "fqn": ["quickbooks_source", "tmp", "stg_quickbooks__purchase_order_linked_txn_tmp"], "unique_id": "model.quickbooks_source.stg_quickbooks__purchase_order_linked_txn_tmp", "package_name": "quickbooks_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/QuickBooks/dbt_quickbooks/integration_tests/dbt_modules/quickbooks_source", "path": "tmp/stg_quickbooks__purchase_order_linked_txn_tmp.sql", "original_file_path": "models/tmp/stg_quickbooks__purchase_order_linked_txn_tmp.sql", "name": "stg_quickbooks__purchase_order_linked_txn_tmp", "resource_type": "model", "alias": "stg_quickbooks__purchase_order_linked_txn_tmp", "checksum": {"name": "sha256", "checksum": "d642b45e31ac46f65cca1d76385d5b5ec5dcaa5ff18a1120a440c13f412c575f"}, "config": {"enabled": false, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "quickbooks_staging", "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["quickbooks", "purchase_order_linked_txn"]], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "quickbooks_staging", "materialized": "view", "enabled": false}}], "parent_map": {"seed.quickbooks_integration_tests.bill_payment_data": [], "seed.quickbooks_integration_tests.bundle_data": [], "seed.quickbooks_integration_tests.bill_payment_line_data": [], "seed.quickbooks_integration_tests.payment_line_data": [], "seed.quickbooks_integration_tests.vendor_data": [], "seed.quickbooks_integration_tests.address_data": [], "seed.quickbooks_integration_tests.invoice_line_bundle_data": [], "seed.quickbooks_integration_tests.invoice_data": [], "seed.quickbooks_integration_tests.payment_data": [], "seed.quickbooks_integration_tests.invoice_line_data": [], "seed.quickbooks_integration_tests.deposit_line_data": [], "seed.quickbooks_integration_tests.estimate_line_data": [], "seed.quickbooks_integration_tests.purchase_data": [], "seed.quickbooks_integration_tests.refund_receipt_line_data": [], "seed.quickbooks_integration_tests.credit_memo_line_data": [], "seed.quickbooks_integration_tests.bill_data": [], "seed.quickbooks_integration_tests.bill_linked_txn_data": [], "seed.quickbooks_integration_tests.vendor_credit_data": [], "seed.quickbooks_integration_tests.customer_data": [], "seed.quickbooks_integration_tests.estimate_data": [], "seed.quickbooks_integration_tests.purchase_line_data": [], "seed.quickbooks_integration_tests.journal_entry_line_data": [], "seed.quickbooks_integration_tests.journal_entry_data": [], "seed.quickbooks_integration_tests.bill_line_data": [], "seed.quickbooks_integration_tests.bundle_item_data": [], "seed.quickbooks_integration_tests.invoice_linked_txn_data": [], "seed.quickbooks_integration_tests.account_data": [], "seed.quickbooks_integration_tests.purchase_order_line_data": [], "seed.quickbooks_integration_tests.transfer_data": [], "seed.quickbooks_integration_tests.purchase_order_data": [], "seed.quickbooks_integration_tests.sales_receipt_line_data": [], "seed.quickbooks_integration_tests.vendor_credit_line_data": [], "seed.quickbooks_integration_tests.credit_memo_data": [], "seed.quickbooks_integration_tests.department_data": [], "seed.quickbooks_integration_tests.item_data": [], "seed.quickbooks_integration_tests.sales_receipt_data": [], "seed.quickbooks_integration_tests.deposit_data": [], "seed.quickbooks_integration_tests.refund_receipt_data": [], "model.quickbooks.quickbooks__balance_sheet": ["model.quickbooks.quickbooks__general_ledger_by_period"], "model.quickbooks.quickbooks__general_ledger_by_period": ["model.quickbooks.int_quickbooks__general_ledger_balances", "model.quickbooks.int_quickbooks__retained_earnings"], "model.quickbooks.quickbooks__general_ledger": ["model.quickbooks.int_quickbooks__account_classifications", "model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__bill_payment_double_entry", "model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__deposit_double_entry", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__journal_entry_double_entry", "model.quickbooks.int_quickbooks__payment_double_entry", "model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__transfer_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_double_entry"], "model.quickbooks.quickbooks__profit_and_loss": ["model.quickbooks.quickbooks__general_ledger_by_period"], "model.quickbooks.quickbooks__expenses_sales_enhanced": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union"], "model.quickbooks.quickbooks__ap_ar_enhanced": ["model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__invoice_join", "model.quickbooks_source.stg_quickbooks__address", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__vendor"], "model.quickbooks.int_quickbooks__transfer_double_entry": ["model.quickbooks_source.stg_quickbooks__transfer"], "model.quickbooks.int_quickbooks__credit_memo_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__credit_memo", "model.quickbooks_source.stg_quickbooks__credit_memo_line", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__refund_receipt_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__refund_receipt", "model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "model.quickbooks.int_quickbooks__journal_entry_double_entry": ["model.quickbooks_source.stg_quickbooks__journal_entry", "model.quickbooks_source.stg_quickbooks__journal_entry_line"], "model.quickbooks.int_quickbooks__bill_payment_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__bill_payment", "model.quickbooks_source.stg_quickbooks__bill_payment_line"], "model.quickbooks.int_quickbooks__deposit_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__deposit", "model.quickbooks_source.stg_quickbooks__deposit_line"], "model.quickbooks.int_quickbooks__purchase_double_entry": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__purchase", "model.quickbooks_source.stg_quickbooks__purchase_line"], "model.quickbooks.int_quickbooks__sales_receipt_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__sales_receipt", "model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "model.quickbooks.int_quickbooks__vendor_credit_double_entry": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__vendor_credit", "model.quickbooks_source.stg_quickbooks__vendor_credit_line"], "model.quickbooks.int_quickbooks__bill_double_entry": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__payment_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__payment", "model.quickbooks_source.stg_quickbooks__payment_line"], "model.quickbooks.int_quickbooks__invoice_double_entry": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__bundle", "model.quickbooks_source.stg_quickbooks__bundle_item", "model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_line", "model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__invoice_transactions": ["model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_line", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__bill_transactions": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__journal_entry_transactions": ["model.quickbooks_source.stg_quickbooks__journal_entry", "model.quickbooks_source.stg_quickbooks__journal_entry_line"], "model.quickbooks.int_quickbooks__refund_receipt_transactions": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__refund_receipt", "model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "model.quickbooks.int_quickbooks__vendor_credit_transactions": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__vendor_credit", "model.quickbooks_source.stg_quickbooks__vendor_credit_line"], "model.quickbooks.int_quickbooks__purchase_transactions": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__purchase", "model.quickbooks_source.stg_quickbooks__purchase_line"], "model.quickbooks.int_quickbooks__sales_receipt_transactions": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__sales_receipt", "model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "model.quickbooks.int_quickbooks__deposit_transactions": ["model.quickbooks_source.stg_quickbooks__deposit", "model.quickbooks_source.stg_quickbooks__deposit_line"], "model.quickbooks.int_quickbooks__credit_memo_transactions": ["model.quickbooks_source.stg_quickbooks__credit_memo", "model.quickbooks_source.stg_quickbooks__credit_memo_line", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks.int_quickbooks__general_ledger_balances": ["model.quickbooks.int_quickbooks__general_ledger_date_spine", "model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__account_classifications": ["model.quickbooks_source.stg_quickbooks__account"], "model.quickbooks.int_quickbooks__expenses_union": ["model.quickbooks.int_quickbooks__account_classifications", "model.quickbooks.int_quickbooks__bill_transactions", "model.quickbooks.int_quickbooks__deposit_transactions", "model.quickbooks.int_quickbooks__journal_entry_transactions", "model.quickbooks.int_quickbooks__purchase_transactions", "model.quickbooks.int_quickbooks__vendor_credit_transactions", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__vendor"], "model.quickbooks.int_quickbooks__invoice_join": ["model.quickbooks_source.stg_quickbooks__estimate", "model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "model.quickbooks_source.stg_quickbooks__payment", "model.quickbooks_source.stg_quickbooks__payment_line"], "model.quickbooks.int_quickbooks__retained_earnings": ["model.quickbooks.int_quickbooks__general_ledger_balances"], "model.quickbooks.int_quickbooks__general_ledger_date_spine": ["model.quickbooks.quickbooks__general_ledger", "model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__bill_join": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__bill_linked_txn", "model.quickbooks_source.stg_quickbooks__bill_payment", "model.quickbooks_source.stg_quickbooks__bill_payment_line"], "model.quickbooks.int_quickbooks__sales_union": ["model.quickbooks.int_quickbooks__account_classifications", "model.quickbooks.int_quickbooks__credit_memo_transactions", "model.quickbooks.int_quickbooks__invoice_transactions", "model.quickbooks.int_quickbooks__refund_receipt_transactions", "model.quickbooks.int_quickbooks__sales_receipt_transactions", "model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__vendor"], "analysis.quickbooks.quickbooks__balance_sheet": ["model.quickbooks.quickbooks__general_ledger_by_period"], "analysis.quickbooks.quickbooks__income_statement": ["model.quickbooks.quickbooks__general_ledger_by_period"], "model.quickbooks_source.stg_quickbooks__journal_entry_line": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp", "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"], "model.quickbooks_source.stg_quickbooks__transfer": ["model.quickbooks_source.stg_quickbooks__transfer_tmp", "model.quickbooks_source.stg_quickbooks__transfer_tmp"], "model.quickbooks_source.stg_quickbooks__bill_payment_line": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp", "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"], "model.quickbooks_source.stg_quickbooks__payment_line": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp", "model.quickbooks_source.stg_quickbooks__payment_line_tmp"], "model.quickbooks_source.stg_quickbooks__vendor": ["model.quickbooks_source.stg_quickbooks__vendor_tmp", "model.quickbooks_source.stg_quickbooks__vendor_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_line": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp", "model.quickbooks_source.stg_quickbooks__invoice_line_tmp"], "model.quickbooks_source.stg_quickbooks__estimate": ["model.quickbooks_source.stg_quickbooks__estimate_tmp", "model.quickbooks_source.stg_quickbooks__estimate_tmp"], "model.quickbooks_source.stg_quickbooks__credit_memo_line": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp", "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"], "model.quickbooks_source.stg_quickbooks__bundle": ["model.quickbooks_source.stg_quickbooks__bundle_tmp", "model.quickbooks_source.stg_quickbooks__bundle_tmp"], "model.quickbooks_source.stg_quickbooks__department": ["model.quickbooks_source.stg_quickbooks__department_tmp", "model.quickbooks_source.stg_quickbooks__department_tmp"], "model.quickbooks_source.stg_quickbooks__purchase_line": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp", "model.quickbooks_source.stg_quickbooks__purchase_line_tmp"], "model.quickbooks_source.stg_quickbooks__purchase": ["model.quickbooks_source.stg_quickbooks__purchase_tmp", "model.quickbooks_source.stg_quickbooks__purchase_tmp"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp", "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"], "model.quickbooks_source.stg_quickbooks__bundle_item": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp", "model.quickbooks_source.stg_quickbooks__bundle_item_tmp"], "model.quickbooks_source.stg_quickbooks__credit_memo": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp", "model.quickbooks_source.stg_quickbooks__credit_memo_tmp"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp", "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"], "model.quickbooks_source.stg_quickbooks__sales_receipt": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp", "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp", "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"], "model.quickbooks_source.stg_quickbooks__invoice": ["model.quickbooks_source.stg_quickbooks__invoice_tmp", "model.quickbooks_source.stg_quickbooks__invoice_tmp"], "model.quickbooks_source.stg_quickbooks__bill_payment": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp", "model.quickbooks_source.stg_quickbooks__bill_payment_tmp"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp", "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"], "model.quickbooks_source.stg_quickbooks__account": ["model.quickbooks_source.stg_quickbooks__account_tmp", "model.quickbooks_source.stg_quickbooks__account_tmp"], "model.quickbooks_source.stg_quickbooks__payment": ["model.quickbooks_source.stg_quickbooks__payment_tmp", "model.quickbooks_source.stg_quickbooks__payment_tmp"], "model.quickbooks_source.stg_quickbooks__estimate_line": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp", "model.quickbooks_source.stg_quickbooks__estimate_line_tmp"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp", "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"], "model.quickbooks_source.stg_quickbooks__address": ["model.quickbooks_source.stg_quickbooks__address_tmp", "model.quickbooks_source.stg_quickbooks__address_tmp"], "model.quickbooks_source.stg_quickbooks__bill": ["model.quickbooks_source.stg_quickbooks__bill_tmp", "model.quickbooks_source.stg_quickbooks__bill_tmp"], "model.quickbooks_source.stg_quickbooks__bill_line": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp", "model.quickbooks_source.stg_quickbooks__bill_line_tmp"], "model.quickbooks_source.stg_quickbooks__journal_entry": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp", "model.quickbooks_source.stg_quickbooks__journal_entry_tmp"], "model.quickbooks_source.stg_quickbooks__refund_receipt": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp", "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"], "model.quickbooks_source.stg_quickbooks__deposit_line": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp", "model.quickbooks_source.stg_quickbooks__deposit_line_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp", "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp", "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"], "model.quickbooks_source.stg_quickbooks__deposit": ["model.quickbooks_source.stg_quickbooks__deposit_tmp", "model.quickbooks_source.stg_quickbooks__deposit_tmp"], "model.quickbooks_source.stg_quickbooks__item": ["model.quickbooks_source.stg_quickbooks__item_tmp", "model.quickbooks_source.stg_quickbooks__item_tmp"], "model.quickbooks_source.stg_quickbooks__customer": ["model.quickbooks_source.stg_quickbooks__customer_tmp", "model.quickbooks_source.stg_quickbooks__customer_tmp"], "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": ["seed.quickbooks_integration_tests.vendor_credit_data"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": ["seed.quickbooks_integration_tests.refund_receipt_line_data"], "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": ["seed.quickbooks_integration_tests.estimate_line_data"], "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": ["seed.quickbooks_integration_tests.credit_memo_line_data"], "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": ["seed.quickbooks_integration_tests.journal_entry_data"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": ["seed.quickbooks_integration_tests.invoice_line_bundle_data"], "model.quickbooks_source.stg_quickbooks__payment_tmp": ["seed.quickbooks_integration_tests.payment_data"], "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": ["seed.quickbooks_integration_tests.invoice_line_data"], "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": ["seed.quickbooks_integration_tests.deposit_line_data"], "model.quickbooks_source.stg_quickbooks__customer_tmp": ["seed.quickbooks_integration_tests.customer_data"], "model.quickbooks_source.stg_quickbooks__bill_line_tmp": ["seed.quickbooks_integration_tests.bill_line_data"], "model.quickbooks_source.stg_quickbooks__item_tmp": ["seed.quickbooks_integration_tests.item_data"], "model.quickbooks_source.stg_quickbooks__account_tmp": ["seed.quickbooks_integration_tests.account_data"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": ["seed.quickbooks_integration_tests.vendor_credit_line_data"], "model.quickbooks_source.stg_quickbooks__department_tmp": ["seed.quickbooks_integration_tests.department_data"], "model.quickbooks_source.stg_quickbooks__bundle_tmp": ["seed.quickbooks_integration_tests.bundle_data"], "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": ["seed.quickbooks_integration_tests.bundle_item_data"], "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": ["seed.quickbooks_integration_tests.bill_payment_line_data"], "model.quickbooks_source.stg_quickbooks__estimate_tmp": ["seed.quickbooks_integration_tests.estimate_data"], "model.quickbooks_source.stg_quickbooks__purchase_tmp": ["seed.quickbooks_integration_tests.purchase_data"], "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": ["seed.quickbooks_integration_tests.credit_memo_data"], "model.quickbooks_source.stg_quickbooks__bill_tmp": ["seed.quickbooks_integration_tests.bill_data"], "model.quickbooks_source.stg_quickbooks__transfer_tmp": ["seed.quickbooks_integration_tests.transfer_data"], "model.quickbooks_source.stg_quickbooks__vendor_tmp": ["seed.quickbooks_integration_tests.vendor_data"], "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": ["seed.quickbooks_integration_tests.purchase_line_data"], "model.quickbooks_source.stg_quickbooks__address_tmp": ["seed.quickbooks_integration_tests.address_data"], "model.quickbooks_source.stg_quickbooks__payment_line_tmp": ["seed.quickbooks_integration_tests.payment_line_data"], "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": ["seed.quickbooks_integration_tests.refund_receipt_data"], "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": ["seed.quickbooks_integration_tests.sales_receipt_data"], "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": ["seed.quickbooks_integration_tests.bill_payment_data"], "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": ["seed.quickbooks_integration_tests.journal_entry_line_data"], "model.quickbooks_source.stg_quickbooks__deposit_tmp": ["seed.quickbooks_integration_tests.deposit_data"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": ["seed.quickbooks_integration_tests.bill_linked_txn_data"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": ["seed.quickbooks_integration_tests.invoice_linked_txn_data"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": ["seed.quickbooks_integration_tests.sales_receipt_line_data"], "model.quickbooks_source.stg_quickbooks__invoice_tmp": ["seed.quickbooks_integration_tests.invoice_data"], "test.quickbooks_source.unique_stg_quickbooks__account_account_id": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.not_null_stg_quickbooks__account_account_id": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue": ["model.quickbooks_source.stg_quickbooks__account"], "test.quickbooks_source.unique_stg_quickbooks__address_address_id": ["model.quickbooks_source.stg_quickbooks__address"], "test.quickbooks_source.not_null_stg_quickbooks__address_address_id": ["model.quickbooks_source.stg_quickbooks__address"], "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id": ["model.quickbooks_source.stg_quickbooks__bill_line"], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_payment_id": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id": ["model.quickbooks_source.stg_quickbooks__bill_payment_line"], "test.quickbooks_source.unique_stg_quickbooks__bill_payment_bill_payment_id": ["model.quickbooks_source.stg_quickbooks__bill_payment"], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id": ["model.quickbooks_source.stg_quickbooks__bill_payment"], "test.quickbooks_source.unique_stg_quickbooks__bill_bill_id": ["model.quickbooks_source.stg_quickbooks__bill"], "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id": ["model.quickbooks_source.stg_quickbooks__bill"], "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id": ["model.quickbooks_source.stg_quickbooks__bundle_item"], "test.quickbooks_source.unique_stg_quickbooks__bundle_bundle_id": ["model.quickbooks_source.stg_quickbooks__bundle"], "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id": ["model.quickbooks_source.stg_quickbooks__bundle"], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id": ["model.quickbooks_source.stg_quickbooks__credit_memo_line"], "test.quickbooks_source.unique_stg_quickbooks__credit_memo_credit_memo_id": ["model.quickbooks_source.stg_quickbooks__credit_memo"], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id": ["model.quickbooks_source.stg_quickbooks__credit_memo"], "test.quickbooks_source.unique_stg_quickbooks__customer_customer_id": ["model.quickbooks_source.stg_quickbooks__customer"], "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id": ["model.quickbooks_source.stg_quickbooks__customer"], "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id": ["model.quickbooks_source.stg_quickbooks__deposit_line"], "test.quickbooks_source.unique_stg_quickbooks__deposit_deposit_id": ["model.quickbooks_source.stg_quickbooks__deposit"], "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id": ["model.quickbooks_source.stg_quickbooks__deposit"], "test.quickbooks_source.unique_stg_quickbooks__estimate_estimate_id": ["model.quickbooks_source.stg_quickbooks__estimate"], "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id": ["model.quickbooks_source.stg_quickbooks__estimate"], "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id": ["model.quickbooks_source.stg_quickbooks__estimate_line"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id": ["model.quickbooks_source.stg_quickbooks__invoice_line"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle"], "test.quickbooks_source.unique_stg_quickbooks__invoice_invoice_id": ["model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id": ["model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.unique_stg_quickbooks__item_item_id": ["model.quickbooks_source.stg_quickbooks__item"], "test.quickbooks_source.not_null_stg_quickbooks__item_item_id": ["model.quickbooks_source.stg_quickbooks__item"], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit": ["model.quickbooks_source.stg_quickbooks__journal_entry_line"], "test.quickbooks_source.unique_stg_quickbooks__journal_entry_journal_entry_id": ["model.quickbooks_source.stg_quickbooks__journal_entry"], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id": ["model.quickbooks_source.stg_quickbooks__journal_entry"], "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id": ["model.quickbooks_source.stg_quickbooks__payment_line"], "test.quickbooks_source.unique_stg_quickbooks__payment_payment_id": ["model.quickbooks_source.stg_quickbooks__payment"], "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id": ["model.quickbooks_source.stg_quickbooks__payment"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id": ["model.quickbooks_source.stg_quickbooks__purchase_line"], "test.quickbooks_source.unique_stg_quickbooks__purchase_purchase_id": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard": ["model.quickbooks_source.stg_quickbooks__purchase"], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id": [], "test.quickbooks_source.unique_stg_quickbooks__purchase_order_purchase_order_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id": [], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed": [], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "test.quickbooks_source.unique_stg_quickbooks__refund_receipt_refund_id": ["model.quickbooks_source.stg_quickbooks__refund_receipt"], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id": ["model.quickbooks_source.stg_quickbooks__refund_receipt"], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "test.quickbooks_source.unique_stg_quickbooks__sales_receipt_sales_receipt_id": ["model.quickbooks_source.stg_quickbooks__sales_receipt"], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id": ["model.quickbooks_source.stg_quickbooks__sales_receipt"], "test.quickbooks_source.unique_stg_quickbooks__transfer_transfer_id": ["model.quickbooks_source.stg_quickbooks__transfer"], "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id": ["model.quickbooks_source.stg_quickbooks__transfer"], "test.quickbooks_source.unique_stg_quickbooks__vendor_credit_vendor_credit_id": ["model.quickbooks_source.stg_quickbooks__vendor_credit"], "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id": ["model.quickbooks_source.stg_quickbooks__vendor_credit"], "test.quickbooks_source.unique_stg_quickbooks__vendor_vendor_id": ["model.quickbooks_source.stg_quickbooks__vendor"], "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id": ["model.quickbooks_source.stg_quickbooks__vendor"], "source.quickbooks_source.quickbooks.account": [], "source.quickbooks_source.quickbooks.address": [], "source.quickbooks_source.quickbooks.bill_line": [], "source.quickbooks_source.quickbooks.bill_linked_txn": [], "source.quickbooks_source.quickbooks.bill_payment_line": [], "source.quickbooks_source.quickbooks.bill_payment": [], "source.quickbooks_source.quickbooks.bill": [], "source.quickbooks_source.quickbooks.bundle_item": [], "source.quickbooks_source.quickbooks.bundle": [], "source.quickbooks_source.quickbooks.credit_memo_line": [], "source.quickbooks_source.quickbooks.credit_memo": [], "source.quickbooks_source.quickbooks.customer": [], "source.quickbooks_source.quickbooks.department": [], "source.quickbooks_source.quickbooks.deposit_line": [], "source.quickbooks_source.quickbooks.deposit": [], "source.quickbooks_source.quickbooks.estimate": [], "source.quickbooks_source.quickbooks.estimate_line": [], "source.quickbooks_source.quickbooks.invoice_linked_txn": [], "source.quickbooks_source.quickbooks.invoice_line": [], "source.quickbooks_source.quickbooks.invoice_line_bundle": [], "source.quickbooks_source.quickbooks.invoice": [], "source.quickbooks_source.quickbooks.item": [], "source.quickbooks_source.quickbooks.journal_entry_line": [], "source.quickbooks_source.quickbooks.journal_entry": [], "source.quickbooks_source.quickbooks.payment_line": [], "source.quickbooks_source.quickbooks.payment": [], "source.quickbooks_source.quickbooks.purchase_line": [], "source.quickbooks_source.quickbooks.purchase": [], "source.quickbooks_source.quickbooks.purchase_order_line": [], "source.quickbooks_source.quickbooks.purchase_order_linked_txn": [], "source.quickbooks_source.quickbooks.purchase_order": [], "source.quickbooks_source.quickbooks.refund_receipt_line": [], "source.quickbooks_source.quickbooks.refund_receipt": [], "source.quickbooks_source.quickbooks.sales_receipt_line": [], "source.quickbooks_source.quickbooks.sales_receipt": [], "source.quickbooks_source.quickbooks.transfer": [], "source.quickbooks_source.quickbooks.vendor_credit_line": [], "source.quickbooks_source.quickbooks.vendor_credit": [], "source.quickbooks_source.quickbooks.vendor": []}, "child_map": {"seed.quickbooks_integration_tests.bill_payment_data": ["model.quickbooks_source.stg_quickbooks__bill_payment_tmp"], "seed.quickbooks_integration_tests.bundle_data": ["model.quickbooks_source.stg_quickbooks__bundle_tmp"], "seed.quickbooks_integration_tests.bill_payment_line_data": ["model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp"], "seed.quickbooks_integration_tests.payment_line_data": ["model.quickbooks_source.stg_quickbooks__payment_line_tmp"], "seed.quickbooks_integration_tests.vendor_data": ["model.quickbooks_source.stg_quickbooks__vendor_tmp"], "seed.quickbooks_integration_tests.address_data": ["model.quickbooks_source.stg_quickbooks__address_tmp"], "seed.quickbooks_integration_tests.invoice_line_bundle_data": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp"], "seed.quickbooks_integration_tests.invoice_data": ["model.quickbooks_source.stg_quickbooks__invoice_tmp"], "seed.quickbooks_integration_tests.payment_data": ["model.quickbooks_source.stg_quickbooks__payment_tmp"], "seed.quickbooks_integration_tests.invoice_line_data": ["model.quickbooks_source.stg_quickbooks__invoice_line_tmp"], "seed.quickbooks_integration_tests.deposit_line_data": ["model.quickbooks_source.stg_quickbooks__deposit_line_tmp"], "seed.quickbooks_integration_tests.estimate_line_data": ["model.quickbooks_source.stg_quickbooks__estimate_line_tmp"], "seed.quickbooks_integration_tests.purchase_data": ["model.quickbooks_source.stg_quickbooks__purchase_tmp"], "seed.quickbooks_integration_tests.refund_receipt_line_data": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp"], "seed.quickbooks_integration_tests.credit_memo_line_data": ["model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp"], "seed.quickbooks_integration_tests.bill_data": ["model.quickbooks_source.stg_quickbooks__bill_tmp"], "seed.quickbooks_integration_tests.bill_linked_txn_data": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp"], "seed.quickbooks_integration_tests.vendor_credit_data": ["model.quickbooks_source.stg_quickbooks__vendor_credit_tmp"], "seed.quickbooks_integration_tests.customer_data": ["model.quickbooks_source.stg_quickbooks__customer_tmp"], "seed.quickbooks_integration_tests.estimate_data": ["model.quickbooks_source.stg_quickbooks__estimate_tmp"], "seed.quickbooks_integration_tests.purchase_line_data": ["model.quickbooks_source.stg_quickbooks__purchase_line_tmp"], "seed.quickbooks_integration_tests.journal_entry_line_data": ["model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp"], "seed.quickbooks_integration_tests.journal_entry_data": ["model.quickbooks_source.stg_quickbooks__journal_entry_tmp"], "seed.quickbooks_integration_tests.bill_line_data": ["model.quickbooks_source.stg_quickbooks__bill_line_tmp"], "seed.quickbooks_integration_tests.bundle_item_data": ["model.quickbooks_source.stg_quickbooks__bundle_item_tmp"], "seed.quickbooks_integration_tests.invoice_linked_txn_data": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp"], "seed.quickbooks_integration_tests.account_data": ["model.quickbooks_source.stg_quickbooks__account_tmp"], "seed.quickbooks_integration_tests.purchase_order_line_data": [], "seed.quickbooks_integration_tests.transfer_data": ["model.quickbooks_source.stg_quickbooks__transfer_tmp"], "seed.quickbooks_integration_tests.purchase_order_data": [], "seed.quickbooks_integration_tests.sales_receipt_line_data": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp"], "seed.quickbooks_integration_tests.vendor_credit_line_data": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp"], "seed.quickbooks_integration_tests.credit_memo_data": ["model.quickbooks_source.stg_quickbooks__credit_memo_tmp"], "seed.quickbooks_integration_tests.department_data": ["model.quickbooks_source.stg_quickbooks__department_tmp"], "seed.quickbooks_integration_tests.item_data": ["model.quickbooks_source.stg_quickbooks__item_tmp"], "seed.quickbooks_integration_tests.sales_receipt_data": ["model.quickbooks_source.stg_quickbooks__sales_receipt_tmp"], "seed.quickbooks_integration_tests.deposit_data": ["model.quickbooks_source.stg_quickbooks__deposit_tmp"], "seed.quickbooks_integration_tests.refund_receipt_data": ["model.quickbooks_source.stg_quickbooks__refund_receipt_tmp"], "model.quickbooks.quickbooks__balance_sheet": [], "model.quickbooks.quickbooks__general_ledger_by_period": ["analysis.quickbooks.quickbooks__balance_sheet", "analysis.quickbooks.quickbooks__income_statement", "model.quickbooks.quickbooks__balance_sheet", "model.quickbooks.quickbooks__profit_and_loss"], "model.quickbooks.quickbooks__general_ledger": ["model.quickbooks.int_quickbooks__general_ledger_balances", "model.quickbooks.int_quickbooks__general_ledger_date_spine", "model.quickbooks.int_quickbooks__general_ledger_date_spine"], "model.quickbooks.quickbooks__profit_and_loss": [], "model.quickbooks.quickbooks__expenses_sales_enhanced": [], "model.quickbooks.quickbooks__ap_ar_enhanced": [], "model.quickbooks.int_quickbooks__transfer_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__credit_memo_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__refund_receipt_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__journal_entry_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__bill_payment_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__deposit_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__purchase_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__sales_receipt_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__vendor_credit_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__bill_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__payment_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__invoice_double_entry": ["model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__invoice_transactions": ["model.quickbooks.int_quickbooks__sales_union"], "model.quickbooks.int_quickbooks__bill_transactions": ["model.quickbooks.int_quickbooks__expenses_union"], "model.quickbooks.int_quickbooks__journal_entry_transactions": ["model.quickbooks.int_quickbooks__expenses_union"], "model.quickbooks.int_quickbooks__refund_receipt_transactions": ["model.quickbooks.int_quickbooks__sales_union"], "model.quickbooks.int_quickbooks__vendor_credit_transactions": ["model.quickbooks.int_quickbooks__expenses_union"], "model.quickbooks.int_quickbooks__purchase_transactions": ["model.quickbooks.int_quickbooks__expenses_union"], "model.quickbooks.int_quickbooks__sales_receipt_transactions": ["model.quickbooks.int_quickbooks__sales_union"], "model.quickbooks.int_quickbooks__deposit_transactions": ["model.quickbooks.int_quickbooks__expenses_union"], "model.quickbooks.int_quickbooks__credit_memo_transactions": ["model.quickbooks.int_quickbooks__sales_union"], "model.quickbooks.int_quickbooks__general_ledger_balances": ["model.quickbooks.int_quickbooks__retained_earnings", "model.quickbooks.quickbooks__general_ledger_by_period"], "model.quickbooks.int_quickbooks__account_classifications": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union", "model.quickbooks.quickbooks__general_ledger"], "model.quickbooks.int_quickbooks__expenses_union": ["model.quickbooks.quickbooks__expenses_sales_enhanced"], "model.quickbooks.int_quickbooks__invoice_join": ["model.quickbooks.quickbooks__ap_ar_enhanced"], "model.quickbooks.int_quickbooks__retained_earnings": ["model.quickbooks.quickbooks__general_ledger_by_period"], "model.quickbooks.int_quickbooks__general_ledger_date_spine": ["model.quickbooks.int_quickbooks__general_ledger_balances"], "model.quickbooks.int_quickbooks__bill_join": ["model.quickbooks.quickbooks__ap_ar_enhanced"], "model.quickbooks.int_quickbooks__sales_union": ["model.quickbooks.quickbooks__expenses_sales_enhanced"], "analysis.quickbooks.quickbooks__balance_sheet": [], "analysis.quickbooks.quickbooks__income_statement": [], "model.quickbooks_source.stg_quickbooks__journal_entry_line": ["model.quickbooks.int_quickbooks__journal_entry_double_entry", "model.quickbooks.int_quickbooks__journal_entry_transactions", "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit", "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id"], "model.quickbooks_source.stg_quickbooks__transfer": ["model.quickbooks.int_quickbooks__transfer_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id", "test.quickbooks_source.unique_stg_quickbooks__transfer_transfer_id"], "model.quickbooks_source.stg_quickbooks__bill_payment_line": ["model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__bill_payment_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id"], "model.quickbooks_source.stg_quickbooks__payment_line": ["model.quickbooks.int_quickbooks__invoice_join", "model.quickbooks.int_quickbooks__payment_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id"], "model.quickbooks_source.stg_quickbooks__vendor": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union", "model.quickbooks.quickbooks__ap_ar_enhanced", "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id", "test.quickbooks_source.unique_stg_quickbooks__vendor_vendor_id"], "model.quickbooks_source.stg_quickbooks__invoice_line": ["model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__invoice_transactions", "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id"], "model.quickbooks_source.stg_quickbooks__estimate": ["model.quickbooks.int_quickbooks__invoice_join", "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id", "test.quickbooks_source.unique_stg_quickbooks__estimate_estimate_id"], "model.quickbooks_source.stg_quickbooks__credit_memo_line": ["model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__credit_memo_transactions", "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id"], "model.quickbooks_source.stg_quickbooks__bundle": ["model.quickbooks.int_quickbooks__invoice_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id", "test.quickbooks_source.unique_stg_quickbooks__bundle_bundle_id"], "model.quickbooks_source.stg_quickbooks__department": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union", "model.quickbooks.quickbooks__ap_ar_enhanced"], "model.quickbooks_source.stg_quickbooks__purchase_line": ["model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__purchase_transactions", "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id"], "model.quickbooks_source.stg_quickbooks__purchase": ["model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__purchase_transactions", "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard", "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id", "test.quickbooks_source.unique_stg_quickbooks__purchase_purchase_id"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line": ["model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_transactions", "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id"], "model.quickbooks_source.stg_quickbooks__bundle_item": ["model.quickbooks.int_quickbooks__invoice_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id"], "model.quickbooks_source.stg_quickbooks__credit_memo": ["model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__credit_memo_transactions", "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id", "test.quickbooks_source.unique_stg_quickbooks__credit_memo_credit_memo_id"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line": ["model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_transactions", "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id"], "model.quickbooks_source.stg_quickbooks__sales_receipt": ["model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_transactions", "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id", "test.quickbooks_source.unique_stg_quickbooks__sales_receipt_sales_receipt_id"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn": ["model.quickbooks.int_quickbooks__invoice_join", "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id"], "model.quickbooks_source.stg_quickbooks__invoice": ["model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__invoice_join", "model.quickbooks.int_quickbooks__invoice_transactions", "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id", "test.quickbooks_source.unique_stg_quickbooks__invoice_invoice_id"], "model.quickbooks_source.stg_quickbooks__bill_payment": ["model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__bill_payment_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id", "test.quickbooks_source.unique_stg_quickbooks__bill_payment_bill_payment_id"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle": ["model.quickbooks.int_quickbooks__invoice_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id"], "model.quickbooks_source.stg_quickbooks__account": ["model.quickbooks.int_quickbooks__account_classifications", "model.quickbooks.int_quickbooks__bill_payment_double_entry", "model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__deposit_double_entry", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__payment_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue", "test.quickbooks_source.not_null_stg_quickbooks__account_account_id", "test.quickbooks_source.unique_stg_quickbooks__account_account_id"], "model.quickbooks_source.stg_quickbooks__payment": ["model.quickbooks.int_quickbooks__invoice_join", "model.quickbooks.int_quickbooks__payment_double_entry", "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id", "test.quickbooks_source.unique_stg_quickbooks__payment_payment_id"], "model.quickbooks_source.stg_quickbooks__estimate_line": ["test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn": ["model.quickbooks.int_quickbooks__bill_join", "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id", "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_payment_id"], "model.quickbooks_source.stg_quickbooks__address": ["model.quickbooks.quickbooks__ap_ar_enhanced", "test.quickbooks_source.not_null_stg_quickbooks__address_address_id", "test.quickbooks_source.unique_stg_quickbooks__address_address_id"], "model.quickbooks_source.stg_quickbooks__bill": ["model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__bill_transactions", "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id", "test.quickbooks_source.unique_stg_quickbooks__bill_bill_id"], "model.quickbooks_source.stg_quickbooks__bill_line": ["model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__bill_join", "model.quickbooks.int_quickbooks__bill_transactions", "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id"], "model.quickbooks_source.stg_quickbooks__journal_entry": ["model.quickbooks.int_quickbooks__journal_entry_double_entry", "model.quickbooks.int_quickbooks__journal_entry_transactions", "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id", "test.quickbooks_source.unique_stg_quickbooks__journal_entry_journal_entry_id"], "model.quickbooks_source.stg_quickbooks__refund_receipt": ["model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_transactions", "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id", "test.quickbooks_source.unique_stg_quickbooks__refund_receipt_refund_id"], "model.quickbooks_source.stg_quickbooks__deposit_line": ["model.quickbooks.int_quickbooks__deposit_double_entry", "model.quickbooks.int_quickbooks__deposit_transactions", "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id"], "model.quickbooks_source.stg_quickbooks__vendor_credit": ["model.quickbooks.int_quickbooks__vendor_credit_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_transactions", "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id", "test.quickbooks_source.unique_stg_quickbooks__vendor_credit_vendor_credit_id"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line": ["model.quickbooks.int_quickbooks__vendor_credit_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_transactions"], "model.quickbooks_source.stg_quickbooks__deposit": ["model.quickbooks.int_quickbooks__deposit_double_entry", "model.quickbooks.int_quickbooks__deposit_transactions", "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id", "test.quickbooks_source.unique_stg_quickbooks__deposit_deposit_id"], "model.quickbooks_source.stg_quickbooks__item": ["model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__bill_double_entry", "model.quickbooks.int_quickbooks__bill_transactions", "model.quickbooks.int_quickbooks__credit_memo_double_entry", "model.quickbooks.int_quickbooks__credit_memo_transactions", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__invoice_double_entry", "model.quickbooks.int_quickbooks__invoice_transactions", "model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__purchase_double_entry", "model.quickbooks.int_quickbooks__purchase_transactions", "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_double_entry", "model.quickbooks.int_quickbooks__refund_receipt_transactions", "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_double_entry", "model.quickbooks.int_quickbooks__sales_receipt_transactions", "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_double_entry", "model.quickbooks.int_quickbooks__vendor_credit_transactions", "test.quickbooks_source.not_null_stg_quickbooks__item_item_id", "test.quickbooks_source.unique_stg_quickbooks__item_item_id"], "model.quickbooks_source.stg_quickbooks__customer": ["model.quickbooks.int_quickbooks__expenses_union", "model.quickbooks.int_quickbooks__sales_union", "model.quickbooks.quickbooks__ap_ar_enhanced", "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id", "test.quickbooks_source.unique_stg_quickbooks__customer_customer_id"], "model.quickbooks_source.stg_quickbooks__vendor_credit_tmp": ["model.quickbooks_source.stg_quickbooks__vendor_credit", "model.quickbooks_source.stg_quickbooks__vendor_credit"], "model.quickbooks_source.stg_quickbooks__refund_receipt_line_tmp": ["model.quickbooks_source.stg_quickbooks__refund_receipt_line", "model.quickbooks_source.stg_quickbooks__refund_receipt_line"], "model.quickbooks_source.stg_quickbooks__estimate_line_tmp": ["model.quickbooks_source.stg_quickbooks__estimate_line", "model.quickbooks_source.stg_quickbooks__estimate_line"], "model.quickbooks_source.stg_quickbooks__credit_memo_line_tmp": ["model.quickbooks_source.stg_quickbooks__credit_memo_line", "model.quickbooks_source.stg_quickbooks__credit_memo_line"], "model.quickbooks_source.stg_quickbooks__journal_entry_tmp": ["model.quickbooks_source.stg_quickbooks__journal_entry", "model.quickbooks_source.stg_quickbooks__journal_entry"], "model.quickbooks_source.stg_quickbooks__invoice_line_bundle_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_line_bundle", "model.quickbooks_source.stg_quickbooks__invoice_line_bundle"], "model.quickbooks_source.stg_quickbooks__payment_tmp": ["model.quickbooks_source.stg_quickbooks__payment", "model.quickbooks_source.stg_quickbooks__payment"], "model.quickbooks_source.stg_quickbooks__invoice_line_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_line", "model.quickbooks_source.stg_quickbooks__invoice_line"], "model.quickbooks_source.stg_quickbooks__deposit_line_tmp": ["model.quickbooks_source.stg_quickbooks__deposit_line", "model.quickbooks_source.stg_quickbooks__deposit_line"], "model.quickbooks_source.stg_quickbooks__customer_tmp": ["model.quickbooks_source.stg_quickbooks__customer", "model.quickbooks_source.stg_quickbooks__customer"], "model.quickbooks_source.stg_quickbooks__bill_line_tmp": ["model.quickbooks_source.stg_quickbooks__bill_line", "model.quickbooks_source.stg_quickbooks__bill_line"], "model.quickbooks_source.stg_quickbooks__item_tmp": ["model.quickbooks_source.stg_quickbooks__item", "model.quickbooks_source.stg_quickbooks__item"], "model.quickbooks_source.stg_quickbooks__account_tmp": ["model.quickbooks_source.stg_quickbooks__account", "model.quickbooks_source.stg_quickbooks__account"], "model.quickbooks_source.stg_quickbooks__vendor_credit_line_tmp": ["model.quickbooks_source.stg_quickbooks__vendor_credit_line", "model.quickbooks_source.stg_quickbooks__vendor_credit_line"], "model.quickbooks_source.stg_quickbooks__department_tmp": ["model.quickbooks_source.stg_quickbooks__department", "model.quickbooks_source.stg_quickbooks__department"], "model.quickbooks_source.stg_quickbooks__bundle_tmp": ["model.quickbooks_source.stg_quickbooks__bundle", "model.quickbooks_source.stg_quickbooks__bundle"], "model.quickbooks_source.stg_quickbooks__bundle_item_tmp": ["model.quickbooks_source.stg_quickbooks__bundle_item", "model.quickbooks_source.stg_quickbooks__bundle_item"], "model.quickbooks_source.stg_quickbooks__bill_payment_line_tmp": ["model.quickbooks_source.stg_quickbooks__bill_payment_line", "model.quickbooks_source.stg_quickbooks__bill_payment_line"], "model.quickbooks_source.stg_quickbooks__estimate_tmp": ["model.quickbooks_source.stg_quickbooks__estimate", "model.quickbooks_source.stg_quickbooks__estimate"], "model.quickbooks_source.stg_quickbooks__purchase_tmp": ["model.quickbooks_source.stg_quickbooks__purchase", "model.quickbooks_source.stg_quickbooks__purchase"], "model.quickbooks_source.stg_quickbooks__credit_memo_tmp": ["model.quickbooks_source.stg_quickbooks__credit_memo", "model.quickbooks_source.stg_quickbooks__credit_memo"], "model.quickbooks_source.stg_quickbooks__bill_tmp": ["model.quickbooks_source.stg_quickbooks__bill", "model.quickbooks_source.stg_quickbooks__bill"], "model.quickbooks_source.stg_quickbooks__transfer_tmp": ["model.quickbooks_source.stg_quickbooks__transfer", "model.quickbooks_source.stg_quickbooks__transfer"], "model.quickbooks_source.stg_quickbooks__vendor_tmp": ["model.quickbooks_source.stg_quickbooks__vendor", "model.quickbooks_source.stg_quickbooks__vendor"], "model.quickbooks_source.stg_quickbooks__purchase_line_tmp": ["model.quickbooks_source.stg_quickbooks__purchase_line", "model.quickbooks_source.stg_quickbooks__purchase_line"], "model.quickbooks_source.stg_quickbooks__address_tmp": ["model.quickbooks_source.stg_quickbooks__address", "model.quickbooks_source.stg_quickbooks__address"], "model.quickbooks_source.stg_quickbooks__payment_line_tmp": ["model.quickbooks_source.stg_quickbooks__payment_line", "model.quickbooks_source.stg_quickbooks__payment_line"], "model.quickbooks_source.stg_quickbooks__refund_receipt_tmp": ["model.quickbooks_source.stg_quickbooks__refund_receipt", "model.quickbooks_source.stg_quickbooks__refund_receipt"], "model.quickbooks_source.stg_quickbooks__sales_receipt_tmp": ["model.quickbooks_source.stg_quickbooks__sales_receipt", "model.quickbooks_source.stg_quickbooks__sales_receipt"], "model.quickbooks_source.stg_quickbooks__bill_payment_tmp": ["model.quickbooks_source.stg_quickbooks__bill_payment", "model.quickbooks_source.stg_quickbooks__bill_payment"], "model.quickbooks_source.stg_quickbooks__journal_entry_line_tmp": ["model.quickbooks_source.stg_quickbooks__journal_entry_line", "model.quickbooks_source.stg_quickbooks__journal_entry_line"], "model.quickbooks_source.stg_quickbooks__deposit_tmp": ["model.quickbooks_source.stg_quickbooks__deposit", "model.quickbooks_source.stg_quickbooks__deposit"], "model.quickbooks_source.stg_quickbooks__bill_linked_txn_tmp": ["model.quickbooks_source.stg_quickbooks__bill_linked_txn", "model.quickbooks_source.stg_quickbooks__bill_linked_txn"], "model.quickbooks_source.stg_quickbooks__invoice_linked_txn_tmp": ["model.quickbooks_source.stg_quickbooks__invoice_linked_txn", "model.quickbooks_source.stg_quickbooks__invoice_linked_txn"], "model.quickbooks_source.stg_quickbooks__sales_receipt_line_tmp": ["model.quickbooks_source.stg_quickbooks__sales_receipt_line", "model.quickbooks_source.stg_quickbooks__sales_receipt_line"], "model.quickbooks_source.stg_quickbooks__invoice_tmp": ["model.quickbooks_source.stg_quickbooks__invoice", "model.quickbooks_source.stg_quickbooks__invoice"], "test.quickbooks_source.unique_stg_quickbooks__account_account_id": [], "test.quickbooks_source.not_null_stg_quickbooks__account_account_id": [], "test.quickbooks_source.accepted_values_stg_quickbooks__account_classification__Asset__Equity__Expense__Liability__Revenue": [], "test.quickbooks_source.unique_stg_quickbooks__address_address_id": [], "test.quickbooks_source.not_null_stg_quickbooks__address_address_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_line_bill_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_linked_txn_bill_payment_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_line_bill_payment_id": [], "test.quickbooks_source.unique_stg_quickbooks__bill_payment_bill_payment_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_payment_bill_payment_id": [], "test.quickbooks_source.unique_stg_quickbooks__bill_bill_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bill_bill_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bundle_item_bundle_id": [], "test.quickbooks_source.unique_stg_quickbooks__bundle_bundle_id": [], "test.quickbooks_source.not_null_stg_quickbooks__bundle_bundle_id": [], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_line_credit_memo_id": [], "test.quickbooks_source.unique_stg_quickbooks__credit_memo_credit_memo_id": [], "test.quickbooks_source.not_null_stg_quickbooks__credit_memo_credit_memo_id": [], "test.quickbooks_source.unique_stg_quickbooks__customer_customer_id": [], "test.quickbooks_source.not_null_stg_quickbooks__customer_customer_id": [], "test.quickbooks_source.not_null_stg_quickbooks__deposit_line_deposit_id": [], "test.quickbooks_source.unique_stg_quickbooks__deposit_deposit_id": [], "test.quickbooks_source.not_null_stg_quickbooks__deposit_deposit_id": [], "test.quickbooks_source.unique_stg_quickbooks__estimate_estimate_id": [], "test.quickbooks_source.not_null_stg_quickbooks__estimate_estimate_id": [], "test.quickbooks_source.not_null_stg_quickbooks__estimate_line_estimate_id": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_linked_txn_invoice_id": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_invoice_id": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_line_bundle_invoice_id": [], "test.quickbooks_source.unique_stg_quickbooks__invoice_invoice_id": [], "test.quickbooks_source.not_null_stg_quickbooks__invoice_invoice_id": [], "test.quickbooks_source.unique_stg_quickbooks__item_item_id": [], "test.quickbooks_source.not_null_stg_quickbooks__item_item_id": [], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_line_journal_entry_id": [], "test.quickbooks_source.accepted_values_stg_quickbooks__journal_entry_line_posting_type__Credit__Debit": [], "test.quickbooks_source.unique_stg_quickbooks__journal_entry_journal_entry_id": [], "test.quickbooks_source.not_null_stg_quickbooks__journal_entry_journal_entry_id": [], "test.quickbooks_source.not_null_stg_quickbooks__payment_line_payment_id": [], "test.quickbooks_source.unique_stg_quickbooks__payment_payment_id": [], "test.quickbooks_source.not_null_stg_quickbooks__payment_payment_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_line_purchase_id": [], "test.quickbooks_source.unique_stg_quickbooks__purchase_purchase_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_purchase_id": [], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_payment_type__Cash__Check__CreditCard": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_line_purchase_order_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_linked_txn_purchase_order_id": [], "test.quickbooks_source.unique_stg_quickbooks__purchase_order_purchase_order_id": [], "test.quickbooks_source.not_null_stg_quickbooks__purchase_order_purchase_order_id": [], "test.quickbooks_source.accepted_values_stg_quickbooks__purchase_order_status__Open__Closed": [], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_line_refund_id": [], "test.quickbooks_source.unique_stg_quickbooks__refund_receipt_refund_id": [], "test.quickbooks_source.not_null_stg_quickbooks__refund_receipt_refund_id": [], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_line_sales_receipt_id": [], "test.quickbooks_source.unique_stg_quickbooks__sales_receipt_sales_receipt_id": [], "test.quickbooks_source.not_null_stg_quickbooks__sales_receipt_sales_receipt_id": [], "test.quickbooks_source.unique_stg_quickbooks__transfer_transfer_id": [], "test.quickbooks_source.not_null_stg_quickbooks__transfer_transfer_id": [], "test.quickbooks_source.unique_stg_quickbooks__vendor_credit_vendor_credit_id": [], "test.quickbooks_source.not_null_stg_quickbooks__vendor_credit_vendor_credit_id": [], "test.quickbooks_source.unique_stg_quickbooks__vendor_vendor_id": [], "test.quickbooks_source.not_null_stg_quickbooks__vendor_vendor_id": [], "source.quickbooks_source.quickbooks.account": [], "source.quickbooks_source.quickbooks.address": [], "source.quickbooks_source.quickbooks.bill_line": [], "source.quickbooks_source.quickbooks.bill_linked_txn": [], "source.quickbooks_source.quickbooks.bill_payment_line": [], "source.quickbooks_source.quickbooks.bill_payment": [], "source.quickbooks_source.quickbooks.bill": [], "source.quickbooks_source.quickbooks.bundle_item": [], "source.quickbooks_source.quickbooks.bundle": [], "source.quickbooks_source.quickbooks.credit_memo_line": [], "source.quickbooks_source.quickbooks.credit_memo": [], "source.quickbooks_source.quickbooks.customer": [], "source.quickbooks_source.quickbooks.department": [], "source.quickbooks_source.quickbooks.deposit_line": [], "source.quickbooks_source.quickbooks.deposit": [], "source.quickbooks_source.quickbooks.estimate": [], "source.quickbooks_source.quickbooks.estimate_line": [], "source.quickbooks_source.quickbooks.invoice_linked_txn": [], "source.quickbooks_source.quickbooks.invoice_line": [], "source.quickbooks_source.quickbooks.invoice_line_bundle": [], "source.quickbooks_source.quickbooks.invoice": [], "source.quickbooks_source.quickbooks.item": [], "source.quickbooks_source.quickbooks.journal_entry_line": [], "source.quickbooks_source.quickbooks.journal_entry": [], "source.quickbooks_source.quickbooks.payment_line": [], "source.quickbooks_source.quickbooks.payment": [], "source.quickbooks_source.quickbooks.purchase_line": [], "source.quickbooks_source.quickbooks.purchase": [], "source.quickbooks_source.quickbooks.purchase_order_line": [], "source.quickbooks_source.quickbooks.purchase_order_linked_txn": [], "source.quickbooks_source.quickbooks.purchase_order": [], "source.quickbooks_source.quickbooks.refund_receipt_line": [], "source.quickbooks_source.quickbooks.refund_receipt": [], "source.quickbooks_source.quickbooks.sales_receipt_line": [], "source.quickbooks_source.quickbooks.sales_receipt": [], "source.quickbooks_source.quickbooks.transfer": [], "source.quickbooks_source.quickbooks.vendor_credit_line": [], "source.quickbooks_source.quickbooks.vendor_credit": [], "source.quickbooks_source.quickbooks.vendor": []}}